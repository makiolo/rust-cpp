//
// Created by n424613 on 04/11/2023.
//

#include <catch_amalgamated.hpp>
#include <memory>
#include <vector>
#include "serie.h"
#include "sum.h"
#include "rand_normal.h"
#include "formulas/greeks.h"
#include "formulas/volatility.h"


static const int period = 30;
static const double initial_price = 100;
static const int elements = 150;


TEST_CASE("parkinson bench 1", "[rp]")
{
    // period volatility
    auto close = rp::constant(initial_price) +
                 (rp::constant(12.0) * rp::rand_normal(elements));
    auto high = rp::calculate(close + (rp::constant(3.0) * rp::rand_normal(elements)));
    auto low = rp::calculate(close - (rp::constant(3.0) * rp::rand_normal(elements)));

    auto high_win = rp::mapcalculate(rp::window(high, period));
    auto low_win = rp::mapcalculate(rp::window(low, period));

    size_t len = high_win.size();

    REQUIRE(high->size() == elements);
    REQUIRE(high_win.size() == elements - period);

    // BENCHMARK("parkinson bench") {

    auto *newdata = new double[len];
    for (size_t i = 0; i < len; ++i) {
        newdata[i] = rp::parkinson(period, high_win[i], low_win[i])->data()[0];
    }
    // transfer owner memory
    auto parkinson = std::make_shared<Serie>(newdata, len, true);
    REQUIRE_THAT(parkinson->to_vector(), Catch::Matchers::Approx(std::vector<double>(
        { 0.0275812173, 0.0271138989, 0.0268640469, 0.0273705038, 0.0272641084, 0.0281988797, 0.0290671665, 0.0286776361, 0.0287043296, 0.0320841171, 0.0320549085, 0.0317510416, 0.0334424894, 0.0333737366, 0.0327350318, 0.0326914815, 0.0328596735, 0.0330471589, 0.0324460915, 0.0324125125, 0.0318081866, 0.0322198746, 0.0320448709, 0.0311304109, 0.0309594568, 0.0305237411, 0.0306530651, 0.0309212191, 0.0306538475, 0.0310862909, 0.0295809908, 0.0296107312, 0.0295974952, 0.0293948323, 0.0292840554, 0.0283501446, 0.0272585447, 0.0270020477, 0.0283387944, 0.0245801191, 0.0246232208, 0.0235599665, 0.0210938975, 0.0211098108, 0.0210661146, 0.0210154843, 0.0205178878, 0.0212818488, 0.0213290187, 0.021177242, 0.0212699935, 0.0235023849, 0.0234169494, 0.0236476517, 0.0233768016, 0.0235064251, 0.0233246472, 0.0223248839, 0.0220709317, 0.0208957329, 0.0208378381, 0.0218288275, 0.0218786838, 0.0215026537, 0.0247462523, 0.0248150146, 0.0239486345, 0.0242086719, 0.0224445549, 0.0233592269, 0.0244018563, 0.0268449123, 0.0272314237, 0.0289065416, 0.0289547614, 0.0293502408, 0.0294066338, 0.0286692959, 0.0289549704, 0.0286455871, 0.0294744069, 0.0272760411, 0.0298212419, 0.029634742, 0.0296865269, 0.0295949772, 0.0299976576, 0.0300256936, 0.0305975921, 0.030962511, 0.0310032178, 0.0312330175, 0.0311825395, 0.031201149, 0.0287030468, 0.0287221846, 0.0286804535, 0.028632768, 0.0289315571, 0.0283620364, 0.0281800146, 0.0273501133, 0.0270428649, 0.0263445081, 0.0278116269, 0.0274411514, 0.027818163, 0.0277843827, 0.0274483671, 0.0274971932, 0.0265318626, 0.027092641, 0.0242830847, 0.0245608381, 0.0245137059, 0.0246581613, 0.0242390736, 0.0247293805, 0.0239477247, 0.0234515432 }
    )) );

    // };
}

TEST_CASE("parkinson bench 2", "[rp]")
{
    // period volatility
    auto close = rp::constant(initial_price) +
                 (rp::constant(12.0) * rp::rand_normal(elements));
    auto high = rp::calculate(close + (rp::constant(3.0) * rp::rand_normal(elements)));
    auto low = rp::calculate(close - (rp::constant(3.0) * rp::rand_normal(elements)));

    auto high_win = rp::mapcalculate(rp::window(high, period));
    auto low_win = rp::mapcalculate(rp::window(low, period));

    size_t len = high_win.size();

    // BENCHMARK("parkinson bench") {

     rp::dataframe results;
     for (size_t i = 0; i < len; ++i) {
         results.emplace_back(rp::parkinson(period, high_win[i], low_win[i]));
     }
     auto results2 = rp::transpose(results);
     REQUIRE_THAT(results2[0]->to_vector(), Catch::Matchers::Approx(std::vector<double>(
      // { 0.0275812173, 0.0271138989, 0.0268640469, 0.0273705038, 0.0272641084, 0.0281988797, 0.0290671665, 0.0286776361, 0.0287043296, 0.0320841171, 0.0320549085, 0.0317510416, 0.0334424894, 0.0333737366, 0.0327350318, 0.0326914815, 0.0328596735, 0.0330471589, 0.0324460915, 0.0324125125, 0.0318081866, 0.0322198746, 0.0320448709, 0.0311304109, 0.0309594568, 0.0305237411, 0.0306530651, 0.0309212191, 0.0306538475, 0.0310862909, 0.0295809908, 0.0296107312, 0.0295974952, 0.0293948323, 0.0292840554, 0.0283501446, 0.0272585447, 0.0270020477, 0.0283387944, 0.0245801191, 0.0246232208, 0.0235599665, 0.0210938975, 0.0211098108, 0.0210661146, 0.0210154843, 0.0205178878, 0.0212818488, 0.0213290187, 0.021177242, 0.0212699935, 0.0235023849, 0.0234169494, 0.0236476517, 0.0233768016, 0.0235064251, 0.0233246472, 0.0223248839, 0.0220709317, 0.0208957329, 0.0208378381, 0.0218288275, 0.0218786838, 0.0215026537, 0.0247462523, 0.0248150146, 0.0239486345, 0.0242086719, 0.0224445549, 0.0233592269, 0.0244018563, 0.0268449123, 0.0272314237, 0.0289065416, 0.0289547614, 0.0293502408, 0.0294066338, 0.0286692959, 0.0289549704, 0.0286455871, 0.0294744069, 0.0272760411, 0.0298212419, 0.029634742, 0.0296865269, 0.0295949772, 0.0299976576, 0.0300256936, 0.0305975921, 0.030962511, 0.0310032178, 0.0312330175, 0.0311825395, 0.031201149, 0.0287030468, 0.0287221846, 0.0286804535, 0.028632768, 0.0289315571, 0.0283620364, 0.0281800146, 0.0273501133, 0.0270428649, 0.0263445081, 0.0278116269, 0.0274411514, 0.027818163, 0.0277843827, 0.0274483671, 0.0274971932, 0.0265318626, 0.027092641, 0.0242830847, 0.0245608381, 0.0245137059, 0.0246581613, 0.0242390736, 0.0247293805, 0.0239477247, 0.0234515432 }
         { 0.0240714408, 0.0233880833, 0.0234342131, 0.0237551633, 0.0251330713, 0.0243725351, 0.0217295897, 0.0225108748, 0.0224533411, 0.0232061574, 0.0243101793, 0.0239605053, 0.0236813598, 0.0238205232, 0.0259573633, 0.0259659967, 0.0260549174, 0.0257994664, 0.0237865824, 0.0239392316, 0.0260061672, 0.0259238226, 0.0259436399, 0.0248360264, 0.0253404394, 0.0260703389, 0.0290197928, 0.0289980738, 0.0296717496, 0.0296860992, 0.0296906364, 0.0298445676, 0.029853747, 0.0296369095, 0.0285610676, 0.0287354576, 0.0289451378, 0.0282947354, 0.0283295066, 0.0277910713, 0.0266333878, 0.0268145664, 0.0267873625, 0.0267111857, 0.024664659, 0.0247540212, 0.0253406595, 0.0283466649, 0.0285082248, 0.0285116186, 0.0265396616, 0.0275844767, 0.0280071546, 0.0297033323, 0.0298094536, 0.0306102403, 0.0285048811, 0.0283582742, 0.0274909158, 0.027688534, 0.0277747905, 0.0281943492, 0.0281689935, 0.0280581851, 0.0290786376, 0.0286732333, 0.0287121221, 0.0287267946, 0.0297606009, 0.0295413569, 0.0295347011, 0.0287459377, 0.0287829915, 0.0290084439, 0.0288491595, 0.0289862299, 0.028635031, 0.0264842571, 0.0267517024, 0.0266137523, 0.0265395286, 0.0260917996, 0.0266568271, 0.0245829315, 0.024903501, 0.0245158356, 0.0236979424, 0.0235702812, 0.0243371712, 0.0242223698, 0.0244633817, 0.0237558579, 0.0239020775, 0.0240496313, 0.0227700534, 0.0249739297, 0.0249648536, 0.0249620144, 0.0241714315, 0.0252086685, 0.0252160164, 0.0252725972, 0.0256608483, 0.0277738691, 0.0278393321, 0.0276821415, 0.027203022, 0.0264089034, 0.0260949505, 0.0273182044, 0.0274014938, 0.0267133778, 0.0259709909, 0.0265130661, 0.0255716271, 0.0255714174, 0.0259563678, 0.026588351, 0.0265053444, 0.0265265066 }
     )) );

     // };
}
