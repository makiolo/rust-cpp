//
// Created by n424613 on 04/11/2023.
//

#include <catch_amalgamated.hpp>
#include <memory>
#include <vector>
#include "serie.h"
#include "sum.h"
#include "rand_normal.h"
#include "rsi.h"
#include "clean.h"
#include "formulas/greeks.h"
#include "formulas/volatility.h"


static const int period = 30;
static const double initial_price = 100;
static const int elements = 150;


TEST_CASE("parkinson bench 1", "[rp]")
{
    // period volatility
    auto close = rp::constant(initial_price) +
                 (rp::constant(12.0) * rp::rand_normal(elements));
    auto high = rp::calculate(close + (rp::constant(3.0) * rp::rand_normal(elements)));
    auto low = rp::calculate(close - (rp::constant(3.0) * rp::rand_normal(elements)));

    auto high_win = rp::mapcalculate(rp::window(high, period));
    auto low_win = rp::mapcalculate(rp::window(low, period));

    auto normal_rsi = rp::clean(rp::rsi(close, 14));
    REQUIRE_THAT(normal_rsi->to_vector(), Catch::Matchers::Approx(std::vector<double>(
            { 47.0622679088, 38.7734503634, 50.9734789796, 46.2347832166, 45.5413751001, 46.6967708661, 47.1879290713, 46.8025991718, 49.8526354953, 49.2607865847, 48.5512467287, 43.3406813018, 54.9005386959, 51.2869775703, 51.9200805345, 49.3004239288, 42.9276569434, 51.2981335436, 50.2400617636, 56.1092758308, 50.1365759055, 49.7345924389, 45.2362354603, 46.8005036186, 49.6003095065, 44.1259267193, 49.98512831, 51.9239521454, 52.8218141461, 54.9971140645, 53.4943483819, 53.6398933353, 46.6370798463, 49.6302966105, 48.617949697, 50.5523741946, 44.1765033106, 56.2225977113, 48.4805088413, 49.1102489595, 51.7937519138, 45.785965036, 45.2322720365, 49.2788755004, 52.944890175, 48.7975594151, 53.7328608631, 48.7836236527, 50.1596281569, 48.7322803551, 47.4803499049, 54.8837044471, 52.3400344272, 42.1503042038, 55.2640695738, 49.713365423, 53.714783088, 51.1932248076, 53.7036389202, 43.9713913712, 50.2052177405, 50.2436473628, 49.8570413468, 51.1477440714, 47.8045470161, 44.9813780615, 47.6341392567, 50.8414789319, 48.0489568316, 51.1218118693, 52.4422248208, 53.3916123628, 50.5170910084, 51.8003785837, 55.3202433858, 53.6319399456, 52.3779302086, 48.8681042563, 50.1589048316, 48.0070020713, 53.208046181, 51.2578227427, 45.7807719585, 50.776207868, 54.0250331505, 44.3491350928, 48.8831629235, 47.9862668568, 46.5518562523, 46.2200870135, 53.6797031208, 45.2012628549, 47.4146042142, 52.5171701984, 56.1487746606, 52.0515744836, 51.9732330206, 46.5158347207, 52.4310856597, 52.4573104257, 49.5170998333, 48.9256269339, 44.056247964, 52.4873922555, 47.0356033898, 45.3750770623, 51.5210794049, 52.4813141665, 51.4721622722, 54.5228220663, 49.6743068081, 50.4153954279, 51.655343302, 49.4022607095, 52.9671313621, 51.9661821433, 48.0251004713, 45.1878942114, 53.4211435512, 47.5383816925, 52.0265006316, 47.2920586062, 52.156682203, 49.162940628, 51.7282973514, 51.0015796261, 44.5426269108, 54.3480481648, 50.3450982248, 53.063267241, 45.3827595675, 46.2888904529, 50.7668389689, 50.4059691379, 47.4229943234, 48.4343193705 }
    )) );

    // TODO: check if have sense, maybe wrong
    auto close_rsi = rp::clean(rp::window3_last_rsi(close, 28, 14));
    REQUIRE_THAT(close_rsi->to_vector(), Catch::Matchers::Approx(std::vector<double>(
            { 51.2869775703 }
    )) );

    auto close_rsi2 = rp::clean(rp::window3_last_rsi(close, 28, 14));
    REQUIRE_THAT(close_rsi2->to_vector(), Catch::Matchers::Approx(std::vector<double>(
            // { 47.0622679088, 38.7734503634, 50.9734789796, 46.2347832166, 45.5413751001, 46.6967708661, 47.1879290713, 46.8025991718, 49.8526354953, 49.2607865847, 48.5512467287, 43.3406813018, 54.9005386959, 51.2869775703 }
            { 51.2869775703 }
    )) );


    auto high_win_mean = rp::window2_mean(high, period, true);
    REQUIRE_THAT(high_win_mean->to_vector(), Catch::Matchers::Approx(std::vector<double>(
            { 99.9296950127, 98.6769238338, 99.0967228213, 98.9581714931, 99.7277522093, 99.5895358866, 99.5688543163, 98.6338877601, 99.0932819329, 100.153021379, 99.0048024026, 99.4669300597, 99.6529549314, 99.9461018655, 99.9846396159, 100.4133267007, 102.0502485053, 101.4597886638, 101.8152298225, 102.2403808242, 102.5619241051, 102.2481894353, 103.3862129294, 103.3795050375, 103.1797003752, 103.7297369688, 104.0156000569, 102.6514597107, 102.117774527, 102.0211969228, 101.747220469, 103.0197415172, 102.7016743701, 102.6992792294, 101.9191798652, 101.8148376783, 102.1739866937, 103.1514288615, 102.3884069709, 103.1301967476, 103.8572352024, 104.5131987598, 104.4414163167, 105.0043636252, 103.4226810609, 103.2030582083, 102.7270720537, 102.9965409026, 103.1928689969, 102.9302770406, 102.1921281033, 102.6690306359, 102.0958541305, 101.7284583723, 101.9890870908, 102.0434414032, 102.9368656065, 103.6916725506, 104.1825388644, 104.6747084565, 105.2173987226, 105.0482481183, 105.1262698997, 105.3502033359, 105.0676148711, 105.815256433, 105.4091946382, 104.7398301506, 106.1153440039, 105.5019584348, 105.0888332643, 104.1058376145, 103.8161373662, 102.4417664252, 103.0493050597, 103.18686174, 102.5638454547, 102.3437989388, 102.3059978938, 103.2419784476, 104.4412192638, 104.7080883307, 104.3656682641, 105.1410910775, 105.5092886468, 105.251007027, 104.6877026468, 104.1102818642, 104.1371144314, 102.9592418435, 102.0176696229, 101.9243166285, 102.3705502419, 102.3167183974, 103.2252510756, 102.8949430609, 102.818679572, 103.3722817478, 103.2531493909, 103.4121769403, 104.5189665301, 104.4670214949, 104.1113829761, 105.1288928318, 105.4747233849, 105.621699641, 105.8594859484, 106.5042341306, 106.3709262623, 106.0694663215, 105.9166455832, 105.1416480003, 106.1018344017, 105.8717030041, 105.8648876546, 105.0218376829, 104.7952885886, 105.6542508555, 105.491932066, 105.7612460043 }
    )) );

    auto low_win_mean = rp::window2_mean(low, period, true);
    REQUIRE_THAT(low_win_mean->to_vector(), Catch::Matchers::Approx(std::vector<double>(
            { 100.0804337168, 98.9729402441, 99.2285366201, 99.2142926669, 99.7788738921, 99.9629497795, 99.8591890305, 99.0284287121, 99.5068077938, 99.990147875, 98.8065459848, 99.2724323792, 99.1169048336, 99.3180691916, 99.5403958013, 99.951025721, 101.4919907373, 100.946660491, 101.1360474096, 101.2572020226, 101.3879144578, 101.249598638, 102.3550036901, 102.1210279332, 101.8739841004, 102.2683885828, 102.4530858021, 101.0501082731, 100.5872520396, 100.9250173982, 100.9069364882, 102.1440011813, 101.8385487083, 101.7962015868, 101.0990218614, 100.8284035868, 101.2735439146, 102.406563894, 101.7566305701, 102.7596887365, 103.5182892368, 104.4085996688, 104.6586691229, 105.2028993908, 103.6832385538, 103.4188212565, 103.1297962036, 103.5018463464, 103.7327306228, 103.5009401651, 102.8229060843, 102.8388203586, 102.1884933296, 101.8970539415, 102.0735191021, 102.0440986106, 103.0324304244, 103.6669706903, 104.3974684717, 104.7159509182, 105.2910889373, 105.4388176223, 105.6117397211, 105.7423722587, 105.8325702391, 106.4030126458, 106.3226437379, 105.4912377021, 106.6568077327, 106.5457492995, 105.8965289566, 105.2548143223, 104.843167059, 103.7784973906, 104.4250465056, 104.7219505449, 104.125778886, 103.7565210808, 103.8130654544, 104.8293415663, 105.7333021872, 106.380790821, 105.7031670062, 106.3733953278, 106.7844752868, 106.6370206558, 106.2097096865, 105.5236535285, 105.6735214649, 104.5576328263, 103.5886208437, 103.001511535, 103.36341168, 103.2200422788, 103.7951955125, 103.4684610641, 103.2543797826, 104.0329639646, 103.7981908722, 103.4484028364, 104.5100419576, 104.3791487874, 104.2165082273, 104.7024246203, 104.727692712, 104.652626586, 104.9813428723, 105.4845755448, 105.2193432251, 105.033079819, 105.1170237466, 104.4335235014, 105.6920480629, 105.3544997853, 105.3210233534, 104.5213536783, 104.0893853549, 104.8276608355, 104.5193495649, 104.5885695556 }
    )) );

    size_t len = high_win.size();

    REQUIRE(high->size() == elements);
    REQUIRE(high_win.size() == elements - period);

    // BENCHMARK("parkinson bench") {

    auto *newdata = new double[len];
    for (size_t i = 0; i < len; ++i) {
        newdata[i] = rp::parkinson(period, high_win[i], low_win[i])->data()[0];
    }
    // transfer owner memory
    auto parkinson = std::make_shared<Serie>(newdata, len, true);
    REQUIRE_THAT(parkinson->to_vector(), Catch::Matchers::Approx(std::vector<double>(
        { 0.0275812173, 0.0271138989, 0.0268640469, 0.0273705038, 0.0272641084, 0.0281988797, 0.0290671665, 0.0286776361, 0.0287043296, 0.0320841171, 0.0320549085, 0.0317510416, 0.0334424894, 0.0333737366, 0.0327350318, 0.0326914815, 0.0328596735, 0.0330471589, 0.0324460915, 0.0324125125, 0.0318081866, 0.0322198746, 0.0320448709, 0.0311304109, 0.0309594568, 0.0305237411, 0.0306530651, 0.0309212191, 0.0306538475, 0.0310862909, 0.0295809908, 0.0296107312, 0.0295974952, 0.0293948323, 0.0292840554, 0.0283501446, 0.0272585447, 0.0270020477, 0.0283387944, 0.0245801191, 0.0246232208, 0.0235599665, 0.0210938975, 0.0211098108, 0.0210661146, 0.0210154843, 0.0205178878, 0.0212818488, 0.0213290187, 0.021177242, 0.0212699935, 0.0235023849, 0.0234169494, 0.0236476517, 0.0233768016, 0.0235064251, 0.0233246472, 0.0223248839, 0.0220709317, 0.0208957329, 0.0208378381, 0.0218288275, 0.0218786838, 0.0215026537, 0.0247462523, 0.0248150146, 0.0239486345, 0.0242086719, 0.0224445549, 0.0233592269, 0.0244018563, 0.0268449123, 0.0272314237, 0.0289065416, 0.0289547614, 0.0293502408, 0.0294066338, 0.0286692959, 0.0289549704, 0.0286455871, 0.0294744069, 0.0272760411, 0.0298212419, 0.029634742, 0.0296865269, 0.0295949772, 0.0299976576, 0.0300256936, 0.0305975921, 0.030962511, 0.0310032178, 0.0312330175, 0.0311825395, 0.031201149, 0.0287030468, 0.0287221846, 0.0286804535, 0.028632768, 0.0289315571, 0.0283620364, 0.0281800146, 0.0273501133, 0.0270428649, 0.0263445081, 0.0278116269, 0.0274411514, 0.027818163, 0.0277843827, 0.0274483671, 0.0274971932, 0.0265318626, 0.027092641, 0.0242830847, 0.0245608381, 0.0245137059, 0.0246581613, 0.0242390736, 0.0247293805, 0.0239477247, 0.0234515432 }
    )) );

    // };
}

TEST_CASE("parkinson bench 2", "[rp]")
{
    // period volatility
    auto close = rp::constant(initial_price) +
                 (rp::constant(12.0) * rp::rand_normal(elements));
    auto high = rp::calculate(close + (rp::constant(3.0) * rp::rand_normal(elements)));
    auto low = rp::calculate(close - (rp::constant(3.0) * rp::rand_normal(elements)));

    auto high_win = rp::mapcalculate(rp::window(high, period));
    auto low_win = rp::mapcalculate(rp::window(low, period));

    size_t len = high_win.size();

    // BENCHMARK("parkinson bench") {

     rp::dataframe results;
     for (size_t i = 0; i < len; ++i) {
         results.emplace_back(rp::parkinson(period, high_win[i], low_win[i]));
     }
     auto results2 = rp::transpose(results);
     REQUIRE_THAT(results2[0]->to_vector(), Catch::Matchers::Approx(std::vector<double>(
      // { 0.0275812173, 0.0271138989, 0.0268640469, 0.0273705038, 0.0272641084, 0.0281988797, 0.0290671665, 0.0286776361, 0.0287043296, 0.0320841171, 0.0320549085, 0.0317510416, 0.0334424894, 0.0333737366, 0.0327350318, 0.0326914815, 0.0328596735, 0.0330471589, 0.0324460915, 0.0324125125, 0.0318081866, 0.0322198746, 0.0320448709, 0.0311304109, 0.0309594568, 0.0305237411, 0.0306530651, 0.0309212191, 0.0306538475, 0.0310862909, 0.0295809908, 0.0296107312, 0.0295974952, 0.0293948323, 0.0292840554, 0.0283501446, 0.0272585447, 0.0270020477, 0.0283387944, 0.0245801191, 0.0246232208, 0.0235599665, 0.0210938975, 0.0211098108, 0.0210661146, 0.0210154843, 0.0205178878, 0.0212818488, 0.0213290187, 0.021177242, 0.0212699935, 0.0235023849, 0.0234169494, 0.0236476517, 0.0233768016, 0.0235064251, 0.0233246472, 0.0223248839, 0.0220709317, 0.0208957329, 0.0208378381, 0.0218288275, 0.0218786838, 0.0215026537, 0.0247462523, 0.0248150146, 0.0239486345, 0.0242086719, 0.0224445549, 0.0233592269, 0.0244018563, 0.0268449123, 0.0272314237, 0.0289065416, 0.0289547614, 0.0293502408, 0.0294066338, 0.0286692959, 0.0289549704, 0.0286455871, 0.0294744069, 0.0272760411, 0.0298212419, 0.029634742, 0.0296865269, 0.0295949772, 0.0299976576, 0.0300256936, 0.0305975921, 0.030962511, 0.0310032178, 0.0312330175, 0.0311825395, 0.031201149, 0.0287030468, 0.0287221846, 0.0286804535, 0.028632768, 0.0289315571, 0.0283620364, 0.0281800146, 0.0273501133, 0.0270428649, 0.0263445081, 0.0278116269, 0.0274411514, 0.027818163, 0.0277843827, 0.0274483671, 0.0274971932, 0.0265318626, 0.027092641, 0.0242830847, 0.0245608381, 0.0245137059, 0.0246581613, 0.0242390736, 0.0247293805, 0.0239477247, 0.0234515432 }
         { 0.0240714408, 0.0233880833, 0.0234342131, 0.0237551633, 0.0251330713, 0.0243725351, 0.0217295897, 0.0225108748, 0.0224533411, 0.0232061574, 0.0243101793, 0.0239605053, 0.0236813598, 0.0238205232, 0.0259573633, 0.0259659967, 0.0260549174, 0.0257994664, 0.0237865824, 0.0239392316, 0.0260061672, 0.0259238226, 0.0259436399, 0.0248360264, 0.0253404394, 0.0260703389, 0.0290197928, 0.0289980738, 0.0296717496, 0.0296860992, 0.0296906364, 0.0298445676, 0.029853747, 0.0296369095, 0.0285610676, 0.0287354576, 0.0289451378, 0.0282947354, 0.0283295066, 0.0277910713, 0.0266333878, 0.0268145664, 0.0267873625, 0.0267111857, 0.024664659, 0.0247540212, 0.0253406595, 0.0283466649, 0.0285082248, 0.0285116186, 0.0265396616, 0.0275844767, 0.0280071546, 0.0297033323, 0.0298094536, 0.0306102403, 0.0285048811, 0.0283582742, 0.0274909158, 0.027688534, 0.0277747905, 0.0281943492, 0.0281689935, 0.0280581851, 0.0290786376, 0.0286732333, 0.0287121221, 0.0287267946, 0.0297606009, 0.0295413569, 0.0295347011, 0.0287459377, 0.0287829915, 0.0290084439, 0.0288491595, 0.0289862299, 0.028635031, 0.0264842571, 0.0267517024, 0.0266137523, 0.0265395286, 0.0260917996, 0.0266568271, 0.0245829315, 0.024903501, 0.0245158356, 0.0236979424, 0.0235702812, 0.0243371712, 0.0242223698, 0.0244633817, 0.0237558579, 0.0239020775, 0.0240496313, 0.0227700534, 0.0249739297, 0.0249648536, 0.0249620144, 0.0241714315, 0.0252086685, 0.0252160164, 0.0252725972, 0.0256608483, 0.0277738691, 0.0278393321, 0.0276821415, 0.027203022, 0.0264089034, 0.0260949505, 0.0273182044, 0.0274014938, 0.0267133778, 0.0259709909, 0.0265130661, 0.0255716271, 0.0255714174, 0.0259563678, 0.026588351, 0.0265053444, 0.0265265066 }
     )) );

     // };
}
