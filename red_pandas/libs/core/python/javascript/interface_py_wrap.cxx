/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifndef SWIG_V8_VERSION
#define SWIG_V8_VERSION 0x031110
#endif


#include <node.h>
//Older version of node.h does not include this
#include <node_version.h>


#include <v8.h>

#include <errno.h>
#include <limits.h>
#include <stdlib.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* ---------------------------------------------------------------------------
 * These typedefs and defines are used to deal with v8 API changes
 *
 * ---------------------------------------------------------------------------*/

// First v8 version that uses "SetWeak" and not "MakeWeak"

#define SWIGV8_SETWEAK_VERSION 0x032224

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031803)
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::New(cstr, len)
#else
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), cstr, v8::String::kNormalString, len)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::Handle<v8::Value> SwigV8ReturnValue;
typedef v8::Arguments SwigV8Arguments;
typedef v8::AccessorInfo SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) return scope.Close(val)
#define SWIGV8_RETURN_INFO(val, info) return scope.Close(val)
#else
typedef void SwigV8ReturnValue;
typedef v8::FunctionCallbackInfo<v8::Value> SwigV8Arguments;
typedef v8::PropertyCallbackInfo<v8::Value> SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) args.GetReturnValue().Set(val); return
#define SWIGV8_RETURN_INFO(val, info) info.GetReturnValue().Set(val); return
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032117)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#else
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::EscapableHandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Escape(val)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_ADJUST_MEMORY(size) v8::V8::AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Context::GetCurrent()
#define SWIGV8_THROW_EXCEPTION(err) v8::ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::New(str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewSymbol(sym)
#else
#define SWIGV8_ADJUST_MEMORY(size) v8::Isolate::GetCurrent()->AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Isolate::GetCurrent()->GetCurrentContext()
#define SWIGV8_THROW_EXCEPTION(err) v8::Isolate::GetCurrent()->ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), sym)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032318)
#define SWIGV8_ARRAY_NEW() v8::Array::New()
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New()
#define SWIGV8_INT32_NEW(num) v8::Int32::New(num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(num)
#define SWIGV8_OBJECT_NEW() v8::Object::New()
#define SWIGV8_UNDEFINED() v8::Undefined()
#define SWIGV8_NULL() v8::Null()
#else
#define SWIGV8_ARRAY_NEW() v8::Array::New(v8::Isolate::GetCurrent())
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(v8::Isolate::GetCurrent(), bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(v8::Isolate::GetCurrent(), val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(v8::Isolate::GetCurrent(), func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New(v8::Isolate::GetCurrent())
#define SWIGV8_INT32_NEW(num) v8::Int32::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(v8::Isolate::GetCurrent(), num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_OBJECT_NEW() v8::Object::New(v8::Isolate::GetCurrent())
#define SWIGV8_UNDEFINED() v8::Undefined(v8::Isolate::GetCurrent())
#define SWIGV8_NULL() v8::Null(v8::Isolate::GetCurrent())
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(class);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(v8::Isolate::GetCurrent(), class);
#else
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ.Reset(v8::Isolate::GetCurrent(), class);
#endif

#ifdef NODE_VERSION
#if NODE_VERSION_AT_LEAST(10, 12, 0)
#define SWIG_NODE_AT_LEAST_1012
#endif
#endif

//Necessary to check Node.js version because V8 API changes are backported in Node.js
#if (defined(NODE_VERSION) && !defined(SWIG_NODE_AT_LEAST_1012)) || \
    (!defined(NODE_VERSION) && (V8_MAJOR_VERSION-0) < 7)
#define SWIGV8_TO_OBJECT(handle) (handle)->ToObject()
#define SWIGV8_TO_STRING(handle) (handle)->ToString()
#define SWIGV8_NUMBER_VALUE(handle) (handle)->NumberValue()
#define SWIGV8_INTEGER_VALUE(handle) (handle)->IntegerValue()
#define SWIGV8_BOOLEAN_VALUE(handle) (handle)->BooleanValue()
#define SWIGV8_WRITE_UTF8(handle, buffer, len) (handle)->WriteUtf8(buffer, len)
#define SWIGV8_UTF8_LENGTH(handle) (handle)->Utf8Length()
#else
#define SWIGV8_TO_OBJECT(handle) (handle)->ToObject(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked()
#define SWIGV8_TO_STRING(handle) (handle)->ToString(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked()
#define SWIGV8_NUMBER_VALUE(handle) (handle)->NumberValue(SWIGV8_CURRENT_CONTEXT()).ToChecked()
#define SWIGV8_INTEGER_VALUE(handle) (handle)->IntegerValue(SWIGV8_CURRENT_CONTEXT()).ToChecked()
#define SWIGV8_BOOLEAN_VALUE(handle) (handle)->BooleanValue(SWIGV8_CURRENT_CONTEXT()).ToChecked()
#define SWIGV8_WRITE_UTF8(handle, buffer, len) (handle)->WriteUtf8(v8::Isolate::GetCurrent(), buffer, len)
#define SWIGV8_UTF8_LENGTH(handle) (handle)->Utf8Length(v8::Isolate::GetCurrent())
#endif

/* ---------------------------------------------------------------------------
 * Error handling
 *
 * ---------------------------------------------------------------------------*/

#define SWIG_Error(code, msg)     SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_exception(code, msg) do { SWIGV8_ErrorHandler.error(code, msg); SWIG_fail; } while (0)
#define SWIG_fail                 goto fail
#define SWIGV8_OVERLOAD false

SWIGINTERN void SWIG_V8_Raise(const char *msg) {
  SWIGV8_THROW_EXCEPTION(v8::Exception::Error(SWIGV8_STRING_NEW(msg)));
}

/*
  Note: There are two contexts for handling errors.
  A static V8ErrorHandler is used in not overloaded methods.
  For overloaded methods the throwing type checking mechanism is used
  during dispatching. As V8 exceptions can not be reset properly
  the trick is to use a dynamic ErrorHandler with same local name as the global
  one.

  - See definition of SWIG_Error above.
  - See code templates 'JS_function_dispatcher', 'JS_functionwrapper_overload',
    and 'JS_function_dispatch_case' in javascriptcode.swg

*/
class V8ErrorHandler {
public:
  virtual ~V8ErrorHandler() {}
  virtual void error(int code, const char *msg) {
    SWIG_V8_Raise(msg);
  }
};
// this is used in usually
SWIGRUNTIME V8ErrorHandler SWIGV8_ErrorHandler;

// instances of this are used in overloaded functions
class OverloadErrorHandler: public V8ErrorHandler {
public:
  virtual void error(int code, const char *msg) {
    err = v8::Exception::Error(SWIGV8_STRING_NEW(msg));
    if(code != SWIG_TypeError) {
        SWIGV8_THROW_EXCEPTION(err);
    }
  }
  v8::Handle<v8::Value> err;
};

/* ---------------------------------------------------------------------------
 * Basic Proxy object
 *
 * ---------------------------------------------------------------------------*/

// Note: to trigger the v8 gc more often one can tell v8 about the memory consumption
// TODO: we could add a v8 specific parameter to control this value
#define SWIGV8_AVG_OBJ_SIZE 1000

class SWIGV8_Proxy {
public:
  SWIGV8_Proxy(): swigCMemOwn(false), swigCObject(0), info(0) {
    SWIGV8_ADJUST_MEMORY(SWIGV8_AVG_OBJ_SIZE);
  };

  ~SWIGV8_Proxy() {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
    handle.ClearWeak();
    handle.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
    handle.ClearWeak(v8::Isolate::GetCurrent());
    handle.Dispose(v8::Isolate::GetCurrent());
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.ClearWeak();
    handle.Dispose();
#else    
    handle.ClearWeak();
    handle.Reset();
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.Clear();
#endif

    SWIGV8_ADJUST_MEMORY(-SWIGV8_AVG_OBJ_SIZE);
  }

  bool swigCMemOwn;
  void *swigCObject;
  swig_type_info *info;
  v8::Persistent<v8::Object> handle;
};

class SWIGV8_ClientData {
public:
  v8::Persistent<v8::FunctionTemplate> class_templ;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  void (*dtor) (v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy);
#elif (V8_MAJOR_VERSION-0) < 5
  void (*dtor) (const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data);
#else
  void (*dtor) (const v8::WeakCallbackInfo<SWIGV8_Proxy> &data);
#endif
};

SWIGRUNTIME v8::Persistent<v8::FunctionTemplate> SWIGV8_SWIGTYPE_Proxy_class_templ;

SWIGRUNTIME int SWIG_V8_ConvertInstancePtr(v8::Handle<v8::Object> objRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }
  if(cdata->info != info) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(cdata->info, info);
    if (!tc && cdata->info->name) {
      tc = SWIG_TypeCheck(cdata->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
  }
  *ptr = cdata->swigCObject;
  if(flags & SWIG_POINTER_DISOWN) {
    cdata->swigCMemOwn = false;
  }
  return SWIG_OK;
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
  SWIGV8_Proxy *proxy = data.GetParameter();
#else
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
  SWIGV8_Proxy *proxy = data.GetParameter();
#endif

  delete proxy;
}

SWIGRUNTIME int SWIG_V8_GetInstancePtr(v8::Handle<v8::Value> valRef, void **ptr) {
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = SWIGV8_TO_OBJECT(valRef);

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }

  *ptr = cdata->swigCObject;

  return SWIG_OK;
}

SWIGRUNTIME void SWIGV8_SetPrivateData(v8::Handle<v8::Object> obj, void *ptr, swig_type_info *info, int flags) {
  SWIGV8_Proxy *cdata = new SWIGV8_Proxy();
  cdata->swigCObject = ptr;
  cdata->swigCMemOwn = (flags & SWIG_POINTER_OWN) ? 1 : 0;
  cdata->info = info;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  // clientdata must be set for owned data as we need to register the dtor
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 5
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.SetWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.SetWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#else
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.SetWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor, v8::WeakCallbackType::kParameter);
  } else {
    cdata->handle.SetWeak(cdata, SWIGV8_Proxy_DefaultDtor, v8::WeakCallbackType::kParameter);
  }
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

}

SWIGRUNTIME int SWIG_V8_ConvertPtr(v8::Handle<v8::Value> valRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();
  
  /* special case: JavaScript null => C NULL pointer */
  if(valRef->IsNull()) {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = SWIGV8_TO_OBJECT(valRef);
  return SWIG_V8_ConvertInstancePtr(objRef, ptr, info, flags);
}

SWIGRUNTIME v8::Handle<v8::Value> SWIG_V8_NewPointerObj(void *ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE_ESC();
  
  v8::Handle<v8::FunctionTemplate> class_templ;

  if (ptr == NULL) {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    SWIGV8_ESCAPE(SWIGV8_NULL());
#else    
    v8::Local<v8::Primitive> result = SWIGV8_NULL();
    SWIGV8_ESCAPE(result);
#endif
  }

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  if(info->clientdata != 0) {
    class_templ = ((SWIGV8_ClientData*) info->clientdata)->class_templ;
  } else {
    class_templ = SWIGV8_SWIGTYPE_Proxy_class_templ;
  }
#else
  v8::Isolate *isolate = v8::Isolate::GetCurrent();

  if(info->clientdata != 0) {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, ((SWIGV8_ClientData*) info->clientdata)->class_templ);
  } else {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, SWIGV8_SWIGTYPE_Proxy_class_templ);
  }
#endif

//  v8::Handle<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  v8::Local<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  SWIGV8_SetPrivateData(result, ptr, info, flags);

  SWIGV8_ESCAPE(result);
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)    SWIG_V8_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)      SWIG_V8_NewPointerObj(ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_V8_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_V8_NewPointerObj(thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_V8_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_V8_NewPointerObj(ptr, type, 0)

#define SWIG_GetInstancePtr(obj, ptr)    SWIG_V8_GetInstancePtr(obj, ptr)

SWIGRUNTIME SwigV8ReturnValue _SWIGV8_wrap_equals(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  int res1;
  int res2;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for equals.");

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(args[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "equals" "', argument " "1"" of type '" "void *""'");
  }

  result = (bool)(arg1 == arg2);
  jsresult =  SWIGV8_BOOLEAN_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

SWIGRUNTIME SwigV8ReturnValue _wrap_getCPtr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
  }

  result = (long)arg1;
  jsresult = SWIGV8_NUMBER_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

/* ---------------------------------------------------------------------------
 * PackedData object
 *
 * ---------------------------------------------------------------------------*/

class SwigV8PackedData {
public:
  SwigV8PackedData(void *data, size_t size, swig_type_info *type): data(data), size(size), type(type) {};

  ~SwigV8PackedData() {
  };

  void *data;
  size_t size;
  swig_type_info *type;

  v8::Persistent<v8::Object> handle;
};

SWIGRUNTIMEINLINE
int SwigV8Packed_Check(v8::Handle<v8::Value> valRef) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> objRef = SWIGV8_TO_OBJECT(valRef);
  if(objRef->InternalFieldCount() < 1) return false;
#if (V8_MAJOR_VERSION-0) < 5
  v8::Handle<v8::Value> flag = objRef->GetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"));
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(v8::Isolate::GetCurrent(), SWIGV8_STRING_NEW("__swig__packed_data__"));
  v8::Local<v8::Value> flag;
  if (!objRef->GetPrivate(SWIGV8_CURRENT_CONTEXT(), privateKey).ToLocal(&flag))
    return false;
#endif
  return (flag->IsBoolean() && SWIGV8_BOOLEAN_VALUE(flag));
}

SWIGRUNTIME
swig_type_info *SwigV8Packed_UnpackData(v8::Handle<v8::Value> valRef, void *ptr, size_t size) {
  if (SwigV8Packed_Check(valRef)) {
    SWIGV8_HANDLESCOPE();
    
    SwigV8PackedData *sobj;

    v8::Handle<v8::Object> objRef = SWIGV8_TO_OBJECT(valRef);

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
    v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
    sobj = static_cast<SwigV8PackedData*>(v8::External::Unwrap(cdataRef));
#else
    sobj = static_cast<SwigV8PackedData*>(objRef->GetAlignedPointerFromInternalField(0));
#endif
    if (sobj == NULL || sobj->size != size) return 0;
    memcpy(ptr, sobj->data, size);
    return sobj->type;
  } else {
    return 0;
  }
}

SWIGRUNTIME
int SWIGV8_ConvertPacked(v8::Handle<v8::Value> valRef, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigV8Packed_UnpackData(valRef, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Persistent< v8::Value > object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Object> *object, SwigV8PackedData *cdata) {
#elif (V8_MAJOR_VERSION-0) < 5
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(const v8::WeakCallbackData<v8::Object, SwigV8PackedData> &data) {
  v8::Local<v8::Object> object = data.GetValue();
  SwigV8PackedData *cdata = data.GetParameter();
#else
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(const v8::WeakCallbackInfo<SwigV8PackedData> &data) {
  SwigV8PackedData *cdata = data.GetParameter();
#endif

  delete cdata;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  object.Clear();
  object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  object.Clear();
  object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
  object.Clear();
#endif
}

SWIGRUNTIME
v8::Handle<v8::Value> SWIGV8_NewPackedObj(void *data, size_t size, swig_type_info *type) {
  SWIGV8_HANDLESCOPE_ESC();

  SwigV8PackedData *cdata = new SwigV8PackedData(data, size, type);
//  v8::Handle<v8::Object> obj = SWIGV8_OBJECT_NEW();
  v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();

#if (V8_MAJOR_VERSION-0) < 5
  obj->SetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"), SWIGV8_BOOLEAN_NEW(true));
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(v8::Isolate::GetCurrent(), SWIGV8_STRING_NEW("__swig__packed_data__"));
  obj->SetPrivate(SWIGV8_CURRENT_CONTEXT(), privateKey, SWIGV8_BOOLEAN_NEW(true));
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
  cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 5
  cdata->handle.SetWeak(cdata, _wrap_SwigV8PackedData_delete);
//  v8::V8::SetWeak(&cdata->handle, cdata, _wrap_SwigV8PackedData_delete);
#else
  cdata->handle.SetWeak(cdata, _wrap_SwigV8PackedData_delete, v8::WeakCallbackType::kParameter);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

  SWIGV8_ESCAPE(obj);
}

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIGV8_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIGV8_NewPackedObj(ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Handle<v8::Value> result, v8::Handle<v8::Value> obj) {
#else
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Local<v8::Value> result, v8::Handle<v8::Value> obj) {
#endif
  SWIGV8_HANDLESCOPE_ESC();
  
  if (result->IsUndefined()) {
    result = SWIGV8_ARRAY_NEW();
  }
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  v8::Handle<v8::Array> arr = v8::Handle<v8::Array>::Cast(result);
#else  
  v8::Local<v8::Array> arr = v8::Local<v8::Array>::Cast(result);
#endif
  arr->Set(arr->Length(), obj);

  SWIGV8_ESCAPE(arr);
}



// Note: since 3.19 there are new CallBack types, since 03.21.9 the old ones have been removed
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::InvocationCallback  SwigV8FunctionCallback;
typedef v8::AccessorGetter      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetter      SwigV8AccessorSetterCallback;
typedef v8::AccessorInfo        SwigV8PropertyCallbackInfoVoid;
#elif (V8_MAJOR_VERSION-0) < 5
typedef v8::FunctionCallback            SwigV8FunctionCallback;
typedef v8::AccessorGetterCallback      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetterCallback      SwigV8AccessorSetterCallback;
typedef v8::PropertyCallbackInfo<void>  SwigV8PropertyCallbackInfoVoid;
#else
typedef v8::FunctionCallback            SwigV8FunctionCallback;
typedef v8::AccessorNameGetterCallback  SwigV8AccessorGetterCallback;
typedef v8::AccessorNameSetterCallback  SwigV8AccessorSetterCallback;
typedef v8::PropertyCallbackInfo<void>  SwigV8PropertyCallbackInfoVoid;
#endif

/**
 * Creates a class template for a class with specified initialization function.
 */
SWIGRUNTIME v8::Handle<v8::FunctionTemplate> SWIGV8_CreateClassTemplate(const char* symbol) {
    SWIGV8_HANDLESCOPE_ESC();
    
    v8::Local<v8::FunctionTemplate> class_templ = SWIGV8_FUNCTEMPLATE_NEW_VOID();
    class_templ->SetClassName(SWIGV8_SYMBOL_NEW(symbol));

    v8::Handle<v8::ObjectTemplate> inst_templ = class_templ->InstanceTemplate();
    inst_templ->SetInternalFieldCount(1);

    v8::Handle<v8::ObjectTemplate> equals_templ = class_templ->PrototypeTemplate();
    equals_templ->Set(SWIGV8_SYMBOL_NEW("equals"), SWIGV8_FUNCTEMPLATE_NEW(_SWIGV8_wrap_equals));

    v8::Handle<v8::ObjectTemplate> cptr_templ = class_templ->PrototypeTemplate();
    cptr_templ->Set(SWIGV8_SYMBOL_NEW("getCPtr"), SWIGV8_FUNCTEMPLATE_NEW(_wrap_getCPtr));

    SWIGV8_ESCAPE(class_templ);
}

/**
 * Registers a class method with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberFunction(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8FunctionCallback _func) {
    v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->PrototypeTemplate();
    proto_templ->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func));
}

/**
 * Registers a class property with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberVariable(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->InstanceTemplate();
  proto_templ->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticFunction(v8::Handle<v8::Object> obj, const char* symbol,
  const SwigV8FunctionCallback& _func) {
  obj->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func)->GetFunction());
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticVariable(v8::Handle<v8::Object> obj, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
#if (V8_MAJOR_VERSION-0) < 5
  obj->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
#else
  obj->SetAccessor(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW(symbol), getter, setter);
#endif
}

#if (V8_MAJOR_VERSION-0) < 5
SWIGRUNTIME void JS_veto_set_variable(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid& info)
#else
SWIGRUNTIME void JS_veto_set_variable(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid& info)
#endif
{
    char buffer[256];
    char msg[512];
    int res;

#if (V8_MAJOR_VERSION-0) < 5
    property->WriteUtf8(buffer, 256);
    res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);
#else
    v8::Local<v8::String> sproperty;
    if (property->ToString(SWIGV8_CURRENT_CONTEXT()).ToLocal(&sproperty)) {
      SWIGV8_WRITE_UTF8(sproperty, buffer, 256);
      res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);
    }
    else {
      res = -1;
    }
#endif

    if(res<0) {
      SWIG_exception(SWIG_ERROR, "Tried to write read-only variable.");
    } else {
      SWIG_exception(SWIG_ERROR, msg);
    }
fail: ;
}



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Buffer swig_types[0]
#define SWIGTYPE_p_NoneType swig_types[1]
#define SWIGTYPE_p_Serie swig_types[2]
#define SWIGTYPE_p_char swig_types[3]
#define SWIGTYPE_p_date__year_month_day swig_types[4]
#define SWIGTYPE_p_difference_type swig_types[5]
#define SWIGTYPE_p_double swig_types[6]
#define SWIGTYPE_p_f_int_p_q_const__char__void swig_types[7]
#define SWIGTYPE_p_nc__NdArrayT_double_t swig_types[8]
#define SWIGTYPE_p_pf__BlockChain swig_types[9]
#define SWIGTYPE_p_pf__ClosedDeal swig_types[10]
#define SWIGTYPE_p_pf__Deal swig_types[11]
#define SWIGTYPE_p_pf__FakeTrader swig_types[12]
#define SWIGTYPE_p_pf__OpenDeal swig_types[13]
#define SWIGTYPE_p_pf__SymbolInfoTick swig_types[14]
#define SWIGTYPE_p_pf__Transaction swig_types[15]
#define SWIGTYPE_p_pf__TxFrom swig_types[16]
#define SWIGTYPE_p_pf__TxTo swig_types[17]
#define SWIGTYPE_p_pf__amount_info swig_types[18]
#define SWIGTYPE_p_pf__tuple_hash swig_types[19]
#define SWIGTYPE_p_qs__Calendar swig_types[20]
#define SWIGTYPE_p_qs__CashFlow swig_types[21]
#define SWIGTYPE_p_qs__CouponCashFlow swig_types[22]
#define SWIGTYPE_p_qs__CustomCashFlow swig_types[23]
#define SWIGTYPE_p_qs__DiscountFactor swig_types[24]
#define SWIGTYPE_p_qs__EndCashFlow swig_types[25]
#define SWIGTYPE_p_qs__ForwardPeriod swig_types[26]
#define SWIGTYPE_p_qs__InterestRate swig_types[27]
#define SWIGTYPE_p_qs__Leg swig_types[28]
#define SWIGTYPE_p_qs__LegGenerator swig_types[29]
#define SWIGTYPE_p_qs__Maturity swig_types[30]
#define SWIGTYPE_p_qs__Product swig_types[31]
#define SWIGTYPE_p_qs__ProductGenerator swig_types[32]
#define SWIGTYPE_p_qs__Schedule swig_types[33]
#define SWIGTYPE_p_qs__StartCashFlow swig_types[34]
#define SWIGTYPE_p_qs__TermStructure swig_types[35]
#define SWIGTYPE_p_qs__ZeroPeriod swig_types[36]
#define SWIGTYPE_p_results_type swig_types[37]
#define SWIGTYPE_p_rp__CalculationT_Serie_t swig_types[38]
#define SWIGTYPE_p_rp__CalculationT_Serie_t__result_type swig_types[39]
#define SWIGTYPE_p_rp__Serie2d swig_types[40]
#define SWIGTYPE_p_shared_ptrT_Serie_t swig_types[41]
#define SWIGTYPE_p_sim__Simulator swig_types[42]
#define SWIGTYPE_p_size_t swig_types[43]
#define SWIGTYPE_p_size_type swig_types[44]
#define SWIGTYPE_p_std__functionT_std__shared_ptrT_Serie_t_fstd__shared_ptrT_Serie_t_const_RF_t swig_types[45]
#define SWIGTYPE_p_std__functionT_std__shared_ptrT_Serie_t_fstd__shared_ptrT_Serie_t_const_R_std__shared_ptrT_Serie_t_const_RF_t swig_types[46]
#define SWIGTYPE_p_std__initializer_listT_double_t swig_types[47]
#define SWIGTYPE_p_std__shared_ptrT_Serie_t swig_types[48]
#define SWIGTYPE_p_std__unordered_mapT_std__shared_ptrT_Serie_t_std__shared_ptrT_Serie_t_t swig_types[49]
#define SWIGTYPE_p_std__unordered_mapT_std__string_double_t swig_types[50]
#define SWIGTYPE_p_std__unordered_mapT_std__string_std__shared_ptrT_Serie_t_t swig_types[51]
#define SWIGTYPE_p_std__unordered_mapT_std__tupleT_long_long_t_std__tupleT_pf__Transaction_pf__TxTo_t_pf__tuple_hash_t swig_types[52]
#define SWIGTYPE_p_std__unordered_setT_std__shared_ptrT_Serie_t_t swig_types[53]
#define SWIGTYPE_p_std__vectorT_NoneType_t swig_types[54]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[55]
#define SWIGTYPE_p_std__vectorT_long_t swig_types[56]
#define SWIGTYPE_p_std__vectorT_pf__Transaction_t swig_types[57]
#define SWIGTYPE_p_std__vectorT_pf__TxFrom_t swig_types[58]
#define SWIGTYPE_p_std__vectorT_pf__TxTo_t swig_types[59]
#define SWIGTYPE_p_std__vectorT_pf__amount_info_t swig_types[60]
#define SWIGTYPE_p_std__vectorT_qs__DiscountFactor_t swig_types[61]
#define SWIGTYPE_p_std__vectorT_qs__ForwardPeriod_t swig_types[62]
#define SWIGTYPE_p_std__vectorT_qs__InterestRate_t swig_types[63]
#define SWIGTYPE_p_std__vectorT_qs__Leg_t swig_types[64]
#define SWIGTYPE_p_std__vectorT_qs__Maturity_t swig_types[65]
#define SWIGTYPE_p_std__vectorT_qs__ZeroPeriod_t swig_types[66]
#define SWIGTYPE_p_std__vectorT_shared_ptrT_Serie_t_t swig_types[67]
#define SWIGTYPE_p_std__vectorT_std__reference_wrapperT_qs__CashFlow_const_t_t swig_types[68]
#define SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t swig_types[69]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[70]
#define SWIGTYPE_p_std__vectorT_std__tupleT_pf__Transaction_pf__TxTo_size_t_t_t swig_types[71]
#define SWIGTYPE_p_std__vectorT_std__unordered_mapT_std__shared_ptrT_Serie_t_std__shared_ptrT_Serie_t_t_t swig_types[72]
#define SWIGTYPE_p_std__vectorT_std__unordered_mapT_std__string_std__shared_ptrT_Serie_t_t_t swig_types[73]
#define SWIGTYPE_p_std__vectorT_std__unordered_setT_std__shared_ptrT_Serie_t_t_t swig_types[74]
#define SWIGTYPE_p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t swig_types[75]
#define SWIGTYPE_p_std__vectorT_unordered_mapT_std__string_Serie_t_t swig_types[76]
#define SWIGTYPE_p_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t swig_types[77]
#define SWIGTYPE_p_unordered_mapT_std__string_Serie_t swig_types[78]
#define SWIGTYPE_p_value_type swig_types[79]
static swig_type_info *swig_types[81];
static swig_module_info swig_module = {swig_types, 80, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#define SWIGVERSION 0x040002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <assert.h>




#include "serie.h"
#include "serie2d.h"
#include "calculation.h"
#include "div.h"
#include "mul.h"
#include "sub.h"
#include "sum.h"
#include "exp.h"
#include "log.h"
#include "pow.h"
#include "sqrt.h"
#include "erf.h"
#include "neg.h"
#include "abs.h"
#include "operators/less.h"
#include "operators/isfinite.h"
#include "pdf.h"
#include "cdf.h"
#include "ppf.h"
#include "max0.h"
#include "rsi.h"
#include "clean.h"
#include "rand_normal.h"
#include "formulas/greeks.h"
// finance library
#include "npv.h"
// portfolio library
#include "portfolio.h"
// simulator library
#include "simulator.h"


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


SWIGINTERN
int SWIG_AsVal_double (v8::Handle<v8::Value> obj, double *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = SWIGV8_NUMBER_VALUE(obj);

  return SWIG_OK;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_long (v8::Handle<v8::Value> obj, unsigned long *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }

  long longVal = (long) SWIGV8_NUMBER_VALUE(obj);

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
int SWIG_AsVal_unsigned_SS_long_SS_long (v8::Handle<v8::Value> obj, unsigned long long *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }

  long long longVal = (long long) SWIGV8_NUMBER_VALUE(obj);

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (v8::Handle<v8::Value> obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_long  (long value)
{
  return SWIGV8_NUMBER_NEW(value);
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    SWIGV8_INTEGER_NEW_UNS(value) : SWIGV8_INTEGER_NEW(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_long_SS_long  (long long value)
{
  return SWIGV8_NUMBER_NEW(value);
}
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    SWIGV8_INTEGER_NEW_UNS(value) : SWIGV8_INTEGER_NEW(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}


SWIGINTERNINLINE
v8::Handle<v8::Value>
SWIG_From_bool  (bool value)
{
  return SWIGV8_BOOLEAN_NEW(value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(v8::Handle<v8::Value> valRef, char** cptr, size_t* psize, int *alloc)
{
  if(valRef->IsString()) {
    v8::Handle<v8::String> js_str = SWIGV8_TO_STRING(valRef);

    size_t len = SWIGV8_UTF8_LENGTH(js_str) + 1;
    char* cstr = new char[len];
    SWIGV8_WRITE_UTF8(js_str, cstr, len);
    
    if(alloc) *alloc = SWIG_NEWOBJ;
    if(psize) *psize = len;
    if(cptr) *cptr = cstr;
    
    return SWIG_OK;
  } else {
    if(valRef->IsObject()) {
      v8::Handle<v8::Object> obj = SWIGV8_TO_OBJECT(valRef);
      // try if the object is a wrapped char[]
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      if (pchar_descriptor) {
        void* vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr) *cptr = (char *) vptr;
          if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc) *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
      return SWIG_TypeError;
    } else {
      return SWIG_TypeError;
    }
  }
}


SWIGINTERN int
SWIG_AsPtr_std_string (v8::Handle<v8::Value> obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN
int SWIG_AsVal_int (v8::Handle<v8::Value> valRef, int* val)
{
  if (!valRef->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = SWIGV8_INTEGER_VALUE(valRef);

  return SWIG_OK;
}

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }

SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      // TODO: handle extra long strings
      return SWIGV8_UNDEFINED();
    } else {
      v8::Handle<v8::String> js_str = SWIGV8_STRING_NEW2(carray, size);
      return js_str;
    }
  } else {
    return SWIGV8_UNDEFINED();
  }
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}

SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< NoneType >::const_reference std_vector_Sl_NoneType_Sg__get(std::vector< NoneType > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_NoneType_Sg__set(std::vector< NoneType > *self,int i,std::vector< NoneType >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }

SWIGINTERN
v8::Handle<v8::Value> SWIG_From_double   (double val)
{
  return SWIGV8_NUMBER_NEW(val);
}

SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

SWIGINTERN
int SWIG_AsVal_long (v8::Handle<v8::Value> obj, long* val)
{
  if (!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = (long) SWIGV8_INTEGER_VALUE(obj);

  return SWIG_OK;
}

SWIGINTERN std::vector< long >::const_reference std_vector_Sl_long_Sg__get(std::vector< long > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_long_Sg__set(std::vector< long > *self,int i,std::vector< long >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< shared_ptr< Serie > >::const_reference std_vector_Sl_shared_ptr_Sl_Serie_Sg__Sg__get(std::vector< shared_ptr< Serie > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_shared_ptr_Sl_Serie_Sg__Sg__set(std::vector< shared_ptr< Serie > > *self,int i,std::vector< shared_ptr< Serie > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >::const_reference std_vector_Sl_unordered_map_Sl_shared_ptr_Sl_Serie_Sg__Sc_shared_ptr_Sl_Serie_Sg__Sg__Sg__get(std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_unordered_map_Sl_shared_ptr_Sl_Serie_Sg__Sc_shared_ptr_Sl_Serie_Sg__Sg__Sg__set(std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *self,int i,std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< unordered_map< std::string,Serie > >::const_reference std_vector_Sl_unordered_map_Sl_std_string_Sc_Serie_Sg__Sg__get(std::vector< unordered_map< std::string,Serie > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_unordered_map_Sl_std_string_Sc_Serie_Sg__Sg__set(std::vector< unordered_map< std::string,Serie > > *self,int i,std::vector< unordered_map< std::string,Serie > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_int  (int value)
{
  return SWIGV8_INT32_NEW(value);
}


SWIGINTERN
int SWIG_AsVal_bool (v8::Handle<v8::Value> obj, bool *val)
{
  if(!obj->IsBoolean()) {
    return SWIG_ERROR;
  }

  if (val) *val = SWIGV8_BOOLEAN_VALUE(obj);
  return SWIG_OK;
}


SWIGINTERNINLINE v8::Handle<v8::Value> 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
int SWIG_AsVal_long_SS_long (v8::Handle<v8::Value> obj, long long* val)
{
  if (!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = (long long) SWIGV8_INTEGER_VALUE(obj);

  return SWIG_OK;
}
#endif


#define SWIGV8_INIT red_pandas_initialize


SWIGV8_ClientData _exports_vectors_clientData;
SWIGV8_ClientData _exports_vectorn_clientData;
SWIGV8_ClientData _exports_vectord_clientData;
SWIGV8_ClientData _exports_vectorl_clientData;
SWIGV8_ClientData _exports_vectorser_clientData;
SWIGV8_ClientData _exports_vectorm_clientData;
SWIGV8_ClientData _exports_vector_results_clientData;
SWIGV8_ClientData _exports_NoneType_clientData;
SWIGV8_ClientData _exports_Serie_clientData;
SWIGV8_ClientData _exports_Serie2d_clientData;
SWIGV8_ClientData _exports_Maturity_clientData;
SWIGV8_ClientData _exports_ForwardPeriod_clientData;
SWIGV8_ClientData _exports_ZeroPeriod_clientData;
SWIGV8_ClientData _exports_Calendar_clientData;
SWIGV8_ClientData _exports_Schedule_clientData;
SWIGV8_ClientData _exports_DiscountFactor_clientData;
SWIGV8_ClientData _exports_InterestRate_clientData;
SWIGV8_ClientData _exports_LegGenerator_clientData;
SWIGV8_ClientData _exports_ProductGenerator_clientData;
SWIGV8_ClientData _exports_Leg_clientData;
SWIGV8_ClientData _exports_Product_clientData;
SWIGV8_ClientData _exports_TermStructure_clientData;
SWIGV8_ClientData _exports_CashFlow_clientData;
SWIGV8_ClientData _exports_CouponCashFlow_clientData;
SWIGV8_ClientData _exports_StartCashFlow_clientData;
SWIGV8_ClientData _exports_EndCashFlow_clientData;
SWIGV8_ClientData _exports_CustomCashFlow_clientData;
SWIGV8_ClientData _exports_TxFrom_clientData;
SWIGV8_ClientData _exports_TxTo_clientData;
SWIGV8_ClientData _exports_amount_info_clientData;
SWIGV8_ClientData _exports_Transaction_clientData;
SWIGV8_ClientData _exports_tuple_hash_clientData;
SWIGV8_ClientData _exports_BlockChain_clientData;
SWIGV8_ClientData _exports_Deal_clientData;
SWIGV8_ClientData _exports_OpenDeal_clientData;
SWIGV8_ClientData _exports_ClosedDeal_clientData;
SWIGV8_ClientData _exports_SymbolInfoTick_clientData;
SWIGV8_ClientData _exports_FakeTrader_clientData;
SWIGV8_ClientData _exports_Simulator_clientData;


static SwigV8ReturnValue _wrap_new_vectors__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< std::string > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectors__SWIG_0.");
  result = (std::vector< std::string > *)new std::vector< std::string >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectors__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< std::string >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::string > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectors__SWIG_1.");
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectors" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectors__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< std::string > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::vector< std::string > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectors__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__string_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectors" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectors" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectors(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectors__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectors__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectors__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectors__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectors__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectors__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_vectors");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectors_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectors_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectors_size" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->size();
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectors_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectors_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectors_capacity" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectors_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectors_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectors_reserve" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectors_reserve" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectors_isEmpty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectors_isEmpty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectors_isEmpty" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectors_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectors_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectors_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectors_add(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectors_add.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectors_add" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectors_add" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectors_add" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectors_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectors_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectors_get" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectors_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  jsresult = SWIG_From_std_string(static_cast< std::string >(*result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectors_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectors_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectors_set" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectors_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectors_set" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectors_set" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_vectors(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_vectors(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_vectors(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_vectors(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_vectors(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            std::vector< std::string > * arg1 = (std::vector< std::string > *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_vectorn__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< NoneType > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectorn__SWIG_0.");
  result = (std::vector< NoneType > *)new std::vector< NoneType >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_NoneType_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectorn__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< NoneType >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< NoneType > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectorn__SWIG_1.");
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorn" "', argument " "1"" of type '" "std::vector< NoneType >::size_type""'");
  } 
  arg1 = static_cast< std::vector< NoneType >::size_type >(val1);
  result = (std::vector< NoneType > *)new std::vector< NoneType >(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_NoneType_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectorn__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< NoneType > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::vector< NoneType > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectorn__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_NoneType_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorn" "', argument " "1"" of type '" "std::vector< NoneType > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorn" "', argument " "1"" of type '" "std::vector< NoneType > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< NoneType > * >(argp1);
  result = (std::vector< NoneType > *)new std::vector< NoneType >((std::vector< NoneType > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_NoneType_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectorn(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectorn__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectorn__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectorn__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectorn__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectorn__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectorn__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_vectorn");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorn_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< NoneType > *arg1 = (std::vector< NoneType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< NoneType >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorn_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_NoneType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorn_size" "', argument " "1"" of type '" "std::vector< NoneType > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< NoneType > * >(argp1);
  result = ((std::vector< NoneType > const *)arg1)->size();
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorn_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< NoneType > *arg1 = (std::vector< NoneType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< NoneType >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorn_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_NoneType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorn_capacity" "', argument " "1"" of type '" "std::vector< NoneType > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< NoneType > * >(argp1);
  result = ((std::vector< NoneType > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorn_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< NoneType > *arg1 = (std::vector< NoneType > *) 0 ;
  std::vector< NoneType >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorn_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_NoneType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorn_reserve" "', argument " "1"" of type '" "std::vector< NoneType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< NoneType > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorn_reserve" "', argument " "2"" of type '" "std::vector< NoneType >::size_type""'");
  } 
  arg2 = static_cast< std::vector< NoneType >::size_type >(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorn_isEmpty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< NoneType > *arg1 = (std::vector< NoneType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorn_isEmpty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_NoneType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorn_isEmpty" "', argument " "1"" of type '" "std::vector< NoneType > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< NoneType > * >(argp1);
  result = (bool)((std::vector< NoneType > const *)arg1)->empty();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorn_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< NoneType > *arg1 = (std::vector< NoneType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorn_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_NoneType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorn_clear" "', argument " "1"" of type '" "std::vector< NoneType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< NoneType > * >(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorn_add(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< NoneType > *arg1 = (std::vector< NoneType > *) 0 ;
  std::vector< NoneType >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorn_add.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_NoneType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorn_add" "', argument " "1"" of type '" "std::vector< NoneType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< NoneType > * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_NoneType,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorn_add" "', argument " "2"" of type '" "std::vector< NoneType >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorn_add" "', argument " "2"" of type '" "std::vector< NoneType >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< NoneType >::value_type * >(argp2);
  (arg1)->push_back((std::vector< NoneType >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorn_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< NoneType > *arg1 = (std::vector< NoneType > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< NoneType >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorn_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_NoneType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorn_get" "', argument " "1"" of type '" "std::vector< NoneType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< NoneType > * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorn_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (std::vector< NoneType >::value_type *) &std_vector_Sl_NoneType_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NoneType, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorn_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< NoneType > *arg1 = (std::vector< NoneType > *) 0 ;
  int arg2 ;
  std::vector< NoneType >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorn_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_NoneType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorn_set" "', argument " "1"" of type '" "std::vector< NoneType > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< NoneType > * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorn_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_NoneType,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorn_set" "', argument " "3"" of type '" "std::vector< NoneType >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorn_set" "', argument " "3"" of type '" "std::vector< NoneType >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< NoneType >::value_type * >(argp3);
  try {
    std_vector_Sl_NoneType_Sg__set(arg1,arg2,(NoneType const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_vectorn(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_vectorn(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_vectorn(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_vectorn(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_vectorn(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            std::vector< NoneType > * arg1 = (std::vector< NoneType > *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_vectord__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< double > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectord__SWIG_0.");
  result = (std::vector< double > *)new std::vector< double >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectord__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectord__SWIG_1.");
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectord" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectord__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< double > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::vector< double > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectord__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectord" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectord" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectord(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectord__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectord__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectord__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectord__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectord__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectord__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_vectord");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectord_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectord_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->size();
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectord_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectord_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectord_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectord_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectord_isEmpty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectord_isEmpty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_isEmpty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)((std::vector< double > const *)arg1)->empty();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectord_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectord_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectord_add(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectord_add.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_add" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_add" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectord_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectord_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_get" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  jsresult = SWIG_From_double(static_cast< double >(*result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectord_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectord_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_set" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord_set" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_vectord(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_vectord(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_vectord(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_vectord(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_vectord(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            std::vector< double > * arg1 = (std::vector< double > *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_vectorl__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< long > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectorl__SWIG_0.");
  result = (std::vector< long > *)new std::vector< long >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_long_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectorl__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< long >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< long > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectorl__SWIG_1.");
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorl" "', argument " "1"" of type '" "std::vector< long >::size_type""'");
  } 
  arg1 = static_cast< std::vector< long >::size_type >(val1);
  result = (std::vector< long > *)new std::vector< long >(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_long_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectorl__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< long > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::vector< long > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectorl__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_long_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorl" "', argument " "1"" of type '" "std::vector< long > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorl" "', argument " "1"" of type '" "std::vector< long > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = (std::vector< long > *)new std::vector< long >((std::vector< long > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_long_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectorl(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectorl__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectorl__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectorl__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectorl__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectorl__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectorl__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_vectorl");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorl_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< long >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorl_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorl_size" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = ((std::vector< long > const *)arg1)->size();
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorl_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< long >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorl_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorl_capacity" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = ((std::vector< long > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorl_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorl_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorl_reserve" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorl_reserve" "', argument " "2"" of type '" "std::vector< long >::size_type""'");
  } 
  arg2 = static_cast< std::vector< long >::size_type >(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorl_isEmpty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorl_isEmpty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorl_isEmpty" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = (bool)((std::vector< long > const *)arg1)->empty();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorl_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorl_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorl_clear" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorl_add(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< long >::value_type temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorl_add.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorl_add" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorl_add" "', argument " "2"" of type '" "std::vector< long >::value_type""'");
  } 
  temp2 = static_cast< std::vector< long >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< long >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorl_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< long >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorl_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorl_get" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorl_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (std::vector< long >::value_type *) &std_vector_Sl_long_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  jsresult = SWIG_From_long(static_cast< long >(*result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorl_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  int arg2 ;
  std::vector< long >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< long >::value_type temp3 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorl_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorl_set" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorl_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorl_set" "', argument " "3"" of type '" "std::vector< long >::value_type""'");
  } 
  temp3 = static_cast< std::vector< long >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_long_Sg__set(arg1,arg2,(long const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_vectorl(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_vectorl(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_vectorl(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_vectorl(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_vectorl(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            std::vector< long > * arg1 = (std::vector< long > *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_vectorser__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< shared_ptr< Serie > > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectorser__SWIG_0.");
  result = (std::vector< shared_ptr< Serie > > *)new std::vector< shared_ptr< Serie > >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_shared_ptrT_Serie_t_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectorser__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< shared_ptr< Serie > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< shared_ptr< Serie > > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectorser__SWIG_1.");
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorser" "', argument " "1"" of type '" "std::vector< shared_ptr< Serie > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< shared_ptr< Serie > >::size_type >(val1);
  result = (std::vector< shared_ptr< Serie > > *)new std::vector< shared_ptr< Serie > >(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_shared_ptrT_Serie_t_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectorser__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< shared_ptr< Serie > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::vector< shared_ptr< Serie > > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectorser__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorser" "', argument " "1"" of type '" "std::vector< shared_ptr< Serie > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorser" "', argument " "1"" of type '" "std::vector< shared_ptr< Serie > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< shared_ptr< Serie > > * >(argp1);
  result = (std::vector< shared_ptr< Serie > > *)new std::vector< shared_ptr< Serie > >((std::vector< shared_ptr< Serie > > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_shared_ptrT_Serie_t_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectorser(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectorser__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectorser__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectorser__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectorser__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectorser__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectorser__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_vectorser");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorser_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< shared_ptr< Serie > > *arg1 = (std::vector< shared_ptr< Serie > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< shared_ptr< Serie > >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorser_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_shared_ptrT_Serie_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorser_size" "', argument " "1"" of type '" "std::vector< shared_ptr< Serie > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< shared_ptr< Serie > > * >(argp1);
  result = ((std::vector< shared_ptr< Serie > > const *)arg1)->size();
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorser_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< shared_ptr< Serie > > *arg1 = (std::vector< shared_ptr< Serie > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< shared_ptr< Serie > >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorser_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_shared_ptrT_Serie_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorser_capacity" "', argument " "1"" of type '" "std::vector< shared_ptr< Serie > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< shared_ptr< Serie > > * >(argp1);
  result = ((std::vector< shared_ptr< Serie > > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorser_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< shared_ptr< Serie > > *arg1 = (std::vector< shared_ptr< Serie > > *) 0 ;
  std::vector< shared_ptr< Serie > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorser_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_shared_ptrT_Serie_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorser_reserve" "', argument " "1"" of type '" "std::vector< shared_ptr< Serie > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< shared_ptr< Serie > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorser_reserve" "', argument " "2"" of type '" "std::vector< shared_ptr< Serie > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< shared_ptr< Serie > >::size_type >(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorser_isEmpty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< shared_ptr< Serie > > *arg1 = (std::vector< shared_ptr< Serie > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorser_isEmpty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_shared_ptrT_Serie_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorser_isEmpty" "', argument " "1"" of type '" "std::vector< shared_ptr< Serie > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< shared_ptr< Serie > > * >(argp1);
  result = (bool)((std::vector< shared_ptr< Serie > > const *)arg1)->empty();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorser_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< shared_ptr< Serie > > *arg1 = (std::vector< shared_ptr< Serie > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorser_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_shared_ptrT_Serie_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorser_clear" "', argument " "1"" of type '" "std::vector< shared_ptr< Serie > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< shared_ptr< Serie > > * >(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorser_add(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< shared_ptr< Serie > > *arg1 = (std::vector< shared_ptr< Serie > > *) 0 ;
  std::vector< shared_ptr< Serie > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorser_add.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_shared_ptrT_Serie_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorser_add" "', argument " "1"" of type '" "std::vector< shared_ptr< Serie > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< shared_ptr< Serie > > * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorser_add" "', argument " "2"" of type '" "std::vector< shared_ptr< Serie > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorser_add" "', argument " "2"" of type '" "std::vector< shared_ptr< Serie > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< shared_ptr< Serie > >::value_type * >(argp2);
  (arg1)->push_back((std::vector< shared_ptr< Serie > >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorser_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< shared_ptr< Serie > > *arg1 = (std::vector< shared_ptr< Serie > > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< shared_ptr< Serie > >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorser_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_shared_ptrT_Serie_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorser_get" "', argument " "1"" of type '" "std::vector< shared_ptr< Serie > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< shared_ptr< Serie > > * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorser_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (std::vector< shared_ptr< Serie > >::value_type *) &std_vector_Sl_shared_ptr_Sl_Serie_Sg__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_shared_ptrT_Serie_t, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorser_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< shared_ptr< Serie > > *arg1 = (std::vector< shared_ptr< Serie > > *) 0 ;
  int arg2 ;
  std::vector< shared_ptr< Serie > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorser_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_shared_ptrT_Serie_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorser_set" "', argument " "1"" of type '" "std::vector< shared_ptr< Serie > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< shared_ptr< Serie > > * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorser_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorser_set" "', argument " "3"" of type '" "std::vector< shared_ptr< Serie > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorser_set" "', argument " "3"" of type '" "std::vector< shared_ptr< Serie > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< shared_ptr< Serie > >::value_type * >(argp3);
  try {
    std_vector_Sl_shared_ptr_Sl_Serie_Sg__Sg__set(arg1,arg2,(shared_ptr< Serie > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_vectorser(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_vectorser(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_vectorser(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_vectorser(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_vectorser(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            std::vector< shared_ptr< Serie > > * arg1 = (std::vector< shared_ptr< Serie > > *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_vectorm__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectorm__SWIG_0.");
  result = (std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *)new std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectorm__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectorm__SWIG_1.");
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorm" "', argument " "1"" of type '" "std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >::size_type >(val1);
  result = (std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *)new std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectorm__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectorm__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorm" "', argument " "1"" of type '" "std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorm" "', argument " "1"" of type '" "std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > * >(argp1);
  result = (std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *)new std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >((std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectorm(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectorm__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectorm__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectorm__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectorm__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectorm__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectorm__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_vectorm");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorm_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *arg1 = (std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorm_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_size" "', argument " "1"" of type '" "std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > * >(argp1);
  result = ((std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > const *)arg1)->size();
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorm_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *arg1 = (std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorm_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_capacity" "', argument " "1"" of type '" "std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > * >(argp1);
  result = ((std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorm_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *arg1 = (std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *) 0 ;
  std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorm_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_reserve" "', argument " "1"" of type '" "std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorm_reserve" "', argument " "2"" of type '" "std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >::size_type >(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorm_isEmpty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *arg1 = (std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorm_isEmpty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_isEmpty" "', argument " "1"" of type '" "std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > * >(argp1);
  result = (bool)((std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > const *)arg1)->empty();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorm_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *arg1 = (std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorm_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_clear" "', argument " "1"" of type '" "std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > * >(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorm_add(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *arg1 = (std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *) 0 ;
  std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorm_add.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_add" "', argument " "1"" of type '" "std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorm_add" "', argument " "2"" of type '" "std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorm_add" "', argument " "2"" of type '" "std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >::value_type * >(argp2);
  (arg1)->push_back((std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorm_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *arg1 = (std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorm_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_get" "', argument " "1"" of type '" "std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorm_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >::value_type *) &std_vector_Sl_unordered_map_Sl_shared_ptr_Sl_Serie_Sg__Sc_shared_ptr_Sl_Serie_Sg__Sg__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorm_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *arg1 = (std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *) 0 ;
  int arg2 ;
  std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorm_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorm_set" "', argument " "1"" of type '" "std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorm_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorm_set" "', argument " "3"" of type '" "std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorm_set" "', argument " "3"" of type '" "std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >::value_type * >(argp3);
  try {
    std_vector_Sl_unordered_map_Sl_shared_ptr_Sl_Serie_Sg__Sc_shared_ptr_Sl_Serie_Sg__Sg__Sg__set(arg1,arg2,(unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_vectorm(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_vectorm(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_vectorm(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_vectorm(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_vectorm(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > * arg1 = (std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_vector_results__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< unordered_map< std::string,Serie > > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vector_results__SWIG_0.");
  result = (std::vector< unordered_map< std::string,Serie > > *)new std::vector< unordered_map< std::string,Serie > >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_unordered_mapT_std__string_Serie_t_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vector_results__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< unordered_map< std::string,Serie > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< unordered_map< std::string,Serie > > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vector_results__SWIG_1.");
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_results" "', argument " "1"" of type '" "std::vector< unordered_map< std::string,Serie > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< unordered_map< std::string,Serie > >::size_type >(val1);
  result = (std::vector< unordered_map< std::string,Serie > > *)new std::vector< unordered_map< std::string,Serie > >(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_unordered_mapT_std__string_Serie_t_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vector_results__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< unordered_map< std::string,Serie > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::vector< unordered_map< std::string,Serie > > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vector_results__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_unordered_mapT_std__string_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_results" "', argument " "1"" of type '" "std::vector< unordered_map< std::string,Serie > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_results" "', argument " "1"" of type '" "std::vector< unordered_map< std::string,Serie > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unordered_map< std::string,Serie > > * >(argp1);
  result = (std::vector< unordered_map< std::string,Serie > > *)new std::vector< unordered_map< std::string,Serie > >((std::vector< unordered_map< std::string,Serie > > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_unordered_mapT_std__string_Serie_t_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vector_results(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vector_results__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vector_results__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vector_results__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vector_results__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vector_results__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vector_results__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_vector_results");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vector_results_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< unordered_map< std::string,Serie > > *arg1 = (std::vector< unordered_map< std::string,Serie > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< unordered_map< std::string,Serie > >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vector_results_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_unordered_mapT_std__string_Serie_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_results_size" "', argument " "1"" of type '" "std::vector< unordered_map< std::string,Serie > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unordered_map< std::string,Serie > > * >(argp1);
  result = ((std::vector< unordered_map< std::string,Serie > > const *)arg1)->size();
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vector_results_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< unordered_map< std::string,Serie > > *arg1 = (std::vector< unordered_map< std::string,Serie > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< unordered_map< std::string,Serie > >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vector_results_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_unordered_mapT_std__string_Serie_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_results_capacity" "', argument " "1"" of type '" "std::vector< unordered_map< std::string,Serie > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unordered_map< std::string,Serie > > * >(argp1);
  result = ((std::vector< unordered_map< std::string,Serie > > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vector_results_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< unordered_map< std::string,Serie > > *arg1 = (std::vector< unordered_map< std::string,Serie > > *) 0 ;
  std::vector< unordered_map< std::string,Serie > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vector_results_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_unordered_mapT_std__string_Serie_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_results_reserve" "', argument " "1"" of type '" "std::vector< unordered_map< std::string,Serie > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unordered_map< std::string,Serie > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_results_reserve" "', argument " "2"" of type '" "std::vector< unordered_map< std::string,Serie > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unordered_map< std::string,Serie > >::size_type >(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vector_results_isEmpty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< unordered_map< std::string,Serie > > *arg1 = (std::vector< unordered_map< std::string,Serie > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vector_results_isEmpty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_unordered_mapT_std__string_Serie_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_results_isEmpty" "', argument " "1"" of type '" "std::vector< unordered_map< std::string,Serie > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unordered_map< std::string,Serie > > * >(argp1);
  result = (bool)((std::vector< unordered_map< std::string,Serie > > const *)arg1)->empty();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vector_results_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< unordered_map< std::string,Serie > > *arg1 = (std::vector< unordered_map< std::string,Serie > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vector_results_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_unordered_mapT_std__string_Serie_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_results_clear" "', argument " "1"" of type '" "std::vector< unordered_map< std::string,Serie > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unordered_map< std::string,Serie > > * >(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vector_results_add(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< unordered_map< std::string,Serie > > *arg1 = (std::vector< unordered_map< std::string,Serie > > *) 0 ;
  std::vector< unordered_map< std::string,Serie > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vector_results_add.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_unordered_mapT_std__string_Serie_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_results_add" "', argument " "1"" of type '" "std::vector< unordered_map< std::string,Serie > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unordered_map< std::string,Serie > > * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_unordered_mapT_std__string_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_results_add" "', argument " "2"" of type '" "std::vector< unordered_map< std::string,Serie > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_results_add" "', argument " "2"" of type '" "std::vector< unordered_map< std::string,Serie > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< unordered_map< std::string,Serie > >::value_type * >(argp2);
  (arg1)->push_back((std::vector< unordered_map< std::string,Serie > >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vector_results_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< unordered_map< std::string,Serie > > *arg1 = (std::vector< unordered_map< std::string,Serie > > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< unordered_map< std::string,Serie > >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vector_results_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_unordered_mapT_std__string_Serie_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_results_get" "', argument " "1"" of type '" "std::vector< unordered_map< std::string,Serie > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unordered_map< std::string,Serie > > * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_results_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (std::vector< unordered_map< std::string,Serie > >::value_type *) &std_vector_Sl_unordered_map_Sl_std_string_Sc_Serie_Sg__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unordered_mapT_std__string_Serie_t, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vector_results_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< unordered_map< std::string,Serie > > *arg1 = (std::vector< unordered_map< std::string,Serie > > *) 0 ;
  int arg2 ;
  std::vector< unordered_map< std::string,Serie > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vector_results_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_unordered_mapT_std__string_Serie_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_results_set" "', argument " "1"" of type '" "std::vector< unordered_map< std::string,Serie > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unordered_map< std::string,Serie > > * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_results_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_unordered_mapT_std__string_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_results_set" "', argument " "3"" of type '" "std::vector< unordered_map< std::string,Serie > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_results_set" "', argument " "3"" of type '" "std::vector< unordered_map< std::string,Serie > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< unordered_map< std::string,Serie > >::value_type * >(argp3);
  try {
    std_vector_Sl_unordered_map_Sl_std_string_Sc_Serie_Sg__Sg__set(arg1,arg2,(unordered_map< std::string,Serie > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_vector_results(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_vector_results(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_vector_results(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_vector_results(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_vector_results(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            std::vector< unordered_map< std::string,Serie > > * arg1 = (std::vector< unordered_map< std::string,Serie > > *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_unknown_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_unknown_type(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(unknown_type));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_basic_none_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_basic_none_type(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(basic_none_type));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_string_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_string_type(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(string_type));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_basic_numpy_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_basic_numpy_type(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(basic_numpy_type));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_map_string_serie_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_map_string_serie_type(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(map_string_serie_type));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_map_serie_serie_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_map_serie_serie_type(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(map_serie_serie_type));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_set_serie_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_set_serie_type(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(set_serie_type));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_vector_none_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_vector_none_type(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(vector_none_type));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_vector_string_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_vector_string_type(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(vector_string_type));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_vector_map_string_serie_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_vector_map_string_serie_type(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(vector_map_string_serie_type));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_vector_map_serie_serie_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_vector_map_serie_serie_type(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(vector_map_serie_serie_type));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_vector_set_serie_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_vector_set_serie_type(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(vector_set_serie_type));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_vector_serie_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_vector_serie_type(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(vector_serie_type));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_calculation_type(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_calculation_type(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(calculation_type));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_total_types(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_total_types(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(total_types));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_new_NoneType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  NoneType *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_NoneType.");
  result = (NoneType *)new NoneType();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_NoneType, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_NoneType(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_NoneType(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_NoneType(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_NoneType(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_NoneType(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            NoneType * arg1 = (NoneType *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_Serie__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Serie *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_0.");
  result = (Serie *)new Serie();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Serie(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Serie(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Serie(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_Serie(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_Serie(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            Serie * arg1 = (Serie *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_Serie__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Serie *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Serie" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = (Serie *)new Serie((Serie const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Serie *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Serie *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie" "', argument " "1"" of type '" "Serie &&""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Serie" "', argument " "1"" of type '" "Serie &&""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = (Serie *)new Serie((Serie &&)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  NoneType *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_3.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_NoneType,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie" "', argument " "1"" of type '" "NoneType const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Serie" "', argument " "1"" of type '" "NoneType const &""'"); 
  }
  arg1 = reinterpret_cast< NoneType * >(argp1);
  result = (Serie *)new Serie((NoneType const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  Serie *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_4.");
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Serie" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (Serie *)new Serie(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie__SWIG_5(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  Serie *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_5.");
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Serie" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (Serie *)new Serie((std::string const &)*arg1);
  
  if (SWIG_IsNewObj(res1)) delete arg1;
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie__SWIG_6(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  double *arg1 = (double *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Serie *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_6.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Serie" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Serie *)new Serie((double const *)arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie__SWIG_7(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  double *arg1 = (double *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Serie *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_7.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie" "', argument " "1"" of type '" "double *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Serie" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Serie *)new Serie(arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie__SWIG_8(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  double *arg1 = (double *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  Serie *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_8.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie" "', argument " "1"" of type '" "double *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Serie" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Serie" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (Serie *)new Serie(arg1,arg2,arg3);
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie__SWIG_9(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Serie::Buffer *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_9.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_nc__NdArrayT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie" "', argument " "1"" of type '" "Serie::Buffer const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Serie" "', argument " "1"" of type '" "Serie::Buffer const &""'"); 
  }
  arg1 = reinterpret_cast< Serie::Buffer * >(argp1);
  result = (Serie *)new Serie((Serie::Buffer const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie__SWIG_10(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::initializer_list< double > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_10.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__initializer_listT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie" "', argument " "1"" of type '" "std::initializer_list< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Serie" "', argument " "1"" of type '" "std::initializer_list< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::initializer_list< double > * >(argp1);
  result = (Serie *)new Serie((std::initializer_list< double > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie__SWIG_11(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::unordered_map< std::string,std::shared_ptr< Serie > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_11.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__unordered_mapT_std__string_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie" "', argument " "1"" of type '" "std::unordered_map< std::string,std::shared_ptr< Serie > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Serie" "', argument " "1"" of type '" "std::unordered_map< std::string,std::shared_ptr< Serie > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::unordered_map< std::string,std::shared_ptr< Serie > > * >(argp1);
  result = (Serie *)new Serie((std::unordered_map< std::string,std::shared_ptr< Serie > > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie__SWIG_12(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::unordered_map< std::shared_ptr< Serie >,std::shared_ptr< Serie > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_12.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__unordered_mapT_std__shared_ptrT_Serie_t_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie" "', argument " "1"" of type '" "std::unordered_map< std::shared_ptr< Serie >,std::shared_ptr< Serie > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Serie" "', argument " "1"" of type '" "std::unordered_map< std::shared_ptr< Serie >,std::shared_ptr< Serie > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::unordered_map< std::shared_ptr< Serie >,std::shared_ptr< Serie > > * >(argp1);
  result = (Serie *)new Serie((std::unordered_map< std::shared_ptr< Serie >,std::shared_ptr< Serie > > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie__SWIG_13(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::unordered_set< std::shared_ptr< Serie > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_13.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__unordered_setT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie" "', argument " "1"" of type '" "std::unordered_set< std::shared_ptr< Serie > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Serie" "', argument " "1"" of type '" "std::unordered_set< std::shared_ptr< Serie > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::unordered_set< std::shared_ptr< Serie > > * >(argp1);
  result = (Serie *)new Serie((std::unordered_set< std::shared_ptr< Serie > > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie__SWIG_14(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  rp::Calculation< Serie > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Serie *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_14.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_rp__CalculationT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie" "', argument " "1"" of type '" "rp::Calculation< Serie > &&""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Serie" "', argument " "1"" of type '" "rp::Calculation< Serie > &&""'"); 
  }
  arg1 = reinterpret_cast< rp::Calculation< Serie > * >(argp1);
  result = (Serie *)new Serie((rp::Calculation< Serie > &&)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie__SWIG_15(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< NoneType > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_15.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_NoneType_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie" "', argument " "1"" of type '" "std::vector< NoneType > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Serie" "', argument " "1"" of type '" "std::vector< NoneType > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< NoneType > * >(argp1);
  result = (Serie *)new Serie((std::vector< NoneType > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie__SWIG_16(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< double > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_16.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Serie" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (Serie *)new Serie((std::vector< double > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie__SWIG_17(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Serie *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_17.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie" "', argument " "1"" of type '" "std::vector< double > &&""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Serie" "', argument " "1"" of type '" "std::vector< double > &&""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (Serie *)new Serie((std::vector< double > &&)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie__SWIG_18(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< std::string > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_18.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__string_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Serie" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (Serie *)new Serie((std::vector< std::string > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie__SWIG_19(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< std::shared_ptr< Serie > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_19.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie" "', argument " "1"" of type '" "std::vector< std::shared_ptr< Serie > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Serie" "', argument " "1"" of type '" "std::vector< std::shared_ptr< Serie > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::shared_ptr< Serie > > * >(argp1);
  result = (Serie *)new Serie((std::vector< std::shared_ptr< Serie > > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie__SWIG_20(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< std::unordered_map< std::string,std::shared_ptr< Serie > > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_20.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__unordered_mapT_std__string_std__shared_ptrT_Serie_t_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie" "', argument " "1"" of type '" "std::vector< std::unordered_map< std::string,std::shared_ptr< Serie > > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Serie" "', argument " "1"" of type '" "std::vector< std::unordered_map< std::string,std::shared_ptr< Serie > > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::unordered_map< std::string,std::shared_ptr< Serie > > > * >(argp1);
  result = (Serie *)new Serie((std::vector< std::unordered_map< std::string,std::shared_ptr< Serie > > > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie__SWIG_21(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< std::unordered_map< std::shared_ptr< Serie >,std::shared_ptr< Serie > > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_21.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__unordered_mapT_std__shared_ptrT_Serie_t_std__shared_ptrT_Serie_t_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie" "', argument " "1"" of type '" "std::vector< std::unordered_map< std::shared_ptr< Serie >,std::shared_ptr< Serie > > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Serie" "', argument " "1"" of type '" "std::vector< std::unordered_map< std::shared_ptr< Serie >,std::shared_ptr< Serie > > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::unordered_map< std::shared_ptr< Serie >,std::shared_ptr< Serie > > > * >(argp1);
  result = (Serie *)new Serie((std::vector< std::unordered_map< std::shared_ptr< Serie >,std::shared_ptr< Serie > > > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie__SWIG_22(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< std::unordered_set< std::shared_ptr< Serie > > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie__SWIG_22.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__unordered_setT_std__shared_ptrT_Serie_t_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie" "', argument " "1"" of type '" "std::vector< std::unordered_set< std::shared_ptr< Serie > > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Serie" "', argument " "1"" of type '" "std::vector< std::unordered_set< std::shared_ptr< Serie > > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::unordered_set< std::shared_ptr< Serie > > > * >(argp1);
  result = (Serie *)new Serie((std::vector< std::unordered_set< std::shared_ptr< Serie > > > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Serie, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_8(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_8(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_9(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_9(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_10(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_10(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_11(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_11(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_12(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_12(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_13(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_13(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_14(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_14(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_15(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_15(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_16(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_16(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_17(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_17(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_18(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_18(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_19(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_19(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_20(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_20(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_21(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_21(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie__SWIG_22(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie__SWIG_22(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Serie");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie___str__(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Serie___str__.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie___str__" "', argument " "1"" of type '" "Serie const *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = (char *)((Serie const *)arg1)->__str__();
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_get_calc(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  rp::Calculation< Serie >::result_type *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Serie_get_calc.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_get_calc" "', argument " "1"" of type '" "Serie const *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = (rp::Calculation< Serie >::result_type *) &((Serie const *)arg1)->get_calc();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_rp__CalculationT_Serie_t__result_type, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_data(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Serie::Buffer *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Serie_data.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_data" "', argument " "1"" of type '" "Serie const *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = (Serie::Buffer *) &((Serie const *)arg1)->data();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nc__NdArrayT_double_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_raw_data__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_raw_data" "', argument " "1"" of type '" "Serie const *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = (double *)((Serie const *)arg1)->raw_data();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_raw_data__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_raw_data" "', argument " "1"" of type '" "Serie *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = (double *)(arg1)->raw_data();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie__wrap_Serie_raw_data(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Serie_raw_data__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Serie_raw_data__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Serie_raw_data__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Serie_raw_data__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function raw_data.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_sub__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_sub" "', argument " "1"" of type '" "Serie *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Serie_sub" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->sub(arg2);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_sub__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_sub" "', argument " "1"" of type '" "Serie *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Serie_sub" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Serie_sub" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->sub(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_sub__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_sub" "', argument " "1"" of type '" "Serie *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Serie_sub" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Serie_sub" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Serie_sub" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (arg1)->sub(arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie__wrap_Serie_sub(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Serie_sub__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Serie_sub__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Serie_sub__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Serie_sub__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Serie_sub__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Serie_sub__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function sub.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Serie_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_size" "', argument " "1"" of type '" "Serie const *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = ((Serie const *)arg1)->size();
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_wait__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_wait" "', argument " "1"" of type '" "Serie const *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  ((Serie const *)arg1)->wait();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_wait__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_wait" "', argument " "1"" of type '" "Serie const *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Serie_wait" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  ((Serie const *)arg1)->wait(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie__wrap_Serie_wait(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Serie_wait__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Serie_wait__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Serie_wait__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Serie_wait__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function wait.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_is_calculated(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Serie_is_calculated.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_is_calculated" "', argument " "1"" of type '" "Serie const *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = (bool)((Serie const *)arg1)->is_calculated();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_get_basic_string(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Serie_get_basic_string.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_get_basic_string" "', argument " "1"" of type '" "Serie const *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = (std::string *) &((Serie const *)arg1)->get_basic_string();
  jsresult = SWIG_From_std_string(static_cast< std::string >(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_get_map_string_serie(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::unordered_map< std::string,std::shared_ptr< Serie > > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Serie_get_map_string_serie.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_get_map_string_serie" "', argument " "1"" of type '" "Serie const *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = (std::unordered_map< std::string,std::shared_ptr< Serie > > *) &((Serie const *)arg1)->get_map_string_serie();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__unordered_mapT_std__string_std__shared_ptrT_Serie_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_get_map_serie_serie(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::unordered_map< std::shared_ptr< Serie >,std::shared_ptr< Serie > > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Serie_get_map_serie_serie.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_get_map_serie_serie" "', argument " "1"" of type '" "Serie const *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = (std::unordered_map< std::shared_ptr< Serie >,std::shared_ptr< Serie > > *) &((Serie const *)arg1)->get_map_serie_serie();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__unordered_mapT_std__shared_ptrT_Serie_t_std__shared_ptrT_Serie_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_get_vector_none(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< NoneType > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Serie_get_vector_none.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_get_vector_none" "', argument " "1"" of type '" "Serie const *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = (std::vector< NoneType > *) &((Serie const *)arg1)->get_vector_none();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_NoneType_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_get_vector_string(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Serie_get_vector_string.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_get_vector_string" "', argument " "1"" of type '" "Serie const *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = (std::vector< std::string > *) &((Serie const *)arg1)->get_vector_string();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_get_vector_serie(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::shared_ptr< Serie > > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Serie_get_vector_serie.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_get_vector_serie" "', argument " "1"" of type '" "Serie const *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = (std::vector< std::shared_ptr< Serie > > *) &((Serie const *)arg1)->get_vector_serie();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_get_vector_map_string_serie(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::unordered_map< std::string,std::shared_ptr< Serie > > > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Serie_get_vector_map_string_serie.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_get_vector_map_string_serie" "', argument " "1"" of type '" "Serie const *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = (std::vector< std::unordered_map< std::string,std::shared_ptr< Serie > > > *) &((Serie const *)arg1)->get_vector_map_string_serie();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__unordered_mapT_std__string_std__shared_ptrT_Serie_t_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_get_vector_map_serie_serie(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::unordered_map< std::shared_ptr< Serie >,std::shared_ptr< Serie > > > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Serie_get_vector_map_serie_serie.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_get_vector_map_serie_serie" "', argument " "1"" of type '" "Serie const *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = (std::vector< std::unordered_map< std::shared_ptr< Serie >,std::shared_ptr< Serie > > > *) &((Serie const *)arg1)->get_vector_map_serie_serie();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__unordered_mapT_std__shared_ptrT_Serie_t_std__shared_ptrT_Serie_t_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_get_basic_numpy(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Serie_get_basic_numpy.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_get_basic_numpy" "', argument " "1"" of type '" "Serie const *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = ((Serie const *)arg1)->get_basic_numpy();
  jsresult = SWIG_NewPointerObj((new std::vector< double >(static_cast< const std::vector< double >& >(result))), SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_to_vector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Serie_to_vector.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_to_vector" "', argument " "1"" of type '" "Serie const *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = ((Serie const *)arg1)->to_vector();
  jsresult = SWIG_NewPointerObj((new std::vector< double >(static_cast< const std::vector< double >& >(result))), SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_get_set_serie(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::unordered_set< std::shared_ptr< Serie > > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Serie_get_set_serie.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_get_set_serie" "', argument " "1"" of type '" "Serie const *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = (std::unordered_set< std::shared_ptr< Serie > > *) &((Serie const *)arg1)->get_set_serie();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__unordered_setT_std__shared_ptrT_Serie_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_get_vector_set_serie(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::unordered_set< std::shared_ptr< Serie > > > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Serie_get_vector_set_serie.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_get_vector_set_serie" "', argument " "1"" of type '" "Serie const *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = (std::vector< std::unordered_set< std::shared_ptr< Serie > > > *) &((Serie const *)arg1)->get_vector_set_serie();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__unordered_setT_std__shared_ptrT_Serie_t_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_set_basic_string(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Serie_set_basic_string.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_set_basic_string" "', argument " "1"" of type '" "Serie *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Serie_set_basic_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Serie_set_basic_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_basic_string((std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_set_basic_none(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Serie_set_basic_none.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_set_basic_none" "', argument " "1"" of type '" "Serie *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  (arg1)->set_basic_none();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_set_basic_numpy__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_set_basic_numpy" "', argument " "1"" of type '" "Serie *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Serie_set_basic_numpy" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->set_basic_numpy(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_set_basic_numpy__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_set_basic_numpy" "', argument " "1"" of type '" "Serie *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Serie_set_basic_numpy" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Serie_set_basic_numpy" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->set_basic_numpy(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_set_basic_numpy__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  Serie::Buffer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_set_basic_numpy" "', argument " "1"" of type '" "Serie *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_nc__NdArrayT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Serie_set_basic_numpy" "', argument " "2"" of type '" "Serie::Buffer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Serie_set_basic_numpy" "', argument " "2"" of type '" "Serie::Buffer const &""'"); 
  }
  arg2 = reinterpret_cast< Serie::Buffer * >(argp2);
  (arg1)->set_basic_numpy((Serie::Buffer const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_set_basic_numpy__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  std::initializer_list< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_set_basic_numpy" "', argument " "1"" of type '" "Serie *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__initializer_listT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Serie_set_basic_numpy" "', argument " "2"" of type '" "std::initializer_list< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Serie_set_basic_numpy" "', argument " "2"" of type '" "std::initializer_list< double > const &""'"); 
  }
  arg2 = reinterpret_cast< std::initializer_list< double > * >(argp2);
  (arg1)->set_basic_numpy((std::initializer_list< double > const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_set_basic_numpy__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_set_basic_numpy" "', argument " "1"" of type '" "Serie *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Serie_set_basic_numpy" "', argument " "2"" of type '" "std::vector< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Serie_set_basic_numpy" "', argument " "2"" of type '" "std::vector< double > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  (arg1)->set_basic_numpy((std::vector< double > const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie__wrap_Serie_set_basic_numpy(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Serie_set_basic_numpy__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Serie_set_basic_numpy__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Serie_set_basic_numpy__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Serie_set_basic_numpy__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Serie_set_basic_numpy__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Serie_set_basic_numpy__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Serie_set_basic_numpy__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Serie_set_basic_numpy__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Serie_set_basic_numpy__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Serie_set_basic_numpy__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function set_basic_numpy.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Serie_set_vector_string(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = (Serie *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Serie_set_vector_string.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_set_vector_string" "', argument " "1"" of type '" "Serie *""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_std__string_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Serie_set_vector_string" "', argument " "2"" of type '" "std::vector< std::string > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Serie_set_vector_string" "', argument " "2"" of type '" "std::vector< std::string > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  (arg1)->set_vector_string((std::vector< std::string > const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Serie_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Serie_type_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Serie *arg1 = (Serie *) 0 ;
    SerieType arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_type_set" "', argument " "1"" of type '" "Serie *""'"); 
    }
    arg1 = reinterpret_cast< Serie * >(argp1);
    ecode2 = SWIG_AsVal_int(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Serie_type_set" "', argument " "2"" of type '" "SerieType""'");
    } 
    arg2 = static_cast< SerieType >(val2);
    if (arg1) (arg1)->type = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Serie_type_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Serie_type_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Serie *arg1 = (Serie *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    SerieType result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Serie, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Serie_type_get" "', argument " "1"" of type '" "Serie *""'"); 
    }
    arg1 = reinterpret_cast< Serie * >(argp1);
    result = (SerieType) ((arg1)->type);
    jsresult = SWIG_From_int(static_cast< int >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_ZERO_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_ZERO_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Serie *arg1 = (Serie *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    
    res1 = SWIG_ConvertPtr(value, &argp1,SWIGTYPE_p_Serie, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZERO_set" "', argument " "1"" of type '" "Serie *""'"); 
    }
    arg1 = reinterpret_cast< Serie * >(argp1);
    rp::ZERO = *arg1;
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_ZERO_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_ZERO_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Serie *result = 0 ;
    
    result = (Serie *)&rp::ZERO;
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Serie, 0 |  0 );
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_new_Serie2d__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  rp::Serie2d *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie2d__SWIG_0.");
  result = (rp::Serie2d *)new rp::Serie2d();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_rp__Serie2d, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Serie2d(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Serie2d(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Serie2d(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_Serie2d(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_Serie2d(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            rp::Serie2d * arg1 = (rp::Serie2d *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_Serie2d__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  rp::Serie2d *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  rp::Serie2d *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie2d__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_rp__Serie2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie2d" "', argument " "1"" of type '" "rp::Serie2d const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Serie2d" "', argument " "1"" of type '" "rp::Serie2d const &""'"); 
  }
  arg1 = reinterpret_cast< rp::Serie2d * >(argp1);
  result = (rp::Serie2d *)new rp::Serie2d((rp::Serie2d const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_rp__Serie2d, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie2d__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  rp::Serie2d *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  rp::Serie2d *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie2d__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_rp__Serie2d,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie2d" "', argument " "1"" of type '" "rp::Serie2d &&""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Serie2d" "', argument " "1"" of type '" "rp::Serie2d &&""'"); 
  }
  arg1 = reinterpret_cast< rp::Serie2d * >(argp1);
  result = (rp::Serie2d *)new rp::Serie2d((rp::Serie2d &&)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_rp__Serie2d, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie2d__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  double *arg1 = (double *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  rp::Serie2d *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Serie2d__SWIG_3.");
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Serie2d" "', argument " "1"" of type '" "double *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Serie2d" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Serie2d" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (rp::Serie2d *)new rp::Serie2d(arg1,arg2,arg3);
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_rp__Serie2d, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Serie2d(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie2d__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie2d__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie2d__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie2d__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie2d__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie2d__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Serie2d__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Serie2d__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Serie2d");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_any_less__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  std::shared_ptr< Serie > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "any_less" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "any_less" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "any_less" "', argument " "2"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "any_less" "', argument " "2"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg2 = reinterpret_cast< std::shared_ptr< Serie > * >(argp2);
  result = (bool)rp::any_less((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2);
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_all_less__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  std::shared_ptr< Serie > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "all_less" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "all_less" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "all_less" "', argument " "2"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "all_less" "', argument " "2"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg2 = reinterpret_cast< std::shared_ptr< Serie > * >(argp2);
  result = (bool)rp::all_less((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2);
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_any_less__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  Serie *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "any_less" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "any_less" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "any_less" "', argument " "2"" of type '" "Serie const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "any_less" "', argument " "2"" of type '" "Serie const &""'"); 
  }
  arg2 = reinterpret_cast< Serie * >(argp2);
  result = (bool)rp::any_less((Serie const &)*arg1,(Serie const &)*arg2);
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_any_less(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_any_less__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_any_less__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_any_less__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_any_less__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function any_less.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_all_less__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  Serie *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "all_less" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "all_less" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "all_less" "', argument " "2"" of type '" "Serie const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "all_less" "', argument " "2"" of type '" "Serie const &""'"); 
  }
  arg2 = reinterpret_cast< Serie * >(argp2);
  result = (bool)rp::all_less((Serie const &)*arg1,(Serie const &)*arg2);
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_all_less(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_all_less__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_all_less__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_all_less__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_all_less__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function all_less.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_any_isfinite__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "any_isfinite" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "any_isfinite" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  result = (bool)rp::any_isfinite((std::shared_ptr< Serie > const &)*arg1);
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_all_isfinite__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "all_isfinite" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "all_isfinite" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  result = (bool)rp::all_isfinite((std::shared_ptr< Serie > const &)*arg1);
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_any_isfinite__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "any_isfinite" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "any_isfinite" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = (bool)rp::any_isfinite((Serie const &)*arg1);
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_any_isfinite(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_any_isfinite__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_any_isfinite__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_any_isfinite__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_any_isfinite__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function any_isfinite.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_all_isfinite__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "all_isfinite" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "all_isfinite" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = (bool)rp::all_isfinite((Serie const &)*arg1);
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_all_isfinite(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_all_isfinite__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_all_isfinite__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_all_isfinite__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_all_isfinite__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function all_isfinite.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_div2__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  std::shared_ptr< Serie > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "div2" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "div2" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "div2" "', argument " "2"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "div2" "', argument " "2"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg2 = reinterpret_cast< std::shared_ptr< Serie > * >(argp2);
  result = rp::div2((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_div2__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  Serie *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Serie result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "div2" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "div2" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "div2" "', argument " "2"" of type '" "Serie const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "div2" "', argument " "2"" of type '" "Serie const &""'"); 
  }
  arg2 = reinterpret_cast< Serie * >(argp2);
  result = rp::div2((Serie const &)*arg1,(Serie const &)*arg2);
  jsresult = SWIG_NewPointerObj((new Serie(static_cast< const Serie& >(result))), SWIGTYPE_p_Serie, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_div2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_div2__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_div2__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_div2__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_div2__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function div2.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_mul2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  std::shared_ptr< Serie > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_mul2.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mul2" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mul2" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mul2" "', argument " "2"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mul2" "', argument " "2"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg2 = reinterpret_cast< std::shared_ptr< Serie > * >(argp2);
  result = rp::mul2((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_mul2ref(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  Serie *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Serie result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_mul2ref.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mul2ref" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mul2ref" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mul2ref" "', argument " "2"" of type '" "Serie const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mul2ref" "', argument " "2"" of type '" "Serie const &""'"); 
  }
  arg2 = reinterpret_cast< Serie * >(argp2);
  result = rp::mul2ref((Serie const &)*arg1,(Serie const &)*arg2);
  jsresult = SWIG_NewPointerObj((new Serie(static_cast< const Serie& >(result))), SWIGTYPE_p_Serie, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sub2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  std::shared_ptr< Serie > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sub2.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sub2" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sub2" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sub2" "', argument " "2"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sub2" "', argument " "2"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg2 = reinterpret_cast< std::shared_ptr< Serie > * >(argp2);
  result = rp::sub2((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sub2ref(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  Serie *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Serie result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sub2ref.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sub2ref" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sub2ref" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sub2ref" "', argument " "2"" of type '" "Serie const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sub2ref" "', argument " "2"" of type '" "Serie const &""'"); 
  }
  arg2 = reinterpret_cast< Serie * >(argp2);
  result = rp::sub2ref((Serie const &)*arg1,(Serie const &)*arg2);
  jsresult = SWIG_NewPointerObj((new Serie(static_cast< const Serie& >(result))), SWIGTYPE_p_Serie, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sum2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  std::shared_ptr< Serie > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sum2.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sum2" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sum2" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sum2" "', argument " "2"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sum2" "', argument " "2"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg2 = reinterpret_cast< std::shared_ptr< Serie > * >(argp2);
  result = rp::sum2((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sum2ref(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  Serie *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Serie result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sum2ref.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sum2ref" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sum2ref" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sum2ref" "', argument " "2"" of type '" "Serie const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sum2ref" "', argument " "2"" of type '" "Serie const &""'"); 
  }
  arg2 = reinterpret_cast< Serie * >(argp2);
  result = rp::sum2ref((Serie const &)*arg1,(Serie const &)*arg2);
  jsresult = SWIG_NewPointerObj((new Serie(static_cast< const Serie& >(result))), SWIGTYPE_p_Serie, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_array__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array" "', argument " "1"" of type '" "rp::column const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "array" "', argument " "1"" of type '" "rp::column const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column * >(argp1);
  result = rp::array((Serie const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_array__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::initializer_list< double > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__initializer_listT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array" "', argument " "1"" of type '" "std::initializer_list< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "array" "', argument " "1"" of type '" "std::initializer_list< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::initializer_list< double > * >(argp1);
  result = rp::array((std::initializer_list< double > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_array__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< double > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "array" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = rp::array((std::vector< double > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_array__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array" "', argument " "1"" of type '" "double *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = rp::array(arg1,arg2);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_array__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array" "', argument " "1"" of type '" "double *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = rp::array(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_array(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_array__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_array__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_array__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_array__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_array__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_array__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_array__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_array__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_array__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_array__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function array.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_agg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  rp::function_ptr *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_agg.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agg" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "agg" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__functionT_std__shared_ptrT_Serie_t_fstd__shared_ptrT_Serie_t_const_R_std__shared_ptrT_Serie_t_const_RF_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "agg" "', argument " "2"" of type '" "rp::function_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "agg" "', argument " "2"" of type '" "rp::function_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::function_ptr * >(argp2);
  result = rp::agg((std::vector< std::shared_ptr< Serie > > const &)*arg1,(std::function< std::shared_ptr< Serie > (std::shared_ptr< Serie > const &,std::shared_ptr< Serie > const &) > const &)*arg2);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_agg_transpose(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  rp::function_ptr *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_agg_transpose.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "agg_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "agg_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__functionT_std__shared_ptrT_Serie_t_fstd__shared_ptrT_Serie_t_const_R_std__shared_ptrT_Serie_t_const_RF_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "agg_transpose" "', argument " "2"" of type '" "rp::function_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "agg_transpose" "', argument " "2"" of type '" "rp::function_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::function_ptr * >(argp2);
  result = rp::agg_transpose((std::vector< std::shared_ptr< Serie > > const &)*arg1,(std::function< std::shared_ptr< Serie > (std::shared_ptr< Serie > const &,std::shared_ptr< Serie > const &) > const &)*arg2);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_mapapply(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  rp::transformer_ptr *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< Serie > > > result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_mapapply.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapapply" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mapapply" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__functionT_std__shared_ptrT_Serie_t_fstd__shared_ptrT_Serie_t_const_RF_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mapapply" "', argument " "2"" of type '" "rp::transformer_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mapapply" "', argument " "2"" of type '" "rp::transformer_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::transformer_ptr * >(argp2);
  result = rp::mapapply((std::vector< std::shared_ptr< Serie > > const &)*arg1,(std::function< std::shared_ptr< Serie > (std::shared_ptr< Serie > const &) > const &)*arg2);
  jsresult = SWIG_NewPointerObj((new rp::dataframe(static_cast< const rp::dataframe& >(result))), SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_mapcalculate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< Serie > > > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_mapcalculate.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mapcalculate" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mapcalculate" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  result = rp::mapcalculate((std::vector< std::shared_ptr< Serie > > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::dataframe(static_cast< const rp::dataframe& >(result))), SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sum(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sum.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sum" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sum" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  result = rp::sum((std::vector< std::shared_ptr< Serie > > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sum_transpose(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sum_transpose.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sum_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sum_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  result = rp::sum_transpose((std::vector< std::shared_ptr< Serie > > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_mul(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_mul.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mul" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mul" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  result = rp::mul((std::vector< std::shared_ptr< Serie > > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_mul_transpose(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_mul_transpose.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mul_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mul_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  result = rp::mul_transpose((std::vector< std::shared_ptr< Serie > > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_mean__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mean" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mean" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mean" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = rp::mean((std::vector< std::shared_ptr< Serie > > const &)*arg1,arg2);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_mean__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mean" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mean" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  result = rp::mean((std::vector< std::shared_ptr< Serie > > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_mean(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_mean__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_mean__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_mean__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_mean__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function mean.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_mean_transpose__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mean_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mean_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mean_transpose" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = rp::mean_transpose((std::vector< std::shared_ptr< Serie > > const &)*arg1,arg2);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_mean_transpose__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mean_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mean_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  result = rp::mean_transpose((std::vector< std::shared_ptr< Serie > > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_mean_transpose(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_mean_transpose__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_mean_transpose__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_mean_transpose__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_mean_transpose__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function mean_transpose.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_max(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_max.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "max" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "max" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  result = rp::max((std::vector< std::shared_ptr< Serie > > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_max_transpose(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_max_transpose.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "max_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "max_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  result = rp::max_transpose((std::vector< std::shared_ptr< Serie > > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_min(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_min.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "min" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "min" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  result = rp::min((std::vector< std::shared_ptr< Serie > > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_min_transpose(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_min_transpose.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "min_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "min_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  result = rp::min_transpose((std::vector< std::shared_ptr< Serie > > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap__var__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_var" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_var" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_var" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = rp::var((std::vector< std::shared_ptr< Serie > > const &)*arg1,arg2);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap__var__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_var" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_var" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  result = rp::var((std::vector< std::shared_ptr< Serie > > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap__var(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap__var__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap__var__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap__var__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap__var__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function _var.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_var_transpose__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  bool arg2 ;
  rp::column_ptr *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "var_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "var_transpose" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "var_transpose" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "var_transpose" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  result = rp::var_transpose((std::vector< std::shared_ptr< Serie > > const &)*arg1,arg2,(std::shared_ptr< Serie > const &)*arg3);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_var_transpose__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "var_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "var_transpose" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = rp::var_transpose((std::vector< std::shared_ptr< Serie > > const &)*arg1,arg2);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_var_transpose__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "var_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "var_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  result = rp::var_transpose((std::vector< std::shared_ptr< Serie > > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_var_transpose(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_var_transpose__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_var_transpose__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_var_transpose__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_var_transpose__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_var_transpose__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_var_transpose__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function var_transpose.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_std__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "std" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "std" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "std" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = rp::std((std::vector< std::shared_ptr< Serie > > const &)*arg1,arg2);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_std__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "std" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "std" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  result = rp::std((std::vector< std::shared_ptr< Serie > > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_std(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_std__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_std__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_std__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_std__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function std.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_std_transpose__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "std_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "std_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "std_transpose" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = rp::std_transpose((std::vector< std::shared_ptr< Serie > > const &)*arg1,arg2);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_std_transpose__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "std_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "std_transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  result = rp::std_transpose((std::vector< std::shared_ptr< Serie > > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_std_transpose(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_std_transpose__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_std_transpose__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_std_transpose__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_std_transpose__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function std_transpose.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_window__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  int arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< Serie > > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "window" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "window" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "window" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = rp::window((std::shared_ptr< Serie > const &)*arg1,arg2);
  jsresult = SWIG_NewPointerObj((new rp::dataframe(static_cast< const rp::dataframe& >(result))), SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_window__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< Serie > > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "window" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "window" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  result = rp::window((std::shared_ptr< Serie > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::dataframe(static_cast< const rp::dataframe& >(result))), SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_window(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_window__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_window__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_window__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_window__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function window.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_transpose__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  bool arg2 ;
  double arg3 ;
  bool arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< Serie > > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transpose" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "transpose" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "transpose" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = rp::transpose((std::vector< std::shared_ptr< Serie > > const &)*arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new rp::dataframe(static_cast< const rp::dataframe& >(result))), SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_transpose__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  bool arg2 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< Serie > > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transpose" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "transpose" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = rp::transpose((std::vector< std::shared_ptr< Serie > > const &)*arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj((new rp::dataframe(static_cast< const rp::dataframe& >(result))), SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_transpose__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< Serie > > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transpose" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = rp::transpose((std::vector< std::shared_ptr< Serie > > const &)*arg1,arg2);
  jsresult = SWIG_NewPointerObj((new rp::dataframe(static_cast< const rp::dataframe& >(result))), SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_transpose__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< Serie > > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transpose" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  result = rp::transpose((std::vector< std::shared_ptr< Serie > > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::dataframe(static_cast< const rp::dataframe& >(result))), SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_transpose(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_transpose__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_transpose__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_transpose__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_transpose__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_transpose__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_transpose__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_transpose__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_transpose__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function transpose.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_get_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  size_t *arg2 = 0 ;
  size_t *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_get_size.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_size" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_size" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_size_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_size" "', argument " "2"" of type '" "size_t &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_size" "', argument " "2"" of type '" "size_t &""'"); 
  }
  arg2 = reinterpret_cast< size_t * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_size_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "get_size" "', argument " "3"" of type '" "size_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_size" "', argument " "3"" of type '" "size_t &""'"); 
  }
  arg3 = reinterpret_cast< size_t * >(argp3);
  rp::get_size((std::vector< std::shared_ptr< Serie > > const &)*arg1,*arg2,*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_print__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "print" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "print" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "print" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "print" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  rp::print((std::vector< std::shared_ptr< Serie > > const &)*arg1,(std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_print__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "print" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "print" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  rp::print((std::vector< std::shared_ptr< Serie > > const &)*arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_print__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "print" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "print" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "print" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "print" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  rp::print((std::shared_ptr< Serie > const &)*arg1,(std::string const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_print__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "print" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "print" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  rp::print((std::shared_ptr< Serie > const &)*arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_print(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_print__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_print__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_print__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_print__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_print__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_print__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_print__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_print__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function print.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_norm_nans(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< Serie > > > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_norm_nans.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "norm_nans" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "norm_nans" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  result = rp::norm_nans((std::vector< std::shared_ptr< Serie > > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::dataframe(static_cast< const rp::dataframe& >(result))), SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_norm_fill__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< Serie > > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "norm_fill" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "norm_fill" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "norm_fill" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = rp::norm_fill((std::vector< std::shared_ptr< Serie > > const &)*arg1,arg2);
  jsresult = SWIG_NewPointerObj((new rp::dataframe(static_cast< const rp::dataframe& >(result))), SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_norm_fill__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< Serie > > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "norm_fill" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "norm_fill" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  result = rp::norm_fill((std::vector< std::shared_ptr< Serie > > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::dataframe(static_cast< const rp::dataframe& >(result))), SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_norm_fill(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_norm_fill__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_norm_fill__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_norm_fill__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_norm_fill__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function norm_fill.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_norm_drop(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::dataframe *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< Serie > > > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_norm_drop.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "norm_drop" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "norm_drop" "', argument " "1"" of type '" "rp::dataframe const &""'"); 
  }
  arg1 = reinterpret_cast< rp::dataframe * >(argp1);
  result = rp::norm_drop((std::vector< std::shared_ptr< Serie > > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new rp::dataframe(static_cast< const rp::dataframe& >(result))), SWIGTYPE_p_std__vectorT_std__shared_ptrT_Serie_t_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_use_callback(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void (*arg1)(int,char const *) = (void (*)(int,char const *)) 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_use_callback.");
  
  {
    int res = SWIG_ConvertFunctionPtr(args[0], (void**)(&arg1), SWIGTYPE_p_f_int_p_q_const__char__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "use_callback" "', argument " "1"" of type '" "void (*)(int,char const *)""'"); 
    }
  }
  rp::use_callback(arg1);
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_custommain(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_custommain.");
  
  custommain();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_exp__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "exp" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  result = rp::exp((std::shared_ptr< Serie > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_exp__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "exp" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = rp::exp((Serie const &)*arg1);
  jsresult = SWIG_NewPointerObj((new Serie(static_cast< const Serie& >(result))), SWIGTYPE_p_Serie, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_exp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_exp__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_exp__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_exp__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_exp__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function exp.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_log__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "log" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "log" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  result = rp::log((std::shared_ptr< Serie > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_log__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "log" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "log" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = rp::log((Serie const &)*arg1);
  jsresult = SWIG_NewPointerObj((new Serie(static_cast< const Serie& >(result))), SWIGTYPE_p_Serie, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_log(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_log__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_log__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_log__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_log__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function log.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_pow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  std::shared_ptr< Serie > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_pow.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pow" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pow" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pow" "', argument " "2"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pow" "', argument " "2"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg2 = reinterpret_cast< std::shared_ptr< Serie > * >(argp2);
  result = rp::pow((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_powref(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  Serie *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Serie result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_powref.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "powref" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "powref" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "powref" "', argument " "2"" of type '" "Serie const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "powref" "', argument " "2"" of type '" "Serie const &""'"); 
  }
  arg2 = reinterpret_cast< Serie * >(argp2);
  result = rp::powref((Serie const &)*arg1,(Serie const &)*arg2);
  jsresult = SWIG_NewPointerObj((new Serie(static_cast< const Serie& >(result))), SWIGTYPE_p_Serie, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sqrt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sqrt.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqrt" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sqrt" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  result = rp::sqrt((std::shared_ptr< Serie > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sqrtref(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sqrtref.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqrtref" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sqrtref" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = rp::sqrtref((Serie const &)*arg1);
  jsresult = SWIG_NewPointerObj((new Serie(static_cast< const Serie& >(result))), SWIGTYPE_p_Serie, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_erf__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "erf" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "erf" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  result = rp::erf((std::shared_ptr< Serie > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_erf__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "erf" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "erf" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = rp::erf((Serie const &)*arg1);
  jsresult = SWIG_NewPointerObj((new Serie(static_cast< const Serie& >(result))), SWIGTYPE_p_Serie, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_erf(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_erf__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_erf__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_erf__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_erf__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function erf.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_neg__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "neg" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "neg" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  result = rp::neg((std::shared_ptr< Serie > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_neg__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "neg" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "neg" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = rp::neg((Serie const &)*arg1);
  jsresult = SWIG_NewPointerObj((new Serie(static_cast< const Serie& >(result))), SWIGTYPE_p_Serie, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_neg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_neg__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_neg__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_neg__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_neg__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function neg.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_abs__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "abs" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "abs" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  result = rp::abs((std::shared_ptr< Serie > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_abs__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "abs" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "abs" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = rp::abs((Serie const &)*arg1);
  jsresult = SWIG_NewPointerObj((new Serie(static_cast< const Serie& >(result))), SWIGTYPE_p_Serie, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_abs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_abs__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_abs__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_abs__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_abs__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function abs.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_pdf__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pdf" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pdf" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  result = rp::pdf((std::shared_ptr< Serie > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_pdf__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pdf" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pdf" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = rp::pdf((Serie const &)*arg1);
  jsresult = SWIG_NewPointerObj((new Serie(static_cast< const Serie& >(result))), SWIGTYPE_p_Serie, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_pdf(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_pdf__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_pdf__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_pdf__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_pdf__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function pdf.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_cdf__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cdf" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cdf" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  result = rp::cdf((std::shared_ptr< Serie > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_cdf__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cdf" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cdf" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = rp::cdf((Serie const &)*arg1);
  jsresult = SWIG_NewPointerObj((new Serie(static_cast< const Serie& >(result))), SWIGTYPE_p_Serie, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_cdf(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_cdf__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_cdf__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_cdf__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_cdf__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function cdf.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ppf__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ppf" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ppf" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  result = rp::ppf((std::shared_ptr< Serie > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ppf__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ppf" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ppf" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = rp::ppf((Serie const &)*arg1);
  jsresult = SWIG_NewPointerObj((new Serie(static_cast< const Serie& >(result))), SWIGTYPE_p_Serie, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_ppf(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ppf__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ppf__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ppf__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ppf__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ppf.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_max0(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_max0.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "max0" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "max0" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  result = rp::max0((std::shared_ptr< Serie > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_max0ref(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_max0ref.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "max0ref" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "max0ref" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = rp::max0ref((Serie const &)*arg1);
  jsresult = SWIG_NewPointerObj((new Serie(static_cast< const Serie& >(result))), SWIGTYPE_p_Serie, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_max2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  std::shared_ptr< Serie > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_max2.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "max2" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "max2" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "max2" "', argument " "2"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "max2" "', argument " "2"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg2 = reinterpret_cast< std::shared_ptr< Serie > * >(argp2);
  result = rp::max2((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_max2ref(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  Serie *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Serie result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_max2ref.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "max2ref" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "max2ref" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "max2ref" "', argument " "2"" of type '" "Serie const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "max2ref" "', argument " "2"" of type '" "Serie const &""'"); 
  }
  arg2 = reinterpret_cast< Serie * >(argp2);
  result = rp::max2ref((Serie const &)*arg1,(Serie const &)*arg2);
  jsresult = SWIG_NewPointerObj((new Serie(static_cast< const Serie& >(result))), SWIGTYPE_p_Serie, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rsi__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  int arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rsi" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rsi" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rsi" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = rp::rsi((std::shared_ptr< Serie > const &)*arg1,arg2);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rsi__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rsi" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rsi" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  result = rp::rsi((std::shared_ptr< Serie > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rsi__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  int arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Serie result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rsi" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rsi" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rsi" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = rp::rsi((Serie const &)*arg1,arg2);
  jsresult = SWIG_NewPointerObj((new Serie(static_cast< const Serie& >(result))), SWIGTYPE_p_Serie, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rsi__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rsi" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rsi" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = rp::rsi((Serie const &)*arg1);
  jsresult = SWIG_NewPointerObj((new Serie(static_cast< const Serie& >(result))), SWIGTYPE_p_Serie, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_rsi(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_rsi__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_rsi__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_rsi__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_rsi__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_rsi__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_rsi__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_rsi__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_rsi__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function rsi.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_clean__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  bool arg2 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clean" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "clean" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "clean" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "clean" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = rp::clean((std::shared_ptr< Serie > const &)*arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_clean__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clean" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "clean" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "clean" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = rp::clean((std::shared_ptr< Serie > const &)*arg1,arg2);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_clean__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::shared_ptr< Serie > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clean" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "clean" "', argument " "1"" of type '" "std::shared_ptr< Serie > const &""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< Serie > * >(argp1);
  result = rp::clean((std::shared_ptr< Serie > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_clean__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  bool arg2 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  Serie result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clean" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "clean" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "clean" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "clean" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = rp::clean((Serie const &)*arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj((new Serie(static_cast< const Serie& >(result))), SWIGTYPE_p_Serie, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_clean__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  bool arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  Serie result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clean" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "clean" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "clean" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = rp::clean((Serie const &)*arg1,arg2);
  jsresult = SWIG_NewPointerObj((new Serie(static_cast< const Serie& >(result))), SWIGTYPE_p_Serie, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_clean__SWIG_5(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Serie *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Serie result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_Serie,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clean" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "clean" "', argument " "1"" of type '" "Serie const &""'"); 
  }
  arg1 = reinterpret_cast< Serie * >(argp1);
  result = rp::clean((Serie const &)*arg1);
  jsresult = SWIG_NewPointerObj((new Serie(static_cast< const Serie& >(result))), SWIGTYPE_p_Serie, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_clean(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_clean__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_clean__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_clean__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_clean__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_clean__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_clean__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_clean__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_clean__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_clean__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_clean__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_clean__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_clean__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function clean.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rand_normal(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_rand_normal.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "rand_normal" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = rp::rand_normal(arg1);
  jsresult = SWIG_NewPointerObj((new std::shared_ptr< Serie >(static_cast< const std::shared_ptr< Serie >& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_year(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_year.");
  
  result = rp::year();
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_zero(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_zero.");
  
  result = rp::zero();
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_one(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_one.");
  
  result = rp::one();
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_two(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_two.");
  
  result = rp::two();
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_onehundred(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_onehundred.");
  
  result = rp::onehundred();
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_half(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_half.");
  
  result = rp::half();
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_pi(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_pi.");
  
  result = rp::pi();
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_two_pi(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_two_pi.");
  
  result = rp::two_pi();
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_constant(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_constant.");
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "constant" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = rp::constant(arg1);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_d1(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_d1.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "d1" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "d1" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "d1" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "d1" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "d1" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "d1" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "d1" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "d1" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "d1" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "d1" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "d1" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "d1" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  result = rp::d1((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_d2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_d2.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "d2" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "d2" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "d2" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "d2" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "d2" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "d2" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "d2" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "d2" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "d2" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "d2" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "d2" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "d2" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  result = rp::d2((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CallPrice__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  rp::column_ptr *arg7 = 0 ;
  rp::column_ptr *arg8 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CallPrice" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallPrice" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CallPrice" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallPrice" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CallPrice" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallPrice" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CallPrice" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallPrice" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CallPrice" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallPrice" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CallPrice" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallPrice" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CallPrice" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallPrice" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  arg7 = reinterpret_cast< rp::column_ptr * >(argp7);
  res8 = SWIG_ConvertPtr(args[7], &argp8, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CallPrice" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallPrice" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  arg8 = reinterpret_cast< rp::column_ptr * >(argp8);
  result = rp::CallPrice((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6,(std::shared_ptr< Serie > const &)*arg7,(std::shared_ptr< Serie > const &)*arg8);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CallPrice__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  rp::column_ptr *arg7 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CallPrice" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallPrice" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CallPrice" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallPrice" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CallPrice" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallPrice" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CallPrice" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallPrice" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CallPrice" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallPrice" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CallPrice" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallPrice" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CallPrice" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallPrice" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  arg7 = reinterpret_cast< rp::column_ptr * >(argp7);
  result = rp::CallPrice((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6,(std::shared_ptr< Serie > const &)*arg7);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CallPrice__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CallPrice" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallPrice" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CallPrice" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallPrice" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CallPrice" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallPrice" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CallPrice" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallPrice" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CallPrice" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallPrice" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CallPrice" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallPrice" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  result = rp::CallPrice((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_CallPrice(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 8) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_CallPrice__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_CallPrice__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_CallPrice__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_CallPrice__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_CallPrice__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_CallPrice__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function CallPrice.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PutPrice__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  rp::column_ptr *arg7 = 0 ;
  rp::column_ptr *arg8 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PutPrice" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutPrice" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PutPrice" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutPrice" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PutPrice" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutPrice" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PutPrice" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutPrice" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PutPrice" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutPrice" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PutPrice" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutPrice" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "PutPrice" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutPrice" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  arg7 = reinterpret_cast< rp::column_ptr * >(argp7);
  res8 = SWIG_ConvertPtr(args[7], &argp8, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "PutPrice" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutPrice" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  arg8 = reinterpret_cast< rp::column_ptr * >(argp8);
  result = rp::PutPrice((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6,(std::shared_ptr< Serie > const &)*arg7,(std::shared_ptr< Serie > const &)*arg8);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PutPrice__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  rp::column_ptr *arg7 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PutPrice" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutPrice" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PutPrice" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutPrice" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PutPrice" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutPrice" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PutPrice" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutPrice" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PutPrice" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutPrice" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PutPrice" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutPrice" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "PutPrice" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutPrice" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  arg7 = reinterpret_cast< rp::column_ptr * >(argp7);
  result = rp::PutPrice((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6,(std::shared_ptr< Serie > const &)*arg7);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PutPrice__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PutPrice" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutPrice" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PutPrice" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutPrice" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PutPrice" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutPrice" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PutPrice" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutPrice" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PutPrice" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutPrice" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PutPrice" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutPrice" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  result = rp::PutPrice((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_PutPrice(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 8) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_PutPrice__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_PutPrice__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_PutPrice__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_PutPrice__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_PutPrice__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_PutPrice__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function PutPrice.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CallGreeksDelta(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  rp::column_ptr *arg7 = 0 ;
  rp::column_ptr *arg8 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CallGreeksDelta.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CallGreeksDelta" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksDelta" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CallGreeksDelta" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksDelta" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CallGreeksDelta" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksDelta" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CallGreeksDelta" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksDelta" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CallGreeksDelta" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksDelta" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CallGreeksDelta" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksDelta" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CallGreeksDelta" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksDelta" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  arg7 = reinterpret_cast< rp::column_ptr * >(argp7);
  res8 = SWIG_ConvertPtr(args[7], &argp8, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CallGreeksDelta" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksDelta" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  arg8 = reinterpret_cast< rp::column_ptr * >(argp8);
  result = rp::CallGreeksDelta((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6,(std::shared_ptr< Serie > const &)*arg7,(std::shared_ptr< Serie > const &)*arg8);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CallGreeksGamma(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  rp::column_ptr *arg7 = 0 ;
  rp::column_ptr *arg8 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CallGreeksGamma.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CallGreeksGamma" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksGamma" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CallGreeksGamma" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksGamma" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CallGreeksGamma" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksGamma" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CallGreeksGamma" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksGamma" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CallGreeksGamma" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksGamma" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CallGreeksGamma" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksGamma" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CallGreeksGamma" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksGamma" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  arg7 = reinterpret_cast< rp::column_ptr * >(argp7);
  res8 = SWIG_ConvertPtr(args[7], &argp8, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CallGreeksGamma" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksGamma" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  arg8 = reinterpret_cast< rp::column_ptr * >(argp8);
  result = rp::CallGreeksGamma((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6,(std::shared_ptr< Serie > const &)*arg7,(std::shared_ptr< Serie > const &)*arg8);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CallGreeksTheta(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  rp::column_ptr *arg7 = 0 ;
  rp::column_ptr *arg8 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CallGreeksTheta.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CallGreeksTheta" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksTheta" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CallGreeksTheta" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksTheta" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CallGreeksTheta" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksTheta" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CallGreeksTheta" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksTheta" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CallGreeksTheta" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksTheta" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CallGreeksTheta" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksTheta" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CallGreeksTheta" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksTheta" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  arg7 = reinterpret_cast< rp::column_ptr * >(argp7);
  res8 = SWIG_ConvertPtr(args[7], &argp8, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CallGreeksTheta" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksTheta" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  arg8 = reinterpret_cast< rp::column_ptr * >(argp8);
  result = rp::CallGreeksTheta((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6,(std::shared_ptr< Serie > const &)*arg7,(std::shared_ptr< Serie > const &)*arg8);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CallGreeksVega(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  rp::column_ptr *arg7 = 0 ;
  rp::column_ptr *arg8 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CallGreeksVega.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CallGreeksVega" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksVega" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CallGreeksVega" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksVega" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CallGreeksVega" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksVega" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CallGreeksVega" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksVega" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CallGreeksVega" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksVega" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CallGreeksVega" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksVega" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CallGreeksVega" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksVega" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  arg7 = reinterpret_cast< rp::column_ptr * >(argp7);
  res8 = SWIG_ConvertPtr(args[7], &argp8, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CallGreeksVega" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksVega" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  arg8 = reinterpret_cast< rp::column_ptr * >(argp8);
  result = rp::CallGreeksVega((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6,(std::shared_ptr< Serie > const &)*arg7,(std::shared_ptr< Serie > const &)*arg8);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CallGreeksRho(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  rp::column_ptr *arg7 = 0 ;
  rp::column_ptr *arg8 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CallGreeksRho.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CallGreeksRho" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksRho" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CallGreeksRho" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksRho" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CallGreeksRho" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksRho" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CallGreeksRho" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksRho" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CallGreeksRho" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksRho" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CallGreeksRho" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksRho" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CallGreeksRho" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksRho" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  arg7 = reinterpret_cast< rp::column_ptr * >(argp7);
  res8 = SWIG_ConvertPtr(args[7], &argp8, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CallGreeksRho" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallGreeksRho" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  arg8 = reinterpret_cast< rp::column_ptr * >(argp8);
  result = rp::CallGreeksRho((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6,(std::shared_ptr< Serie > const &)*arg7,(std::shared_ptr< Serie > const &)*arg8);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PutGreeksDelta(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  rp::column_ptr *arg7 = 0 ;
  rp::column_ptr *arg8 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PutGreeksDelta.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PutGreeksDelta" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksDelta" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PutGreeksDelta" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksDelta" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PutGreeksDelta" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksDelta" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PutGreeksDelta" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksDelta" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PutGreeksDelta" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksDelta" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PutGreeksDelta" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksDelta" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "PutGreeksDelta" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksDelta" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  arg7 = reinterpret_cast< rp::column_ptr * >(argp7);
  res8 = SWIG_ConvertPtr(args[7], &argp8, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "PutGreeksDelta" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksDelta" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  arg8 = reinterpret_cast< rp::column_ptr * >(argp8);
  result = rp::PutGreeksDelta((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6,(std::shared_ptr< Serie > const &)*arg7,(std::shared_ptr< Serie > const &)*arg8);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PutGreeksGamma(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  rp::column_ptr *arg7 = 0 ;
  rp::column_ptr *arg8 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PutGreeksGamma.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PutGreeksGamma" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksGamma" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PutGreeksGamma" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksGamma" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PutGreeksGamma" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksGamma" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PutGreeksGamma" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksGamma" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PutGreeksGamma" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksGamma" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PutGreeksGamma" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksGamma" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "PutGreeksGamma" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksGamma" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  arg7 = reinterpret_cast< rp::column_ptr * >(argp7);
  res8 = SWIG_ConvertPtr(args[7], &argp8, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "PutGreeksGamma" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksGamma" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  arg8 = reinterpret_cast< rp::column_ptr * >(argp8);
  result = rp::PutGreeksGamma((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6,(std::shared_ptr< Serie > const &)*arg7,(std::shared_ptr< Serie > const &)*arg8);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PutGreeksTheta(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  rp::column_ptr *arg7 = 0 ;
  rp::column_ptr *arg8 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PutGreeksTheta.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PutGreeksTheta" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksTheta" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PutGreeksTheta" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksTheta" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PutGreeksTheta" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksTheta" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PutGreeksTheta" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksTheta" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PutGreeksTheta" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksTheta" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PutGreeksTheta" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksTheta" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "PutGreeksTheta" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksTheta" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  arg7 = reinterpret_cast< rp::column_ptr * >(argp7);
  res8 = SWIG_ConvertPtr(args[7], &argp8, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "PutGreeksTheta" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksTheta" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  arg8 = reinterpret_cast< rp::column_ptr * >(argp8);
  result = rp::PutGreeksTheta((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6,(std::shared_ptr< Serie > const &)*arg7,(std::shared_ptr< Serie > const &)*arg8);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PutGreeksVega(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  rp::column_ptr *arg7 = 0 ;
  rp::column_ptr *arg8 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PutGreeksVega.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PutGreeksVega" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksVega" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PutGreeksVega" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksVega" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PutGreeksVega" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksVega" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PutGreeksVega" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksVega" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PutGreeksVega" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksVega" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PutGreeksVega" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksVega" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "PutGreeksVega" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksVega" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  arg7 = reinterpret_cast< rp::column_ptr * >(argp7);
  res8 = SWIG_ConvertPtr(args[7], &argp8, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "PutGreeksVega" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksVega" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  arg8 = reinterpret_cast< rp::column_ptr * >(argp8);
  result = rp::PutGreeksVega((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6,(std::shared_ptr< Serie > const &)*arg7,(std::shared_ptr< Serie > const &)*arg8);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PutGreeksRho(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  rp::column_ptr *arg7 = 0 ;
  rp::column_ptr *arg8 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PutGreeksRho.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PutGreeksRho" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksRho" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PutGreeksRho" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksRho" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PutGreeksRho" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksRho" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PutGreeksRho" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksRho" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PutGreeksRho" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksRho" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PutGreeksRho" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksRho" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "PutGreeksRho" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksRho" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  arg7 = reinterpret_cast< rp::column_ptr * >(argp7);
  res8 = SWIG_ConvertPtr(args[7], &argp8, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "PutGreeksRho" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutGreeksRho" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  arg8 = reinterpret_cast< rp::column_ptr * >(argp8);
  result = rp::PutGreeksRho((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6,(std::shared_ptr< Serie > const &)*arg7,(std::shared_ptr< Serie > const &)*arg8);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ImpliedVolatility__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  rp::column_ptr *arg7 = 0 ;
  std::string *arg8 = 0 ;
  double arg9 ;
  double arg10 ;
  long arg11 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  int res8 = SWIG_OLDOBJ ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  long val11 ;
  int ecode11 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImpliedVolatility" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImpliedVolatility" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImpliedVolatility" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImpliedVolatility" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ImpliedVolatility" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ImpliedVolatility" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ImpliedVolatility" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  arg7 = reinterpret_cast< rp::column_ptr * >(argp7);
  {
    std::string *ptr = (std::string *)0;
    res8 = SWIG_AsPtr_std_string(args[7], &ptr);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "ImpliedVolatility" "', argument " "8"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "8"" of type '" "std::string const &""'"); 
    }
    arg8 = ptr;
  }
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ImpliedVolatility" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ImpliedVolatility" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_long(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "ImpliedVolatility" "', argument " "11"" of type '" "long""'");
  } 
  arg11 = static_cast< long >(val11);
  result = rp::ImpliedVolatility((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6,(std::shared_ptr< Serie > const &)*arg7,(std::string const &)*arg8,arg9,arg10,arg11);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  if (SWIG_IsNewObj(res8)) delete arg8;
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ImpliedVolatility__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  rp::column_ptr *arg7 = 0 ;
  std::string *arg8 = 0 ;
  double arg9 ;
  double arg10 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  int res8 = SWIG_OLDOBJ ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImpliedVolatility" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImpliedVolatility" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImpliedVolatility" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImpliedVolatility" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ImpliedVolatility" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ImpliedVolatility" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ImpliedVolatility" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  arg7 = reinterpret_cast< rp::column_ptr * >(argp7);
  {
    std::string *ptr = (std::string *)0;
    res8 = SWIG_AsPtr_std_string(args[7], &ptr);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "ImpliedVolatility" "', argument " "8"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "8"" of type '" "std::string const &""'"); 
    }
    arg8 = ptr;
  }
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ImpliedVolatility" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ImpliedVolatility" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  result = rp::ImpliedVolatility((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6,(std::shared_ptr< Serie > const &)*arg7,(std::string const &)*arg8,arg9,arg10);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  if (SWIG_IsNewObj(res8)) delete arg8;
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ImpliedVolatility__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  rp::column_ptr *arg7 = 0 ;
  std::string *arg8 = 0 ;
  double arg9 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  int res8 = SWIG_OLDOBJ ;
  double val9 ;
  int ecode9 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImpliedVolatility" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImpliedVolatility" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImpliedVolatility" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImpliedVolatility" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ImpliedVolatility" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ImpliedVolatility" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ImpliedVolatility" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  arg7 = reinterpret_cast< rp::column_ptr * >(argp7);
  {
    std::string *ptr = (std::string *)0;
    res8 = SWIG_AsPtr_std_string(args[7], &ptr);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "ImpliedVolatility" "', argument " "8"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "8"" of type '" "std::string const &""'"); 
    }
    arg8 = ptr;
  }
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ImpliedVolatility" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  result = rp::ImpliedVolatility((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6,(std::shared_ptr< Serie > const &)*arg7,(std::string const &)*arg8,arg9);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  if (SWIG_IsNewObj(res8)) delete arg8;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ImpliedVolatility__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  rp::column_ptr *arg7 = 0 ;
  std::string *arg8 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  int res8 = SWIG_OLDOBJ ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImpliedVolatility" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ImpliedVolatility" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ImpliedVolatility" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ImpliedVolatility" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ImpliedVolatility" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ImpliedVolatility" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ImpliedVolatility" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  arg7 = reinterpret_cast< rp::column_ptr * >(argp7);
  {
    std::string *ptr = (std::string *)0;
    res8 = SWIG_AsPtr_std_string(args[7], &ptr);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "ImpliedVolatility" "', argument " "8"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ImpliedVolatility" "', argument " "8"" of type '" "std::string const &""'"); 
    }
    arg8 = ptr;
  }
  result = rp::ImpliedVolatility((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6,(std::shared_ptr< Serie > const &)*arg7,(std::string const &)*arg8);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  if (SWIG_IsNewObj(res8)) delete arg8;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rp__wrap_ImpliedVolatility(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 11) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ImpliedVolatility__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ImpliedVolatility__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 10) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ImpliedVolatility__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ImpliedVolatility__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 9) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ImpliedVolatility__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ImpliedVolatility__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 8) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ImpliedVolatility__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ImpliedVolatility__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ImpliedVolatility.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CallImpliedvolatility(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  rp::column_ptr *arg7 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CallImpliedvolatility.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CallImpliedvolatility" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallImpliedvolatility" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CallImpliedvolatility" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallImpliedvolatility" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CallImpliedvolatility" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallImpliedvolatility" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CallImpliedvolatility" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallImpliedvolatility" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CallImpliedvolatility" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallImpliedvolatility" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CallImpliedvolatility" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallImpliedvolatility" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CallImpliedvolatility" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CallImpliedvolatility" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  arg7 = reinterpret_cast< rp::column_ptr * >(argp7);
  result = rp::CallImpliedvolatility((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6,(std::shared_ptr< Serie > const &)*arg7);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PutImpliedvolatility(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  rp::column_ptr *arg7 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PutImpliedvolatility.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PutImpliedvolatility" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutImpliedvolatility" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PutImpliedvolatility" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutImpliedvolatility" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PutImpliedvolatility" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutImpliedvolatility" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PutImpliedvolatility" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutImpliedvolatility" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PutImpliedvolatility" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutImpliedvolatility" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PutImpliedvolatility" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutImpliedvolatility" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "PutImpliedvolatility" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PutImpliedvolatility" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  arg7 = reinterpret_cast< rp::column_ptr * >(argp7);
  result = rp::PutImpliedvolatility((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6,(std::shared_ptr< Serie > const &)*arg7);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_GreeksVolga(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  rp::column_ptr *arg1 = 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  rp::column_ptr *arg5 = 0 ;
  rp::column_ptr *arg6 = 0 ;
  rp::column_ptr *arg7 = 0 ;
  rp::column_ptr *arg8 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  SwigValueWrapper< std::shared_ptr< Serie > > result;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_GreeksVolga.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GreeksVolga" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreeksVolga" "', argument " "1"" of type '" "rp::column_ptr const &""'"); 
  }
  arg1 = reinterpret_cast< rp::column_ptr * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GreeksVolga" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreeksVolga" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GreeksVolga" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreeksVolga" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GreeksVolga" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreeksVolga" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GreeksVolga" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreeksVolga" "', argument " "5"" of type '" "rp::column_ptr const &""'"); 
  }
  arg5 = reinterpret_cast< rp::column_ptr * >(argp5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "GreeksVolga" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreeksVolga" "', argument " "6"" of type '" "rp::column_ptr const &""'"); 
  }
  arg6 = reinterpret_cast< rp::column_ptr * >(argp6);
  res7 = SWIG_ConvertPtr(args[6], &argp7, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "GreeksVolga" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreeksVolga" "', argument " "7"" of type '" "rp::column_ptr const &""'"); 
  }
  arg7 = reinterpret_cast< rp::column_ptr * >(argp7);
  res8 = SWIG_ConvertPtr(args[7], &argp8, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "GreeksVolga" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreeksVolga" "', argument " "8"" of type '" "rp::column_ptr const &""'"); 
  }
  arg8 = reinterpret_cast< rp::column_ptr * >(argp8);
  result = rp::GreeksVolga((std::shared_ptr< Serie > const &)*arg1,(std::shared_ptr< Serie > const &)*arg2,(std::shared_ptr< Serie > const &)*arg3,(std::shared_ptr< Serie > const &)*arg4,(std::shared_ptr< Serie > const &)*arg5,(std::shared_ptr< Serie > const &)*arg6,(std::shared_ptr< Serie > const &)*arg7,(std::shared_ptr< Serie > const &)*arg8);
  jsresult = SWIG_NewPointerObj((new rp::column_ptr(static_cast< const rp::column_ptr& >(result))), SWIGTYPE_p_std__shared_ptrT_Serie_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_qs_LINEAR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_qs_LINEAR(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(qs::LINEAR));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_qs_YIELD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_qs_YIELD(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(qs::YIELD));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_qs_EXPONENTIAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_qs_EXPONENTIAL(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(qs::EXPONENTIAL));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_qs_ANNUAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_qs_ANNUAL(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(qs::ANNUAL));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_qs_SEMIANNUAL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_qs_SEMIANNUAL(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(qs::SEMIANNUAL));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_qs_QUATERLY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_qs_QUATERLY(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(qs::QUATERLY));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_qs_MONTHLY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_qs_MONTHLY(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(qs::MONTHLY));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_qs_YEAR(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_qs_YEAR(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(qs::YEAR));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_qs_SEMESTER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_qs_SEMESTER(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(qs::SEMESTER));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_qs_TRIMESTER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_qs_TRIMESTER(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(qs::TRIMESTER));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_qs_MONTH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_qs_MONTH(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(qs::MONTH));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_qs_ACT_ACT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_qs_ACT_ACT(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(qs::ACT_ACT));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_qs_ACT_360(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_qs_ACT_360(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(qs::ACT_360));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_qs_ACT_365(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_qs_ACT_365(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(qs::ACT_365));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_qs_EQUALS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_qs_EQUALS(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(qs::EQUALS));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_discount2rate__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  qs::Convention arg3 ;
  int arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "discount2rate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "discount2rate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "discount2rate" "', argument " "3"" of type '" "qs::Convention""'");
  } 
  arg3 = static_cast< qs::Convention >(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "discount2rate" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (double)qs::discount2rate(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_discount2rate__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  qs::Convention arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "discount2rate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "discount2rate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "discount2rate" "', argument " "3"" of type '" "qs::Convention""'");
  } 
  arg3 = static_cast< qs::Convention >(val3);
  result = (double)qs::discount2rate(arg1,arg2,arg3);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_discount2rate__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "discount2rate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "discount2rate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (double)qs::discount2rate(arg1,arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_qs__wrap_discount2rate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_discount2rate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_discount2rate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_discount2rate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_discount2rate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_discount2rate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_discount2rate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function discount2rate.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rate2discount__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  qs::Convention arg3 ;
  int arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "rate2discount" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rate2discount" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "rate2discount" "', argument " "3"" of type '" "qs::Convention""'");
  } 
  arg3 = static_cast< qs::Convention >(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "rate2discount" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (double)qs::rate2discount(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rate2discount__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  qs::Convention arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "rate2discount" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rate2discount" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "rate2discount" "', argument " "3"" of type '" "qs::Convention""'");
  } 
  arg3 = static_cast< qs::Convention >(val3);
  result = (double)qs::rate2discount(arg1,arg2,arg3);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_rate2discount__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "rate2discount" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rate2discount" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (double)qs::rate2discount(arg1,arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_qs__wrap_rate2discount(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_rate2discount__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_rate2discount__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_rate2discount__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_rate2discount__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_rate2discount__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_rate2discount__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function rate2discount.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_equivalent_rate__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::Maturity *arg1 = 0 ;
  double arg2 ;
  qs::Convention arg3 ;
  int arg4 ;
  qs::Convention arg5 ;
  int arg6 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "equivalent_rate" "', argument " "1"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "equivalent_rate" "', argument " "1"" of type '" "qs::Maturity const &""'"); 
  }
  arg1 = reinterpret_cast< qs::Maturity * >(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "equivalent_rate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "equivalent_rate" "', argument " "3"" of type '" "qs::Convention""'");
  } 
  arg3 = static_cast< qs::Convention >(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "equivalent_rate" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "equivalent_rate" "', argument " "5"" of type '" "qs::Convention""'");
  } 
  arg5 = static_cast< qs::Convention >(val5);
  ecode6 = SWIG_AsVal_int(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "equivalent_rate" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = qs::equivalent_rate((qs::Maturity const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_equivalent_rate__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::Maturity *arg1 = 0 ;
  double arg2 ;
  qs::Convention arg3 ;
  int arg4 ;
  qs::Convention arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "equivalent_rate" "', argument " "1"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "equivalent_rate" "', argument " "1"" of type '" "qs::Maturity const &""'"); 
  }
  arg1 = reinterpret_cast< qs::Maturity * >(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "equivalent_rate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "equivalent_rate" "', argument " "3"" of type '" "qs::Convention""'");
  } 
  arg3 = static_cast< qs::Convention >(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "equivalent_rate" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "equivalent_rate" "', argument " "5"" of type '" "qs::Convention""'");
  } 
  arg5 = static_cast< qs::Convention >(val5);
  result = qs::equivalent_rate((qs::Maturity const &)*arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_equivalent_rate__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::Maturity *arg1 = 0 ;
  double arg2 ;
  qs::Convention arg3 ;
  int arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "equivalent_rate" "', argument " "1"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "equivalent_rate" "', argument " "1"" of type '" "qs::Maturity const &""'"); 
  }
  arg1 = reinterpret_cast< qs::Maturity * >(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "equivalent_rate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "equivalent_rate" "', argument " "3"" of type '" "qs::Convention""'");
  } 
  arg3 = static_cast< qs::Convention >(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "equivalent_rate" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = qs::equivalent_rate((qs::Maturity const &)*arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_equivalent_rate__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  qs::Convention arg2 ;
  int arg3 ;
  qs::Convention arg4 ;
  int arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "equivalent_rate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "equivalent_rate" "', argument " "2"" of type '" "qs::Convention""'");
  } 
  arg2 = static_cast< qs::Convention >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "equivalent_rate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "equivalent_rate" "', argument " "4"" of type '" "qs::Convention""'");
  } 
  arg4 = static_cast< qs::Convention >(val4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "equivalent_rate" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = qs::equivalent_rate(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_equivalent_rate__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  qs::Convention arg2 ;
  int arg3 ;
  qs::Convention arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "equivalent_rate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "equivalent_rate" "', argument " "2"" of type '" "qs::Convention""'");
  } 
  arg2 = static_cast< qs::Convention >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "equivalent_rate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "equivalent_rate" "', argument " "4"" of type '" "qs::Convention""'");
  } 
  arg4 = static_cast< qs::Convention >(val4);
  result = qs::equivalent_rate(arg1,arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_equivalent_rate__SWIG_5(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  qs::Convention arg2 ;
  int arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "equivalent_rate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "equivalent_rate" "', argument " "2"" of type '" "qs::Convention""'");
  } 
  arg2 = static_cast< qs::Convention >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "equivalent_rate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = qs::equivalent_rate(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_equivalent_rate__SWIG_6(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  int arg2 ;
  int arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "equivalent_rate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "equivalent_rate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "equivalent_rate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = qs::equivalent_rate(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_equivalent_rate__SWIG_7(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  int arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "equivalent_rate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "equivalent_rate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = qs::equivalent_rate(arg1,arg2);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_qs__wrap_equivalent_rate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_equivalent_rate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_equivalent_rate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_equivalent_rate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_equivalent_rate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_equivalent_rate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_equivalent_rate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_equivalent_rate__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_equivalent_rate__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_equivalent_rate__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_equivalent_rate__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_equivalent_rate__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_equivalent_rate__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_equivalent_rate__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_equivalent_rate__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_equivalent_rate__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_equivalent_rate__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function equivalent_rate.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_maturity_to_zero(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  qs::InterestRate *arg2 = 0 ;
  qs::Maturity *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  double result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_maturity_to_zero.");
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "maturity_to_zero" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maturity_to_zero" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maturity_to_zero" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "maturity_to_zero" "', argument " "3"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maturity_to_zero" "', argument " "3"" of type '" "qs::Maturity const &""'"); 
  }
  arg3 = reinterpret_cast< qs::Maturity * >(argp3);
  result = (double)qs::maturity_to_zero(arg1,(qs::InterestRate const &)*arg2,(qs::Maturity const &)*arg3);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_zero_to_maturity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  qs::InterestRate *arg2 = 0 ;
  qs::Maturity *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  double result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_zero_to_maturity.");
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "zero_to_maturity" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "zero_to_maturity" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "zero_to_maturity" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "zero_to_maturity" "', argument " "3"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "zero_to_maturity" "', argument " "3"" of type '" "qs::Maturity const &""'"); 
  }
  arg3 = reinterpret_cast< qs::Maturity * >(argp3);
  result = (double)qs::zero_to_maturity(arg1,(qs::InterestRate const &)*arg2,(qs::Maturity const &)*arg3);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_maturity_to_maturity__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  qs::InterestRate *arg2 = 0 ;
  qs::Maturity *arg3 = 0 ;
  qs::Maturity *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  double result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "maturity_to_maturity" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maturity_to_maturity" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maturity_to_maturity" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "maturity_to_maturity" "', argument " "3"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maturity_to_maturity" "', argument " "3"" of type '" "qs::Maturity const &""'"); 
  }
  arg3 = reinterpret_cast< qs::Maturity * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "maturity_to_maturity" "', argument " "4"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maturity_to_maturity" "', argument " "4"" of type '" "qs::Maturity const &""'"); 
  }
  arg4 = reinterpret_cast< qs::Maturity * >(argp4);
  result = (double)qs::maturity_to_maturity(arg1,(qs::InterestRate const &)*arg2,(qs::Maturity const &)*arg3,(qs::Maturity const &)*arg4);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_maturity_to_maturity__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  qs::InterestRate *arg2 = 0 ;
  qs::InterestRate *arg3 = 0 ;
  qs::Maturity *arg4 = 0 ;
  qs::Maturity *arg5 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  double result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "maturity_to_maturity" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maturity_to_maturity" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maturity_to_maturity" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "maturity_to_maturity" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maturity_to_maturity" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  arg3 = reinterpret_cast< qs::InterestRate * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "maturity_to_maturity" "', argument " "4"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maturity_to_maturity" "', argument " "4"" of type '" "qs::Maturity const &""'"); 
  }
  arg4 = reinterpret_cast< qs::Maturity * >(argp4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "maturity_to_maturity" "', argument " "5"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maturity_to_maturity" "', argument " "5"" of type '" "qs::Maturity const &""'"); 
  }
  arg5 = reinterpret_cast< qs::Maturity * >(argp5);
  result = (double)qs::maturity_to_maturity(arg1,(qs::InterestRate const &)*arg2,(qs::InterestRate const &)*arg3,(qs::Maturity const &)*arg4,(qs::Maturity const &)*arg5);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_qs__wrap_maturity_to_maturity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_maturity_to_maturity__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_maturity_to_maturity__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_maturity_to_maturity__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_maturity_to_maturity__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function maturity_to_maturity.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_to_present_value__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  qs::InterestRate *arg2 = 0 ;
  qs::Schedule *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SwigValueWrapper< qs::StartCashFlow > result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "to_present_value" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "to_present_value" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "to_present_value" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "to_present_value" "', argument " "3"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "to_present_value" "', argument " "3"" of type '" "qs::Schedule const &""'"); 
  }
  arg3 = reinterpret_cast< qs::Schedule * >(argp3);
  result = qs::to_present_value(arg1,(qs::InterestRate const &)*arg2,(qs::Schedule const &)*arg3);
  jsresult = SWIG_NewPointerObj((new qs::StartCashFlow(static_cast< const qs::StartCashFlow& >(result))), SWIGTYPE_p_qs__StartCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_to_future_value__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  qs::InterestRate *arg2 = 0 ;
  qs::Schedule *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SwigValueWrapper< qs::EndCashFlow > result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "to_future_value" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "to_future_value" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "to_future_value" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "to_future_value" "', argument " "3"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "to_future_value" "', argument " "3"" of type '" "qs::Schedule const &""'"); 
  }
  arg3 = reinterpret_cast< qs::Schedule * >(argp3);
  result = qs::to_future_value(arg1,(qs::InterestRate const &)*arg2,(qs::Schedule const &)*arg3);
  jsresult = SWIG_NewPointerObj((new qs::EndCashFlow(static_cast< const qs::EndCashFlow& >(result))), SWIGTYPE_p_qs__EndCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_to_present_value__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::EndCashFlow *arg1 = 0 ;
  qs::TermStructure *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< qs::StartCashFlow > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__EndCashFlow,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "to_present_value" "', argument " "1"" of type '" "qs::EndCashFlow const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "to_present_value" "', argument " "1"" of type '" "qs::EndCashFlow const &""'"); 
  }
  arg1 = reinterpret_cast< qs::EndCashFlow * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__TermStructure,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "to_present_value" "', argument " "2"" of type '" "qs::TermStructure const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "to_present_value" "', argument " "2"" of type '" "qs::TermStructure const &""'"); 
  }
  arg2 = reinterpret_cast< qs::TermStructure * >(argp2);
  result = qs::to_present_value((qs::EndCashFlow const &)*arg1,(qs::TermStructure const &)*arg2);
  jsresult = SWIG_NewPointerObj((new qs::StartCashFlow(static_cast< const qs::StartCashFlow& >(result))), SWIGTYPE_p_qs__StartCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_qs__wrap_to_present_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_to_present_value__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_to_present_value__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_to_present_value__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_to_present_value__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function to_present_value.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_to_future_value__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::StartCashFlow *arg1 = 0 ;
  qs::TermStructure *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< qs::EndCashFlow > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__StartCashFlow,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "to_future_value" "', argument " "1"" of type '" "qs::StartCashFlow const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "to_future_value" "', argument " "1"" of type '" "qs::StartCashFlow const &""'"); 
  }
  arg1 = reinterpret_cast< qs::StartCashFlow * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__TermStructure,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "to_future_value" "', argument " "2"" of type '" "qs::TermStructure const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "to_future_value" "', argument " "2"" of type '" "qs::TermStructure const &""'"); 
  }
  arg2 = reinterpret_cast< qs::TermStructure * >(argp2);
  result = qs::to_future_value((qs::StartCashFlow const &)*arg1,(qs::TermStructure const &)*arg2);
  jsresult = SWIG_NewPointerObj((new qs::EndCashFlow(static_cast< const qs::EndCashFlow& >(result))), SWIGTYPE_p_qs__EndCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_qs__wrap_to_future_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_to_future_value__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_to_future_value__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_to_future_value__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_to_future_value__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function to_future_value.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_npv_from_coupon(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  qs::InterestRate *arg2 = 0 ;
  qs::Schedule *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SwigValueWrapper< qs::StartCashFlow > result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_npv_from_coupon.");
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "npv_from_coupon" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "npv_from_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "npv_from_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "npv_from_coupon" "', argument " "3"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "npv_from_coupon" "', argument " "3"" of type '" "qs::Schedule const &""'"); 
  }
  arg3 = reinterpret_cast< qs::Schedule * >(argp3);
  result = qs::npv_from_coupon(arg1,(qs::InterestRate const &)*arg2,(qs::Schedule const &)*arg3);
  jsresult = SWIG_NewPointerObj((new qs::StartCashFlow(static_cast< const qs::StartCashFlow& >(result))), SWIGTYPE_p_qs__StartCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_coupon_from_npv__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  qs::InterestRate *arg2 = 0 ;
  qs::Schedule *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SwigValueWrapper< qs::CouponCashFlow > result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "coupon_from_npv" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "coupon_from_npv" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "coupon_from_npv" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "coupon_from_npv" "', argument " "3"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "coupon_from_npv" "', argument " "3"" of type '" "qs::Schedule const &""'"); 
  }
  arg3 = reinterpret_cast< qs::Schedule * >(argp3);
  result = qs::coupon_from_npv(arg1,(qs::InterestRate const &)*arg2,(qs::Schedule const &)*arg3);
  jsresult = SWIG_NewPointerObj((new qs::CouponCashFlow(static_cast< const qs::CouponCashFlow& >(result))), SWIGTYPE_p_qs__CouponCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_coupon_from_npv__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  qs::TermStructure *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< qs::CouponCashFlow > result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "coupon_from_npv" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__TermStructure,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "coupon_from_npv" "', argument " "2"" of type '" "qs::TermStructure const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "coupon_from_npv" "', argument " "2"" of type '" "qs::TermStructure const &""'"); 
  }
  arg2 = reinterpret_cast< qs::TermStructure * >(argp2);
  result = qs::coupon_from_npv(arg1,(qs::TermStructure const &)*arg2);
  jsresult = SWIG_NewPointerObj((new qs::CouponCashFlow(static_cast< const qs::CouponCashFlow& >(result))), SWIGTYPE_p_qs__CouponCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_qs__wrap_coupon_from_npv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_coupon_from_npv__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_coupon_from_npv__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_coupon_from_npv__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_coupon_from_npv__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function coupon_from_npv.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_coupon_from_fv__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  qs::InterestRate *arg2 = 0 ;
  qs::Schedule *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SwigValueWrapper< qs::CouponCashFlow > result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "coupon_from_fv" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "coupon_from_fv" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "coupon_from_fv" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "coupon_from_fv" "', argument " "3"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "coupon_from_fv" "', argument " "3"" of type '" "qs::Schedule const &""'"); 
  }
  arg3 = reinterpret_cast< qs::Schedule * >(argp3);
  result = qs::coupon_from_fv(arg1,(qs::InterestRate const &)*arg2,(qs::Schedule const &)*arg3);
  jsresult = SWIG_NewPointerObj((new qs::CouponCashFlow(static_cast< const qs::CouponCashFlow& >(result))), SWIGTYPE_p_qs__CouponCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_coupon_from_fv__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  qs::TermStructure *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< qs::CouponCashFlow > result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "coupon_from_fv" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__TermStructure,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "coupon_from_fv" "', argument " "2"" of type '" "qs::TermStructure const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "coupon_from_fv" "', argument " "2"" of type '" "qs::TermStructure const &""'"); 
  }
  arg2 = reinterpret_cast< qs::TermStructure * >(argp2);
  result = qs::coupon_from_fv(arg1,(qs::TermStructure const &)*arg2);
  jsresult = SWIG_NewPointerObj((new qs::CouponCashFlow(static_cast< const qs::CouponCashFlow& >(result))), SWIGTYPE_p_qs__CouponCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_qs__wrap_coupon_from_fv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_coupon_from_fv__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_coupon_from_fv__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_coupon_from_fv__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_coupon_from_fv__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function coupon_from_fv.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_fv_from_coupon(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  qs::InterestRate *arg2 = 0 ;
  qs::Schedule *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SwigValueWrapper< qs::EndCashFlow > result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_fv_from_coupon.");
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fv_from_coupon" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fv_from_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fv_from_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fv_from_coupon" "', argument " "3"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fv_from_coupon" "', argument " "3"" of type '" "qs::Schedule const &""'"); 
  }
  arg3 = reinterpret_cast< qs::Schedule * >(argp3);
  result = qs::fv_from_coupon(arg1,(qs::InterestRate const &)*arg2,(qs::Schedule const &)*arg3);
  jsresult = SWIG_NewPointerObj((new qs::EndCashFlow(static_cast< const qs::EndCashFlow& >(result))), SWIGTYPE_p_qs__EndCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_npv_from_growth_coupon__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  qs::InterestRate *arg2 = 0 ;
  qs::InterestRate *arg3 = 0 ;
  qs::Schedule *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  SwigValueWrapper< qs::StartCashFlow > result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "npv_from_growth_coupon" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "npv_from_growth_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "npv_from_growth_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "npv_from_growth_coupon" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "npv_from_growth_coupon" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  arg3 = reinterpret_cast< qs::InterestRate * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "npv_from_growth_coupon" "', argument " "4"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "npv_from_growth_coupon" "', argument " "4"" of type '" "qs::Schedule const &""'"); 
  }
  arg4 = reinterpret_cast< qs::Schedule * >(argp4);
  result = qs::npv_from_growth_coupon(arg1,(qs::InterestRate const &)*arg2,(qs::InterestRate const &)*arg3,(qs::Schedule const &)*arg4);
  jsresult = SWIG_NewPointerObj((new qs::StartCashFlow(static_cast< const qs::StartCashFlow& >(result))), SWIGTYPE_p_qs__StartCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_fv_from_growth_coupon__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  qs::InterestRate *arg2 = 0 ;
  qs::InterestRate *arg3 = 0 ;
  qs::Schedule *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  SwigValueWrapper< qs::EndCashFlow > result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fv_from_growth_coupon" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fv_from_growth_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fv_from_growth_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fv_from_growth_coupon" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fv_from_growth_coupon" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  arg3 = reinterpret_cast< qs::InterestRate * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fv_from_growth_coupon" "', argument " "4"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fv_from_growth_coupon" "', argument " "4"" of type '" "qs::Schedule const &""'"); 
  }
  arg4 = reinterpret_cast< qs::Schedule * >(argp4);
  result = qs::fv_from_growth_coupon(arg1,(qs::InterestRate const &)*arg2,(qs::InterestRate const &)*arg3,(qs::Schedule const &)*arg4);
  jsresult = SWIG_NewPointerObj((new qs::EndCashFlow(static_cast< const qs::EndCashFlow& >(result))), SWIGTYPE_p_qs__EndCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_coupon_from_growth_coupon__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  qs::InterestRate *arg2 = 0 ;
  qs::InterestRate *arg3 = 0 ;
  qs::Schedule *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  SwigValueWrapper< qs::CouponCashFlow > result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "coupon_from_growth_coupon" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "coupon_from_growth_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "coupon_from_growth_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "coupon_from_growth_coupon" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "coupon_from_growth_coupon" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  arg3 = reinterpret_cast< qs::InterestRate * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "coupon_from_growth_coupon" "', argument " "4"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "coupon_from_growth_coupon" "', argument " "4"" of type '" "qs::Schedule const &""'"); 
  }
  arg4 = reinterpret_cast< qs::Schedule * >(argp4);
  result = qs::coupon_from_growth_coupon(arg1,(qs::InterestRate const &)*arg2,(qs::InterestRate const &)*arg3,(qs::Schedule const &)*arg4);
  jsresult = SWIG_NewPointerObj((new qs::CouponCashFlow(static_cast< const qs::CouponCashFlow& >(result))), SWIGTYPE_p_qs__CouponCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_npv_from_growth_coupon__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  qs::InterestRate *arg2 = 0 ;
  qs::TermStructure *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SwigValueWrapper< qs::StartCashFlow > result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "npv_from_growth_coupon" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "npv_from_growth_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "npv_from_growth_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__TermStructure,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "npv_from_growth_coupon" "', argument " "3"" of type '" "qs::TermStructure const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "npv_from_growth_coupon" "', argument " "3"" of type '" "qs::TermStructure const &""'"); 
  }
  arg3 = reinterpret_cast< qs::TermStructure * >(argp3);
  result = qs::npv_from_growth_coupon(arg1,(qs::InterestRate const &)*arg2,(qs::TermStructure const &)*arg3);
  jsresult = SWIG_NewPointerObj((new qs::StartCashFlow(static_cast< const qs::StartCashFlow& >(result))), SWIGTYPE_p_qs__StartCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_qs__wrap_npv_from_growth_coupon(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_npv_from_growth_coupon__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_npv_from_growth_coupon__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_npv_from_growth_coupon__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_npv_from_growth_coupon__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function npv_from_growth_coupon.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_fv_from_growth_coupon__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  qs::InterestRate *arg2 = 0 ;
  qs::TermStructure *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SwigValueWrapper< qs::EndCashFlow > result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fv_from_growth_coupon" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fv_from_growth_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fv_from_growth_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__TermStructure,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fv_from_growth_coupon" "', argument " "3"" of type '" "qs::TermStructure const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fv_from_growth_coupon" "', argument " "3"" of type '" "qs::TermStructure const &""'"); 
  }
  arg3 = reinterpret_cast< qs::TermStructure * >(argp3);
  result = qs::fv_from_growth_coupon(arg1,(qs::InterestRate const &)*arg2,(qs::TermStructure const &)*arg3);
  jsresult = SWIG_NewPointerObj((new qs::EndCashFlow(static_cast< const qs::EndCashFlow& >(result))), SWIGTYPE_p_qs__EndCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_qs__wrap_fv_from_growth_coupon(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_fv_from_growth_coupon__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_fv_from_growth_coupon__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_fv_from_growth_coupon__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_fv_from_growth_coupon__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function fv_from_growth_coupon.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_coupon_from_growth_coupon__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  qs::InterestRate *arg2 = 0 ;
  qs::TermStructure *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SwigValueWrapper< qs::CouponCashFlow > result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "coupon_from_growth_coupon" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "coupon_from_growth_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "coupon_from_growth_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__TermStructure,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "coupon_from_growth_coupon" "', argument " "3"" of type '" "qs::TermStructure const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "coupon_from_growth_coupon" "', argument " "3"" of type '" "qs::TermStructure const &""'"); 
  }
  arg3 = reinterpret_cast< qs::TermStructure * >(argp3);
  result = qs::coupon_from_growth_coupon(arg1,(qs::InterestRate const &)*arg2,(qs::TermStructure const &)*arg3);
  jsresult = SWIG_NewPointerObj((new qs::CouponCashFlow(static_cast< const qs::CouponCashFlow& >(result))), SWIGTYPE_p_qs__CouponCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_qs__wrap_coupon_from_growth_coupon(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_coupon_from_growth_coupon__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_coupon_from_growth_coupon__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_coupon_from_growth_coupon__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_coupon_from_growth_coupon__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function coupon_from_growth_coupon.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_compute_irr__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< double > *arg1 = 0 ;
  qs::Convention arg2 ;
  int arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compute_irr" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compute_irr" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "compute_irr" "', argument " "2"" of type '" "qs::Convention""'");
  } 
  arg2 = static_cast< qs::Convention >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "compute_irr" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = qs::compute_irr((std::vector< double > const &)*arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_compute_irr__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< double > *arg1 = 0 ;
  qs::Convention arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compute_irr" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compute_irr" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "compute_irr" "', argument " "2"" of type '" "qs::Convention""'");
  } 
  arg2 = static_cast< qs::Convention >(val2);
  result = qs::compute_irr((std::vector< double > const &)*arg1,arg2);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_compute_irr__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< double > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compute_irr" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compute_irr" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = qs::compute_irr((std::vector< double > const &)*arg1);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_qs__wrap_compute_irr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_compute_irr__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_compute_irr__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_compute_irr__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_compute_irr__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_compute_irr__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_compute_irr__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function compute_irr.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_classic_npv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  qs::InterestRate *arg3 = 0 ;
  qs::Schedule *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  double result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_classic_npv.");
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "classic_npv" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "classic_npv" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "classic_npv" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "classic_npv" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  arg3 = reinterpret_cast< qs::InterestRate * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "classic_npv" "', argument " "4"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "classic_npv" "', argument " "4"" of type '" "qs::Schedule const &""'"); 
  }
  arg4 = reinterpret_cast< qs::Schedule * >(argp4);
  result = (double)qs::classic_npv(arg1,arg2,(qs::InterestRate const &)*arg3,(qs::Schedule const &)*arg4);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bond_npv__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  qs::InterestRate *arg3 = 0 ;
  qs::Schedule *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  double result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "bond_npv" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bond_npv" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bond_npv" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bond_npv" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  arg3 = reinterpret_cast< qs::InterestRate * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "bond_npv" "', argument " "4"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bond_npv" "', argument " "4"" of type '" "qs::Schedule const &""'"); 
  }
  arg4 = reinterpret_cast< qs::Schedule * >(argp4);
  result = (double)qs::bond_npv(arg1,arg2,(qs::InterestRate const &)*arg3,(qs::Schedule const &)*arg4);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bond_npv__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  qs::TermStructure *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  double result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "bond_npv" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bond_npv" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__TermStructure,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bond_npv" "', argument " "3"" of type '" "qs::TermStructure const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bond_npv" "', argument " "3"" of type '" "qs::TermStructure const &""'"); 
  }
  arg3 = reinterpret_cast< qs::TermStructure * >(argp3);
  result = (double)qs::bond_npv(arg1,arg2,(qs::TermStructure const &)*arg3);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_qs__wrap_bond_npv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_bond_npv__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_bond_npv__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_bond_npv__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_bond_npv__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function bond_npv.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_stock_npv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  qs::InterestRate *arg3 = 0 ;
  qs::Schedule *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  double result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_stock_npv.");
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "stock_npv" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "stock_npv" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "stock_npv" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "stock_npv" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  arg3 = reinterpret_cast< qs::InterestRate * >(argp3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "stock_npv" "', argument " "4"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "stock_npv" "', argument " "4"" of type '" "qs::Schedule const &""'"); 
  }
  arg4 = reinterpret_cast< qs::Schedule * >(argp4);
  result = (double)qs::stock_npv(arg1,arg2,(qs::InterestRate const &)*arg3,(qs::Schedule const &)*arg4);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_inverse_lerp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_inverse_lerp.");
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inverse_lerp" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inverse_lerp" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "inverse_lerp" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (double)qs::inverse_lerp(arg1,arg2,arg3);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lerp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lerp.");
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "lerp" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lerp" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "lerp" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (double)qs::lerp(arg1,arg2,arg3);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Maturity__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  qs::Maturity *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Maturity__SWIG_0.");
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Maturity" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (qs::Maturity *)new qs::Maturity(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__Maturity, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Maturity__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  date::year_month_day *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  qs::Maturity *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Maturity__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_date__year_month_day,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Maturity" "', argument " "1"" of type '" "date::year_month_day const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Maturity" "', argument " "1"" of type '" "date::year_month_day const &""'"); 
  }
  arg1 = reinterpret_cast< date::year_month_day * >(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Maturity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (qs::Maturity *)new qs::Maturity((date::year_month_day const &)*arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__Maturity, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Maturity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Maturity__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Maturity__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Maturity__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Maturity__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Maturity");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Maturity_to(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::Maturity *arg1 = (qs::Maturity *) 0 ;
  qs::Maturity *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< qs::ForwardPeriod > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Maturity_to.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__Maturity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Maturity_to" "', argument " "1"" of type '" "qs::Maturity const *""'"); 
  }
  arg1 = reinterpret_cast< qs::Maturity * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Maturity_to" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Maturity_to" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  result = ((qs::Maturity const *)arg1)->to((qs::Maturity const &)*arg2);
  jsresult = SWIG_NewPointerObj((new qs::ForwardPeriod(static_cast< const qs::ForwardPeriod& >(result))), SWIGTYPE_p_qs__ForwardPeriod, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Maturity_get_discount_factor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::Maturity *arg1 = (qs::Maturity *) 0 ;
  qs::InterestRate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< qs::DiscountFactor > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Maturity_get_discount_factor.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__Maturity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Maturity_get_discount_factor" "', argument " "1"" of type '" "qs::Maturity const *""'"); 
  }
  arg1 = reinterpret_cast< qs::Maturity * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Maturity_get_discount_factor" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Maturity_get_discount_factor" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  result = ((qs::Maturity const *)arg1)->get_discount_factor((qs::InterestRate const &)*arg2);
  jsresult = SWIG_NewPointerObj((new qs::DiscountFactor(static_cast< const qs::DiscountFactor& >(result))), SWIGTYPE_p_qs__DiscountFactor, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Maturity_has_pillar_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Maturity_has_pillar_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    qs::Maturity *arg1 = (qs::Maturity *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__Maturity, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Maturity_has_pillar_set" "', argument " "1"" of type '" "qs::Maturity *""'"); 
    }
    arg1 = reinterpret_cast< qs::Maturity * >(argp1);
    ecode2 = SWIG_AsVal_bool(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Maturity_has_pillar_set" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (arg1) (arg1)->has_pillar = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Maturity_has_pillar_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Maturity_has_pillar_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    qs::Maturity *arg1 = (qs::Maturity *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__Maturity, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Maturity_has_pillar_get" "', argument " "1"" of type '" "qs::Maturity *""'"); 
    }
    arg1 = reinterpret_cast< qs::Maturity * >(argp1);
    result = (bool) ((arg1)->has_pillar);
    jsresult = SWIG_From_bool(static_cast< bool >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Maturity_pillar_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Maturity_pillar_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    qs::Maturity *arg1 = (qs::Maturity *) 0 ;
    date::year_month_day arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__Maturity, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Maturity_pillar_set" "', argument " "1"" of type '" "qs::Maturity *""'"); 
    }
    arg1 = reinterpret_cast< qs::Maturity * >(argp1);
    {
      res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_date__year_month_day,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Maturity_pillar_set" "', argument " "2"" of type '" "date::year_month_day""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Maturity_pillar_set" "', argument " "2"" of type '" "date::year_month_day""'");
      } else {
        arg2 = *(reinterpret_cast< date::year_month_day * >(argp2));
      }
    }
    if (arg1) (arg1)->pillar = arg2;
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Maturity_pillar_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Maturity_pillar_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    qs::Maturity *arg1 = (qs::Maturity *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    date::year_month_day result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__Maturity, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Maturity_pillar_get" "', argument " "1"" of type '" "qs::Maturity *""'"); 
    }
    arg1 = reinterpret_cast< qs::Maturity * >(argp1);
    result =  ((arg1)->pillar);
    jsresult = SWIG_NewPointerObj((new date::year_month_day(static_cast< const date::year_month_day& >(result))), SWIGTYPE_p_date__year_month_day, SWIG_POINTER_OWN |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Maturity_value_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Maturity_value_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    qs::Maturity *arg1 = (qs::Maturity *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__Maturity, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Maturity_value_set" "', argument " "1"" of type '" "qs::Maturity *""'"); 
    }
    arg1 = reinterpret_cast< qs::Maturity * >(argp1);
    ecode2 = SWIG_AsVal_double(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Maturity_value_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (arg1) (arg1)->value = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Maturity_value_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Maturity_value_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    qs::Maturity *arg1 = (qs::Maturity *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__Maturity, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Maturity_value_get" "', argument " "1"" of type '" "qs::Maturity *""'"); 
    }
    arg1 = reinterpret_cast< qs::Maturity * >(argp1);
    result = (double) ((arg1)->value);
    jsresult = SWIG_From_double(static_cast< double >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Maturity_ZERO_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Maturity_ZERO_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    qs::Maturity *result = 0 ;
    
    result = (qs::Maturity *)&qs::Maturity::ZERO;
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qs__Maturity, 0 |  0 );
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Maturity_ONE_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Maturity_ONE_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    qs::Maturity *result = 0 ;
    
    result = (qs::Maturity *)&qs::Maturity::ONE;
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qs__Maturity, 0 |  0 );
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Maturity(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Maturity(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Maturity(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_Maturity(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_Maturity(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            qs::Maturity * arg1 = (qs::Maturity *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_on_capital__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  qs::Maturity *arg3 = 0 ;
  qs::Convention arg4 ;
  int arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "on_capital" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "on_capital" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "on_capital" "', argument " "3"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "on_capital" "', argument " "3"" of type '" "qs::Maturity const &""'"); 
  }
  arg3 = reinterpret_cast< qs::Maturity * >(argp3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "on_capital" "', argument " "4"" of type '" "qs::Convention""'");
  } 
  arg4 = static_cast< qs::Convention >(val4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "on_capital" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = qs::on_capital(arg1,arg2,(qs::Maturity const &)*arg3,arg4,arg5);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_on_capital__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  qs::Maturity *arg3 = 0 ;
  qs::Convention arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "on_capital" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "on_capital" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "on_capital" "', argument " "3"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "on_capital" "', argument " "3"" of type '" "qs::Maturity const &""'"); 
  }
  arg3 = reinterpret_cast< qs::Maturity * >(argp3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "on_capital" "', argument " "4"" of type '" "qs::Convention""'");
  } 
  arg4 = static_cast< qs::Convention >(val4);
  result = qs::on_capital(arg1,arg2,(qs::Maturity const &)*arg3,arg4);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_on_capital__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  qs::Maturity *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "on_capital" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "on_capital" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "on_capital" "', argument " "3"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "on_capital" "', argument " "3"" of type '" "qs::Maturity const &""'"); 
  }
  arg3 = reinterpret_cast< qs::Maturity * >(argp3);
  result = qs::on_capital(arg1,arg2,(qs::Maturity const &)*arg3);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_on_capital__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "on_capital" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "on_capital" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = qs::on_capital(arg1,arg2);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_qs__wrap_on_capital(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_on_capital__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_on_capital__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_on_capital__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_on_capital__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_on_capital__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_on_capital__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_on_capital__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_on_capital__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function on_capital.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_ForwardPeriod(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::Maturity *arg1 = 0 ;
  qs::Maturity *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  qs::ForwardPeriod *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ForwardPeriod.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ForwardPeriod" "', argument " "1"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ForwardPeriod" "', argument " "1"" of type '" "qs::Maturity const &""'"); 
  }
  arg1 = reinterpret_cast< qs::Maturity * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ForwardPeriod" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ForwardPeriod" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  result = (qs::ForwardPeriod *)new qs::ForwardPeriod((qs::Maturity const &)*arg1,(qs::Maturity const &)*arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__ForwardPeriod, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ForwardPeriod_duration(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::ForwardPeriod *arg1 = (qs::ForwardPeriod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ForwardPeriod_duration.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__ForwardPeriod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForwardPeriod_duration" "', argument " "1"" of type '" "qs::ForwardPeriod const *""'"); 
  }
  arg1 = reinterpret_cast< qs::ForwardPeriod * >(argp1);
  result = (double)((qs::ForwardPeriod const *)arg1)->duration();
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ForwardPeriod_inside(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::ForwardPeriod *arg1 = (qs::ForwardPeriod *) 0 ;
  qs::Maturity *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ForwardPeriod_inside.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__ForwardPeriod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForwardPeriod_inside" "', argument " "1"" of type '" "qs::ForwardPeriod const *""'"); 
  }
  arg1 = reinterpret_cast< qs::ForwardPeriod * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForwardPeriod_inside" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPeriod_inside" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  result = (bool)((qs::ForwardPeriod const *)arg1)->inside((qs::Maturity const &)*arg2);
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ForwardPeriod_discount_factor__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::ForwardPeriod *arg1 = (qs::ForwardPeriod *) 0 ;
  qs::InterestRate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< qs::DiscountFactor > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__ForwardPeriod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForwardPeriod_discount_factor" "', argument " "1"" of type '" "qs::ForwardPeriod const *""'"); 
  }
  arg1 = reinterpret_cast< qs::ForwardPeriod * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForwardPeriod_discount_factor" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPeriod_discount_factor" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  result = ((qs::ForwardPeriod const *)arg1)->discount_factor((qs::InterestRate const &)*arg2);
  jsresult = SWIG_NewPointerObj((new qs::DiscountFactor(static_cast< const qs::DiscountFactor& >(result))), SWIGTYPE_p_qs__DiscountFactor, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ForwardPeriod_discount_factor__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::ForwardPeriod *arg1 = (qs::ForwardPeriod *) 0 ;
  qs::InterestRate *arg2 = 0 ;
  qs::InterestRate *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SwigValueWrapper< qs::DiscountFactor > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__ForwardPeriod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForwardPeriod_discount_factor" "', argument " "1"" of type '" "qs::ForwardPeriod const *""'"); 
  }
  arg1 = reinterpret_cast< qs::ForwardPeriod * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForwardPeriod_discount_factor" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPeriod_discount_factor" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ForwardPeriod_discount_factor" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPeriod_discount_factor" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  arg3 = reinterpret_cast< qs::InterestRate * >(argp3);
  result = ((qs::ForwardPeriod const *)arg1)->discount_factor((qs::InterestRate const &)*arg2,(qs::InterestRate const &)*arg3);
  jsresult = SWIG_NewPointerObj((new qs::DiscountFactor(static_cast< const qs::DiscountFactor& >(result))), SWIGTYPE_p_qs__DiscountFactor, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ForwardPeriod__wrap_ForwardPeriod_discount_factor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ForwardPeriod_discount_factor__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ForwardPeriod_discount_factor__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ForwardPeriod_discount_factor__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ForwardPeriod_discount_factor__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function discount_factor.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ForwardPeriod_forward_rate__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::ForwardPeriod *arg1 = (qs::ForwardPeriod *) 0 ;
  qs::InterestRate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__ForwardPeriod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForwardPeriod_forward_rate" "', argument " "1"" of type '" "qs::ForwardPeriod const *""'"); 
  }
  arg1 = reinterpret_cast< qs::ForwardPeriod * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForwardPeriod_forward_rate" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPeriod_forward_rate" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  result = ((qs::ForwardPeriod const *)arg1)->forward_rate((qs::InterestRate const &)*arg2);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ForwardPeriod_forward_rate__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::ForwardPeriod *arg1 = (qs::ForwardPeriod *) 0 ;
  qs::InterestRate *arg2 = 0 ;
  qs::InterestRate *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__ForwardPeriod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForwardPeriod_forward_rate" "', argument " "1"" of type '" "qs::ForwardPeriod const *""'"); 
  }
  arg1 = reinterpret_cast< qs::ForwardPeriod * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForwardPeriod_forward_rate" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPeriod_forward_rate" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ForwardPeriod_forward_rate" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPeriod_forward_rate" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  arg3 = reinterpret_cast< qs::InterestRate * >(argp3);
  result = ((qs::ForwardPeriod const *)arg1)->forward_rate((qs::InterestRate const &)*arg2,(qs::InterestRate const &)*arg3);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ForwardPeriod__wrap_ForwardPeriod_forward_rate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ForwardPeriod_forward_rate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ForwardPeriod_forward_rate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_ForwardPeriod_forward_rate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_ForwardPeriod_forward_rate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function forward_rate.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ForwardPeriod_next_discount_factor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::ForwardPeriod *arg1 = (qs::ForwardPeriod *) 0 ;
  qs::InterestRate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< qs::DiscountFactor > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ForwardPeriod_next_discount_factor.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__ForwardPeriod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForwardPeriod_next_discount_factor" "', argument " "1"" of type '" "qs::ForwardPeriod const *""'"); 
  }
  arg1 = reinterpret_cast< qs::ForwardPeriod * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForwardPeriod_next_discount_factor" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPeriod_next_discount_factor" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  result = ((qs::ForwardPeriod const *)arg1)->next_discount_factor((qs::InterestRate const &)*arg2);
  jsresult = SWIG_NewPointerObj((new qs::DiscountFactor(static_cast< const qs::DiscountFactor& >(result))), SWIGTYPE_p_qs__DiscountFactor, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_ForwardPeriod_start_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_ForwardPeriod_start_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    qs::ForwardPeriod *arg1 = (qs::ForwardPeriod *) 0 ;
    qs::Maturity *arg2 = (qs::Maturity *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__ForwardPeriod, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForwardPeriod_start_set" "', argument " "1"" of type '" "qs::ForwardPeriod *""'"); 
    }
    arg1 = reinterpret_cast< qs::ForwardPeriod * >(argp1);
    res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_qs__Maturity, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForwardPeriod_start_set" "', argument " "2"" of type '" "qs::Maturity *""'"); 
    }
    arg2 = reinterpret_cast< qs::Maturity * >(argp2);
    if (arg1) (arg1)->start = *arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_ForwardPeriod_start_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_ForwardPeriod_start_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    qs::ForwardPeriod *arg1 = (qs::ForwardPeriod *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    qs::Maturity *result = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__ForwardPeriod, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForwardPeriod_start_get" "', argument " "1"" of type '" "qs::ForwardPeriod *""'"); 
    }
    arg1 = reinterpret_cast< qs::ForwardPeriod * >(argp1);
    result = (qs::Maturity *)& ((arg1)->start);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qs__Maturity, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_ForwardPeriod_end_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_ForwardPeriod_end_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    qs::ForwardPeriod *arg1 = (qs::ForwardPeriod *) 0 ;
    qs::Maturity *arg2 = (qs::Maturity *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__ForwardPeriod, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForwardPeriod_end_set" "', argument " "1"" of type '" "qs::ForwardPeriod *""'"); 
    }
    arg1 = reinterpret_cast< qs::ForwardPeriod * >(argp1);
    res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_qs__Maturity, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForwardPeriod_end_set" "', argument " "2"" of type '" "qs::Maturity *""'"); 
    }
    arg2 = reinterpret_cast< qs::Maturity * >(argp2);
    if (arg1) (arg1)->end = *arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_ForwardPeriod_end_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_ForwardPeriod_end_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    qs::ForwardPeriod *arg1 = (qs::ForwardPeriod *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    qs::Maturity *result = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__ForwardPeriod, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForwardPeriod_end_get" "', argument " "1"" of type '" "qs::ForwardPeriod *""'"); 
    }
    arg1 = reinterpret_cast< qs::ForwardPeriod * >(argp1);
    result = (qs::Maturity *)& ((arg1)->end);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qs__Maturity, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ForwardPeriod(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ForwardPeriod(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ForwardPeriod(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_ForwardPeriod(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_ForwardPeriod(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            qs::ForwardPeriod * arg1 = (qs::ForwardPeriod *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_ZeroPeriod(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::Maturity *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  qs::ZeroPeriod *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZeroPeriod.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ZeroPeriod" "', argument " "1"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ZeroPeriod" "', argument " "1"" of type '" "qs::Maturity const &""'"); 
  }
  arg1 = reinterpret_cast< qs::Maturity * >(argp1);
  result = (qs::ZeroPeriod *)new qs::ZeroPeriod((qs::Maturity const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__ZeroPeriod, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ZeroPeriod(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ZeroPeriod(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ZeroPeriod(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_ZeroPeriod(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_ZeroPeriod(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            qs::ZeroPeriod * arg1 = (qs::ZeroPeriod *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_Calendar(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::Calendar *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Calendar.");
  result = (qs::Calendar *)new qs::Calendar();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__Calendar, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Calendar(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Calendar(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Calendar(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_Calendar(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_Calendar(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            qs::Calendar * arg1 = (qs::Calendar *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_Schedule__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::Schedule *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Schedule__SWIG_0.");
  result = (qs::Schedule *)new qs::Schedule();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__Schedule, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Schedule__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  date::year_month_day *arg1 = 0 ;
  date::year_month_day *arg2 = 0 ;
  int arg3 ;
  qs::Unit arg4 ;
  qs::DayCountConvention arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  qs::Schedule *result;
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Schedule__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_date__year_month_day,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Schedule" "', argument " "1"" of type '" "date::year_month_day const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Schedule" "', argument " "1"" of type '" "date::year_month_day const &""'"); 
  }
  arg1 = reinterpret_cast< date::year_month_day * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_date__year_month_day,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Schedule" "', argument " "2"" of type '" "date::year_month_day const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Schedule" "', argument " "2"" of type '" "date::year_month_day const &""'"); 
  }
  arg2 = reinterpret_cast< date::year_month_day * >(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Schedule" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Schedule" "', argument " "4"" of type '" "qs::Unit""'");
  } 
  arg4 = static_cast< qs::Unit >(val4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Schedule" "', argument " "5"" of type '" "qs::DayCountConvention""'");
  } 
  arg5 = static_cast< qs::DayCountConvention >(val5);
  result = (qs::Schedule *)new qs::Schedule((date::year_month_day const &)*arg1,(date::year_month_day const &)*arg2,arg3,arg4,arg5);
  
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__Schedule, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Schedule__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  date::year_month_day *arg1 = 0 ;
  date::year_month_day *arg2 = 0 ;
  int arg3 ;
  qs::Unit arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  qs::Schedule *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Schedule__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_date__year_month_day,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Schedule" "', argument " "1"" of type '" "date::year_month_day const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Schedule" "', argument " "1"" of type '" "date::year_month_day const &""'"); 
  }
  arg1 = reinterpret_cast< date::year_month_day * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_date__year_month_day,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Schedule" "', argument " "2"" of type '" "date::year_month_day const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Schedule" "', argument " "2"" of type '" "date::year_month_day const &""'"); 
  }
  arg2 = reinterpret_cast< date::year_month_day * >(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Schedule" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Schedule" "', argument " "4"" of type '" "qs::Unit""'");
  } 
  arg4 = static_cast< qs::Unit >(val4);
  result = (qs::Schedule *)new qs::Schedule((date::year_month_day const &)*arg1,(date::year_month_day const &)*arg2,arg3,arg4);
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__Schedule, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Schedule__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  date::year_month_day *arg1 = 0 ;
  date::year_month_day *arg2 = 0 ;
  int arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  qs::Schedule *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Schedule__SWIG_3.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_date__year_month_day,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Schedule" "', argument " "1"" of type '" "date::year_month_day const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Schedule" "', argument " "1"" of type '" "date::year_month_day const &""'"); 
  }
  arg1 = reinterpret_cast< date::year_month_day * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_date__year_month_day,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Schedule" "', argument " "2"" of type '" "date::year_month_day const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Schedule" "', argument " "2"" of type '" "date::year_month_day const &""'"); 
  }
  arg2 = reinterpret_cast< date::year_month_day * >(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Schedule" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (qs::Schedule *)new qs::Schedule((date::year_month_day const &)*arg1,(date::year_month_day const &)*arg2,arg3);
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__Schedule, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Schedule__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  date::year_month_day *arg1 = 0 ;
  date::year_month_day *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  qs::Schedule *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Schedule__SWIG_4.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_date__year_month_day,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Schedule" "', argument " "1"" of type '" "date::year_month_day const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Schedule" "', argument " "1"" of type '" "date::year_month_day const &""'"); 
  }
  arg1 = reinterpret_cast< date::year_month_day * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_date__year_month_day,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Schedule" "', argument " "2"" of type '" "date::year_month_day const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Schedule" "', argument " "2"" of type '" "date::year_month_day const &""'"); 
  }
  arg2 = reinterpret_cast< date::year_month_day * >(argp2);
  result = (qs::Schedule *)new qs::Schedule((date::year_month_day const &)*arg1,(date::year_month_day const &)*arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__Schedule, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Schedule__SWIG_5(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  date::year_month_day *arg1 = 0 ;
  int arg2 ;
  qs::Unit arg3 ;
  int arg4 ;
  qs::Unit arg5 ;
  qs::DayCountConvention arg6 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  qs::Schedule *result;
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Schedule__SWIG_5.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_date__year_month_day,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Schedule" "', argument " "1"" of type '" "date::year_month_day const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Schedule" "', argument " "1"" of type '" "date::year_month_day const &""'"); 
  }
  arg1 = reinterpret_cast< date::year_month_day * >(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Schedule" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Schedule" "', argument " "3"" of type '" "qs::Unit""'");
  } 
  arg3 = static_cast< qs::Unit >(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Schedule" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Schedule" "', argument " "5"" of type '" "qs::Unit""'");
  } 
  arg5 = static_cast< qs::Unit >(val5);
  ecode6 = SWIG_AsVal_int(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Schedule" "', argument " "6"" of type '" "qs::DayCountConvention""'");
  } 
  arg6 = static_cast< qs::DayCountConvention >(val6);
  result = (qs::Schedule *)new qs::Schedule((date::year_month_day const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  
  
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__Schedule, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Schedule__SWIG_6(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  date::year_month_day *arg1 = 0 ;
  int arg2 ;
  qs::Unit arg3 ;
  int arg4 ;
  qs::Unit arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  qs::Schedule *result;
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Schedule__SWIG_6.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_date__year_month_day,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Schedule" "', argument " "1"" of type '" "date::year_month_day const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Schedule" "', argument " "1"" of type '" "date::year_month_day const &""'"); 
  }
  arg1 = reinterpret_cast< date::year_month_day * >(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Schedule" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Schedule" "', argument " "3"" of type '" "qs::Unit""'");
  } 
  arg3 = static_cast< qs::Unit >(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Schedule" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Schedule" "', argument " "5"" of type '" "qs::Unit""'");
  } 
  arg5 = static_cast< qs::Unit >(val5);
  result = (qs::Schedule *)new qs::Schedule((date::year_month_day const &)*arg1,arg2,arg3,arg4,arg5);
  
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__Schedule, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Schedule__SWIG_7(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  date::year_month_day *arg1 = 0 ;
  int arg2 ;
  qs::Unit arg3 ;
  int arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  qs::Schedule *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Schedule__SWIG_7.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_date__year_month_day,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Schedule" "', argument " "1"" of type '" "date::year_month_day const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Schedule" "', argument " "1"" of type '" "date::year_month_day const &""'"); 
  }
  arg1 = reinterpret_cast< date::year_month_day * >(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Schedule" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Schedule" "', argument " "3"" of type '" "qs::Unit""'");
  } 
  arg3 = static_cast< qs::Unit >(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Schedule" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (qs::Schedule *)new qs::Schedule((date::year_month_day const &)*arg1,arg2,arg3,arg4);
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__Schedule, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Schedule__SWIG_8(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  date::year_month_day *arg1 = 0 ;
  int arg2 ;
  qs::Unit arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  qs::Schedule *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Schedule__SWIG_8.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_date__year_month_day,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Schedule" "', argument " "1"" of type '" "date::year_month_day const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Schedule" "', argument " "1"" of type '" "date::year_month_day const &""'"); 
  }
  arg1 = reinterpret_cast< date::year_month_day * >(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Schedule" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Schedule" "', argument " "3"" of type '" "qs::Unit""'");
  } 
  arg3 = static_cast< qs::Unit >(val3);
  result = (qs::Schedule *)new qs::Schedule((date::year_month_day const &)*arg1,arg2,arg3);
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__Schedule, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Schedule__SWIG_9(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  date::year_month_day *arg1 = 0 ;
  int arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  qs::Schedule *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Schedule__SWIG_9.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_date__year_month_day,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Schedule" "', argument " "1"" of type '" "date::year_month_day const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Schedule" "', argument " "1"" of type '" "date::year_month_day const &""'"); 
  }
  arg1 = reinterpret_cast< date::year_month_day * >(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Schedule" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (qs::Schedule *)new qs::Schedule((date::year_month_day const &)*arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__Schedule, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Schedule__SWIG_10(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  qs::Unit arg2 ;
  int arg3 ;
  qs::Unit arg4 ;
  qs::DayCountConvention arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  qs::Schedule *result;
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Schedule__SWIG_10.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Schedule" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Schedule" "', argument " "2"" of type '" "qs::Unit""'");
  } 
  arg2 = static_cast< qs::Unit >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Schedule" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Schedule" "', argument " "4"" of type '" "qs::Unit""'");
  } 
  arg4 = static_cast< qs::Unit >(val4);
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Schedule" "', argument " "5"" of type '" "qs::DayCountConvention""'");
  } 
  arg5 = static_cast< qs::DayCountConvention >(val5);
  result = (qs::Schedule *)new qs::Schedule(arg1,arg2,arg3,arg4,arg5);
  
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__Schedule, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Schedule__SWIG_11(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  qs::Unit arg2 ;
  int arg3 ;
  qs::Unit arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  qs::Schedule *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Schedule__SWIG_11.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Schedule" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Schedule" "', argument " "2"" of type '" "qs::Unit""'");
  } 
  arg2 = static_cast< qs::Unit >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Schedule" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Schedule" "', argument " "4"" of type '" "qs::Unit""'");
  } 
  arg4 = static_cast< qs::Unit >(val4);
  result = (qs::Schedule *)new qs::Schedule(arg1,arg2,arg3,arg4);
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__Schedule, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Schedule__SWIG_12(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  qs::Unit arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  qs::Schedule *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Schedule__SWIG_12.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Schedule" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Schedule" "', argument " "2"" of type '" "qs::Unit""'");
  } 
  arg2 = static_cast< qs::Unit >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Schedule" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (qs::Schedule *)new qs::Schedule(arg1,arg2,arg3);
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__Schedule, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Schedule__SWIG_13(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  qs::Unit arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  qs::Schedule *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Schedule__SWIG_13.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Schedule" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Schedule" "', argument " "2"" of type '" "qs::Unit""'");
  } 
  arg2 = static_cast< qs::Unit >(val2);
  result = (qs::Schedule *)new qs::Schedule(arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__Schedule, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Schedule__SWIG_14(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  qs::Schedule *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Schedule__SWIG_14.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Schedule" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (qs::Schedule *)new qs::Schedule(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__Schedule, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Schedule__SWIG_15(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< qs::Maturity > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  qs::Schedule *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Schedule__SWIG_15.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_qs__Maturity_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Schedule" "', argument " "1"" of type '" "std::vector< qs::Maturity > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Schedule" "', argument " "1"" of type '" "std::vector< qs::Maturity > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< qs::Maturity > * >(argp1);
  result = (qs::Schedule *)new qs::Schedule((std::vector< qs::Maturity > const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__Schedule, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Schedule(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Schedule__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Schedule__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Schedule__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Schedule__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Schedule__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Schedule__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Schedule__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Schedule__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Schedule__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Schedule__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Schedule__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Schedule__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Schedule__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Schedule__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Schedule__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Schedule__SWIG_7(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Schedule__SWIG_8(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Schedule__SWIG_8(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Schedule__SWIG_9(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Schedule__SWIG_9(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Schedule__SWIG_10(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Schedule__SWIG_10(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Schedule__SWIG_11(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Schedule__SWIG_11(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Schedule__SWIG_12(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Schedule__SWIG_12(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Schedule__SWIG_13(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Schedule__SWIG_13(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Schedule__SWIG_14(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Schedule__SWIG_14(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Schedule__SWIG_15(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Schedule__SWIG_15(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Schedule");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Schedule_get_forward_periods(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::Schedule *arg1 = (qs::Schedule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< qs::ForwardPeriod > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Schedule_get_forward_periods.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__Schedule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Schedule_get_forward_periods" "', argument " "1"" of type '" "qs::Schedule const *""'"); 
  }
  arg1 = reinterpret_cast< qs::Schedule * >(argp1);
  result = (std::vector< qs::ForwardPeriod > *) &((qs::Schedule const *)arg1)->get_forward_periods();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_qs__ForwardPeriod_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Schedule_get_spot_periods(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::Schedule *arg1 = (qs::Schedule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< qs::ZeroPeriod > *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Schedule_get_spot_periods.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__Schedule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Schedule_get_spot_periods" "', argument " "1"" of type '" "qs::Schedule const *""'"); 
  }
  arg1 = reinterpret_cast< qs::Schedule * >(argp1);
  result = (std::vector< qs::ZeroPeriod > *) &((qs::Schedule const *)arg1)->get_spot_periods();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_qs__ZeroPeriod_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Schedule_get_first_period(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::Schedule *arg1 = (qs::Schedule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::ForwardPeriod > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Schedule_get_first_period.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__Schedule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Schedule_get_first_period" "', argument " "1"" of type '" "qs::Schedule const *""'"); 
  }
  arg1 = reinterpret_cast< qs::Schedule * >(argp1);
  result = ((qs::Schedule const *)arg1)->get_first_period();
  jsresult = SWIG_NewPointerObj((new qs::ForwardPeriod(static_cast< const qs::ForwardPeriod& >(result))), SWIGTYPE_p_qs__ForwardPeriod, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Schedule_get_last_period(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::Schedule *arg1 = (qs::Schedule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::ForwardPeriod > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Schedule_get_last_period.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__Schedule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Schedule_get_last_period" "', argument " "1"" of type '" "qs::Schedule const *""'"); 
  }
  arg1 = reinterpret_cast< qs::Schedule * >(argp1);
  result = ((qs::Schedule const *)arg1)->get_last_period();
  jsresult = SWIG_NewPointerObj((new qs::ForwardPeriod(static_cast< const qs::ForwardPeriod& >(result))), SWIGTYPE_p_qs__ForwardPeriod, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Schedule_spot_to_forward__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::Schedule *arg1 = (qs::Schedule *) 0 ;
  std::vector< qs::InterestRate > *arg2 = 0 ;
  qs::Convention arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  SwigValueWrapper< std::vector< qs::InterestRate > > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__Schedule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Schedule_spot_to_forward" "', argument " "1"" of type '" "qs::Schedule const *""'"); 
  }
  arg1 = reinterpret_cast< qs::Schedule * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_qs__InterestRate_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Schedule_spot_to_forward" "', argument " "2"" of type '" "std::vector< qs::InterestRate > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Schedule_spot_to_forward" "', argument " "2"" of type '" "std::vector< qs::InterestRate > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< qs::InterestRate > * >(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Schedule_spot_to_forward" "', argument " "3"" of type '" "qs::Convention""'");
  } 
  arg3 = static_cast< qs::Convention >(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Schedule_spot_to_forward" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = ((qs::Schedule const *)arg1)->spot_to_forward((std::vector< qs::InterestRate > const &)*arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new std::vector< qs::InterestRate >(static_cast< const std::vector< qs::InterestRate >& >(result))), SWIGTYPE_p_std__vectorT_qs__InterestRate_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Schedule_spot_to_forward__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::Schedule *arg1 = (qs::Schedule *) 0 ;
  std::vector< qs::InterestRate > *arg2 = 0 ;
  qs::Convention arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< std::vector< qs::InterestRate > > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__Schedule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Schedule_spot_to_forward" "', argument " "1"" of type '" "qs::Schedule const *""'"); 
  }
  arg1 = reinterpret_cast< qs::Schedule * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_qs__InterestRate_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Schedule_spot_to_forward" "', argument " "2"" of type '" "std::vector< qs::InterestRate > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Schedule_spot_to_forward" "', argument " "2"" of type '" "std::vector< qs::InterestRate > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< qs::InterestRate > * >(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Schedule_spot_to_forward" "', argument " "3"" of type '" "qs::Convention""'");
  } 
  arg3 = static_cast< qs::Convention >(val3);
  result = ((qs::Schedule const *)arg1)->spot_to_forward((std::vector< qs::InterestRate > const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj((new std::vector< qs::InterestRate >(static_cast< const std::vector< qs::InterestRate >& >(result))), SWIGTYPE_p_std__vectorT_qs__InterestRate_t, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Schedule_spot_to_forward__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::Schedule *arg1 = (qs::Schedule *) 0 ;
  std::vector< qs::InterestRate > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< std::vector< qs::InterestRate > > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__Schedule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Schedule_spot_to_forward" "', argument " "1"" of type '" "qs::Schedule const *""'"); 
  }
  arg1 = reinterpret_cast< qs::Schedule * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_qs__InterestRate_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Schedule_spot_to_forward" "', argument " "2"" of type '" "std::vector< qs::InterestRate > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Schedule_spot_to_forward" "', argument " "2"" of type '" "std::vector< qs::InterestRate > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< qs::InterestRate > * >(argp2);
  result = ((qs::Schedule const *)arg1)->spot_to_forward((std::vector< qs::InterestRate > const &)*arg2);
  jsresult = SWIG_NewPointerObj((new std::vector< qs::InterestRate >(static_cast< const std::vector< qs::InterestRate >& >(result))), SWIGTYPE_p_std__vectorT_qs__InterestRate_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Schedule__wrap_Schedule_spot_to_forward(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Schedule_spot_to_forward__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Schedule_spot_to_forward__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Schedule_spot_to_forward__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Schedule_spot_to_forward__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Schedule_spot_to_forward__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Schedule_spot_to_forward__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function spot_to_forward.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Schedule(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Schedule(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Schedule(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_Schedule(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_Schedule(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            qs::Schedule * arg1 = (qs::Schedule *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_DiscountFactor__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  qs::DiscountFactor *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_DiscountFactor__SWIG_0.");
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DiscountFactor" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (qs::DiscountFactor *)new qs::DiscountFactor(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__DiscountFactor, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_DiscountFactor__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::DiscountFactor *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  qs::DiscountFactor *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_DiscountFactor__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__DiscountFactor,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DiscountFactor" "', argument " "1"" of type '" "qs::DiscountFactor const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiscountFactor" "', argument " "1"" of type '" "qs::DiscountFactor const &""'"); 
  }
  arg1 = reinterpret_cast< qs::DiscountFactor * >(argp1);
  result = (qs::DiscountFactor *)new qs::DiscountFactor((qs::DiscountFactor const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__DiscountFactor, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_DiscountFactor__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::DiscountFactor *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qs::DiscountFactor *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_DiscountFactor__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__DiscountFactor,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DiscountFactor" "', argument " "1"" of type '" "qs::DiscountFactor &&""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiscountFactor" "', argument " "1"" of type '" "qs::DiscountFactor &&""'"); 
  }
  arg1 = reinterpret_cast< qs::DiscountFactor * >(argp1);
  result = (qs::DiscountFactor *)new qs::DiscountFactor((qs::DiscountFactor &&)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__DiscountFactor, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_DiscountFactor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_DiscountFactor__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_DiscountFactor__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_DiscountFactor__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_DiscountFactor__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_DiscountFactor__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_DiscountFactor__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_DiscountFactor");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_DiscountFactor_to_interest_rate__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::DiscountFactor *arg1 = (qs::DiscountFactor *) 0 ;
  qs::Maturity *arg2 = 0 ;
  qs::Convention arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__DiscountFactor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscountFactor_to_interest_rate" "', argument " "1"" of type '" "qs::DiscountFactor const *""'"); 
  }
  arg1 = reinterpret_cast< qs::DiscountFactor * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscountFactor_to_interest_rate" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscountFactor_to_interest_rate" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DiscountFactor_to_interest_rate" "', argument " "3"" of type '" "qs::Convention""'");
  } 
  arg3 = static_cast< qs::Convention >(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DiscountFactor_to_interest_rate" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = ((qs::DiscountFactor const *)arg1)->to_interest_rate((qs::Maturity const &)*arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_DiscountFactor_to_interest_rate__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::DiscountFactor *arg1 = (qs::DiscountFactor *) 0 ;
  qs::Maturity *arg2 = 0 ;
  qs::Convention arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__DiscountFactor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscountFactor_to_interest_rate" "', argument " "1"" of type '" "qs::DiscountFactor const *""'"); 
  }
  arg1 = reinterpret_cast< qs::DiscountFactor * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscountFactor_to_interest_rate" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscountFactor_to_interest_rate" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DiscountFactor_to_interest_rate" "', argument " "3"" of type '" "qs::Convention""'");
  } 
  arg3 = static_cast< qs::Convention >(val3);
  result = ((qs::DiscountFactor const *)arg1)->to_interest_rate((qs::Maturity const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_DiscountFactor_to_interest_rate__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::DiscountFactor *arg1 = (qs::DiscountFactor *) 0 ;
  qs::Maturity *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__DiscountFactor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscountFactor_to_interest_rate" "', argument " "1"" of type '" "qs::DiscountFactor const *""'"); 
  }
  arg1 = reinterpret_cast< qs::DiscountFactor * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscountFactor_to_interest_rate" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscountFactor_to_interest_rate" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  result = ((qs::DiscountFactor const *)arg1)->to_interest_rate((qs::Maturity const &)*arg2);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_DiscountFactor_to_interest_rate__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::DiscountFactor *arg1 = (qs::DiscountFactor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__DiscountFactor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscountFactor_to_interest_rate" "', argument " "1"" of type '" "qs::DiscountFactor const *""'"); 
  }
  arg1 = reinterpret_cast< qs::DiscountFactor * >(argp1);
  result = ((qs::DiscountFactor const *)arg1)->to_interest_rate();
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_DiscountFactor__wrap_DiscountFactor_to_interest_rate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_DiscountFactor_to_interest_rate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_DiscountFactor_to_interest_rate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_DiscountFactor_to_interest_rate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_DiscountFactor_to_interest_rate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_DiscountFactor_to_interest_rate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_DiscountFactor_to_interest_rate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_DiscountFactor_to_interest_rate__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_DiscountFactor_to_interest_rate__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function to_interest_rate.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_DiscountFactor_value_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_DiscountFactor_value_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    qs::DiscountFactor *arg1 = (qs::DiscountFactor *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__DiscountFactor, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscountFactor_value_set" "', argument " "1"" of type '" "qs::DiscountFactor *""'"); 
    }
    arg1 = reinterpret_cast< qs::DiscountFactor * >(argp1);
    ecode2 = SWIG_AsVal_double(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiscountFactor_value_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (arg1) (arg1)->value = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_DiscountFactor_value_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_DiscountFactor_value_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    qs::DiscountFactor *arg1 = (qs::DiscountFactor *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__DiscountFactor, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscountFactor_value_get" "', argument " "1"" of type '" "qs::DiscountFactor *""'"); 
    }
    arg1 = reinterpret_cast< qs::DiscountFactor * >(argp1);
    result = (double) ((arg1)->value);
    jsresult = SWIG_From_double(static_cast< double >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_DiscountFactor(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_DiscountFactor(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_DiscountFactor(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_DiscountFactor(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_DiscountFactor(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            qs::DiscountFactor * arg1 = (qs::DiscountFactor *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_InterestRate__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  double arg1 ;
  qs::Convention arg2 ;
  int arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  qs::InterestRate *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_InterestRate__SWIG_0.");
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InterestRate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InterestRate" "', argument " "2"" of type '" "qs::Convention""'");
  } 
  arg2 = static_cast< qs::Convention >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_InterestRate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (qs::InterestRate *)new qs::InterestRate(arg1,arg2,arg3);
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_InterestRate__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  double arg1 ;
  qs::Convention arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  qs::InterestRate *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_InterestRate__SWIG_1.");
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InterestRate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InterestRate" "', argument " "2"" of type '" "qs::Convention""'");
  } 
  arg2 = static_cast< qs::Convention >(val2);
  result = (qs::InterestRate *)new qs::InterestRate(arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_InterestRate__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  qs::InterestRate *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_InterestRate__SWIG_2.");
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InterestRate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (qs::InterestRate *)new qs::InterestRate(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_InterestRate__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::InterestRate *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  qs::InterestRate *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_InterestRate__SWIG_3.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InterestRate" "', argument " "1"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InterestRate" "', argument " "1"" of type '" "qs::InterestRate const &""'"); 
  }
  arg1 = reinterpret_cast< qs::InterestRate * >(argp1);
  result = (qs::InterestRate *)new qs::InterestRate((qs::InterestRate const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_InterestRate__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::InterestRate *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qs::InterestRate *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_InterestRate__SWIG_4.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InterestRate" "', argument " "1"" of type '" "qs::InterestRate &&""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InterestRate" "', argument " "1"" of type '" "qs::InterestRate &&""'"); 
  }
  arg1 = reinterpret_cast< qs::InterestRate * >(argp1);
  result = (qs::InterestRate *)new qs::InterestRate((qs::InterestRate &&)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_InterestRate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_InterestRate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_InterestRate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_InterestRate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_InterestRate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_InterestRate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_InterestRate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_InterestRate__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_InterestRate__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_InterestRate__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_InterestRate__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_InterestRate");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_InterestRate_get_discount_factor_start(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::InterestRate *arg1 = (qs::InterestRate *) 0 ;
  qs::Schedule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< std::vector< qs::DiscountFactor > > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_InterestRate_get_discount_factor_start.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__InterestRate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterestRate_get_discount_factor_start" "', argument " "1"" of type '" "qs::InterestRate const *""'"); 
  }
  arg1 = reinterpret_cast< qs::InterestRate * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InterestRate_get_discount_factor_start" "', argument " "2"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InterestRate_get_discount_factor_start" "', argument " "2"" of type '" "qs::Schedule const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Schedule * >(argp2);
  result = ((qs::InterestRate const *)arg1)->get_discount_factor_start((qs::Schedule const &)*arg2);
  jsresult = SWIG_NewPointerObj((new std::vector< qs::DiscountFactor >(static_cast< const std::vector< qs::DiscountFactor >& >(result))), SWIGTYPE_p_std__vectorT_qs__DiscountFactor_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_InterestRate_get_discount_factors_end(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::InterestRate *arg1 = (qs::InterestRate *) 0 ;
  qs::Schedule *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< std::vector< qs::DiscountFactor > > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_InterestRate_get_discount_factors_end.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__InterestRate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterestRate_get_discount_factors_end" "', argument " "1"" of type '" "qs::InterestRate const *""'"); 
  }
  arg1 = reinterpret_cast< qs::InterestRate * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InterestRate_get_discount_factors_end" "', argument " "2"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InterestRate_get_discount_factors_end" "', argument " "2"" of type '" "qs::Schedule const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Schedule * >(argp2);
  result = ((qs::InterestRate const *)arg1)->get_discount_factors_end((qs::Schedule const &)*arg2);
  jsresult = SWIG_NewPointerObj((new std::vector< qs::DiscountFactor >(static_cast< const std::vector< qs::DiscountFactor >& >(result))), SWIGTYPE_p_std__vectorT_qs__DiscountFactor_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_InterestRate_to_discount_factor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::InterestRate *arg1 = (qs::InterestRate *) 0 ;
  qs::Maturity *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< qs::DiscountFactor > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_InterestRate_to_discount_factor.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__InterestRate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterestRate_to_discount_factor" "', argument " "1"" of type '" "qs::InterestRate const *""'"); 
  }
  arg1 = reinterpret_cast< qs::InterestRate * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InterestRate_to_discount_factor" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InterestRate_to_discount_factor" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  result = ((qs::InterestRate const *)arg1)->to_discount_factor((qs::Maturity const &)*arg2);
  jsresult = SWIG_NewPointerObj((new qs::DiscountFactor(static_cast< const qs::DiscountFactor& >(result))), SWIGTYPE_p_qs__DiscountFactor, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_InterestRate_to_other_interest_rate__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::InterestRate *arg1 = (qs::InterestRate *) 0 ;
  qs::Convention arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__InterestRate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterestRate_to_other_interest_rate" "', argument " "1"" of type '" "qs::InterestRate const *""'"); 
  }
  arg1 = reinterpret_cast< qs::InterestRate * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterestRate_to_other_interest_rate" "', argument " "2"" of type '" "qs::Convention""'");
  } 
  arg2 = static_cast< qs::Convention >(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InterestRate_to_other_interest_rate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((qs::InterestRate const *)arg1)->to_other_interest_rate(arg2,arg3);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_InterestRate_to_other_interest_rate__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::InterestRate *arg1 = (qs::InterestRate *) 0 ;
  qs::Convention arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__InterestRate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterestRate_to_other_interest_rate" "', argument " "1"" of type '" "qs::InterestRate const *""'"); 
  }
  arg1 = reinterpret_cast< qs::InterestRate * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterestRate_to_other_interest_rate" "', argument " "2"" of type '" "qs::Convention""'");
  } 
  arg2 = static_cast< qs::Convention >(val2);
  result = ((qs::InterestRate const *)arg1)->to_other_interest_rate(arg2);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_InterestRate_to_other_interest_rate__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::InterestRate *arg1 = (qs::InterestRate *) 0 ;
  qs::Maturity *arg2 = 0 ;
  qs::Convention arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__InterestRate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterestRate_to_other_interest_rate" "', argument " "1"" of type '" "qs::InterestRate const *""'"); 
  }
  arg1 = reinterpret_cast< qs::InterestRate * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InterestRate_to_other_interest_rate" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InterestRate_to_other_interest_rate" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InterestRate_to_other_interest_rate" "', argument " "3"" of type '" "qs::Convention""'");
  } 
  arg3 = static_cast< qs::Convention >(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "InterestRate_to_other_interest_rate" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = ((qs::InterestRate const *)arg1)->to_other_interest_rate((qs::Maturity const &)*arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_InterestRate_to_other_interest_rate__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::InterestRate *arg1 = (qs::InterestRate *) 0 ;
  qs::Maturity *arg2 = 0 ;
  qs::Convention arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__InterestRate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterestRate_to_other_interest_rate" "', argument " "1"" of type '" "qs::InterestRate const *""'"); 
  }
  arg1 = reinterpret_cast< qs::InterestRate * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InterestRate_to_other_interest_rate" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InterestRate_to_other_interest_rate" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InterestRate_to_other_interest_rate" "', argument " "3"" of type '" "qs::Convention""'");
  } 
  arg3 = static_cast< qs::Convention >(val3);
  result = ((qs::InterestRate const *)arg1)->to_other_interest_rate((qs::Maturity const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_InterestRate__wrap_InterestRate_to_other_interest_rate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_InterestRate_to_other_interest_rate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_InterestRate_to_other_interest_rate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_InterestRate_to_other_interest_rate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_InterestRate_to_other_interest_rate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_InterestRate_to_other_interest_rate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_InterestRate_to_other_interest_rate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_InterestRate_to_other_interest_rate__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_InterestRate_to_other_interest_rate__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function to_other_interest_rate.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_InterestRate_value_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_InterestRate_value_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    qs::InterestRate *arg1 = (qs::InterestRate *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__InterestRate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterestRate_value_set" "', argument " "1"" of type '" "qs::InterestRate *""'"); 
    }
    arg1 = reinterpret_cast< qs::InterestRate * >(argp1);
    ecode2 = SWIG_AsVal_double(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterestRate_value_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (arg1) (arg1)->value = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_InterestRate_value_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_InterestRate_value_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    qs::InterestRate *arg1 = (qs::InterestRate *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__InterestRate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterestRate_value_get" "', argument " "1"" of type '" "qs::InterestRate *""'"); 
    }
    arg1 = reinterpret_cast< qs::InterestRate * >(argp1);
    result = (double) ((arg1)->value);
    jsresult = SWIG_From_double(static_cast< double >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_InterestRate_c_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_InterestRate_c_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    qs::InterestRate *arg1 = (qs::InterestRate *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__InterestRate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterestRate_c_set" "', argument " "1"" of type '" "qs::InterestRate *""'"); 
    }
    arg1 = reinterpret_cast< qs::InterestRate * >(argp1);
    ecode2 = SWIG_AsVal_int(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterestRate_c_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->c = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_InterestRate_c_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_InterestRate_c_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    qs::InterestRate *arg1 = (qs::InterestRate *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__InterestRate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterestRate_c_get" "', argument " "1"" of type '" "qs::InterestRate *""'"); 
    }
    arg1 = reinterpret_cast< qs::InterestRate * >(argp1);
    result = (int) ((arg1)->c);
    jsresult = SWIG_From_int(static_cast< int >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_InterestRate_conv_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_InterestRate_conv_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    qs::InterestRate *arg1 = (qs::InterestRate *) 0 ;
    qs::Convention arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__InterestRate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterestRate_conv_set" "', argument " "1"" of type '" "qs::InterestRate *""'"); 
    }
    arg1 = reinterpret_cast< qs::InterestRate * >(argp1);
    ecode2 = SWIG_AsVal_int(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterestRate_conv_set" "', argument " "2"" of type '" "qs::Convention""'");
    } 
    arg2 = static_cast< qs::Convention >(val2);
    if (arg1) (arg1)->conv = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_InterestRate_conv_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_InterestRate_conv_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    qs::InterestRate *arg1 = (qs::InterestRate *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    qs::Convention result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__InterestRate, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterestRate_conv_get" "', argument " "1"" of type '" "qs::InterestRate *""'"); 
    }
    arg1 = reinterpret_cast< qs::InterestRate * >(argp1);
    result = (qs::Convention) ((arg1)->conv);
    jsresult = SWIG_From_int(static_cast< int >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_InterestRate_ZERO_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_InterestRate_ZERO_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    qs::InterestRate *result = 0 ;
    
    result = (qs::InterestRate *)&qs::InterestRate::ZERO;
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qs__InterestRate, 0 |  0 );
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_InterestRate(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_InterestRate(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_InterestRate(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_InterestRate(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_InterestRate(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            qs::InterestRate * arg1 = (qs::InterestRate *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_LegGenerator(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::LegGenerator *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_LegGenerator.");
  result = (qs::LegGenerator *)new qs::LegGenerator();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__LegGenerator, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_LegGenerator(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_LegGenerator(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_LegGenerator(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_LegGenerator(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_LegGenerator(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            qs::LegGenerator * arg1 = (qs::LegGenerator *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_ProductGenerator(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::ProductGenerator *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ProductGenerator.");
  result = (qs::ProductGenerator *)new qs::ProductGenerator();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__ProductGenerator, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ProductGenerator(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ProductGenerator(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ProductGenerator(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_ProductGenerator(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_ProductGenerator(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            qs::ProductGenerator * arg1 = (qs::ProductGenerator *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_Leg_npv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::Leg *arg1 = (qs::Leg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Leg_npv.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__Leg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Leg_npv" "', argument " "1"" of type '" "qs::Leg const *""'"); 
  }
  arg1 = reinterpret_cast< qs::Leg * >(argp1);
  result = (double)((qs::Leg const *)arg1)->npv();
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Leg_flows_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Leg_flows_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    qs::Leg *arg1 = (qs::Leg *) 0 ;
    std::vector< std::reference_wrapper< qs::CashFlow const > > *arg2 = (std::vector< std::reference_wrapper< qs::CashFlow const > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__Leg, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Leg_flows_set" "', argument " "1"" of type '" "qs::Leg *""'"); 
    }
    arg1 = reinterpret_cast< qs::Leg * >(argp1);
    res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_std__reference_wrapperT_qs__CashFlow_const_t_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Leg_flows_set" "', argument " "2"" of type '" "std::vector< std::reference_wrapper< qs::CashFlow const > > *""'"); 
    }
    arg2 = reinterpret_cast< std::vector< std::reference_wrapper< qs::CashFlow const > > * >(argp2);
    if (arg1) (arg1)->flows = *arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Leg_flows_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Leg_flows_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    qs::Leg *arg1 = (qs::Leg *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< std::reference_wrapper< qs::CashFlow const > > *result = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__Leg, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Leg_flows_get" "', argument " "1"" of type '" "qs::Leg *""'"); 
    }
    arg1 = reinterpret_cast< qs::Leg * >(argp1);
    result = (std::vector< std::reference_wrapper< qs::CashFlow const > > *)& ((arg1)->flows);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__reference_wrapperT_qs__CashFlow_const_t_t, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_new_Leg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::Leg *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Leg.");
  result = (qs::Leg *)new qs::Leg();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__Leg, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Leg(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Leg(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Leg(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_Leg(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_Leg(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            qs::Leg * arg1 = (qs::Leg *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_Product_npv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::Product *arg1 = (qs::Product *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Product_npv.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__Product, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Product_npv" "', argument " "1"" of type '" "qs::Product const *""'"); 
  }
  arg1 = reinterpret_cast< qs::Product * >(argp1);
  result = (double)((qs::Product const *)arg1)->npv();
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Product_legs_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Product_legs_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    qs::Product *arg1 = (qs::Product *) 0 ;
    std::vector< qs::Leg > *arg2 = (std::vector< qs::Leg > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__Product, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Product_legs_set" "', argument " "1"" of type '" "qs::Product *""'"); 
    }
    arg1 = reinterpret_cast< qs::Product * >(argp1);
    res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_qs__Leg_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Product_legs_set" "', argument " "2"" of type '" "std::vector< qs::Leg > *""'"); 
    }
    arg2 = reinterpret_cast< std::vector< qs::Leg > * >(argp2);
    if (arg1) (arg1)->legs = *arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Product_legs_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Product_legs_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    qs::Product *arg1 = (qs::Product *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< qs::Leg > *result = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__Product, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Product_legs_get" "', argument " "1"" of type '" "qs::Product *""'"); 
    }
    arg1 = reinterpret_cast< qs::Product * >(argp1);
    result = (std::vector< qs::Leg > *)& ((arg1)->legs);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_qs__Leg_t, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_new_Product(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::Product *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Product.");
  result = (qs::Product *)new qs::Product();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__Product, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Product(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Product(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Product(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_Product(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_Product(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            qs::Product * arg1 = (qs::Product *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_TermStructure__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::Convention arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  qs::TermStructure *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TermStructure__SWIG_0.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TermStructure" "', argument " "1"" of type '" "qs::Convention""'");
  } 
  arg1 = static_cast< qs::Convention >(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TermStructure" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (qs::TermStructure *)new qs::TermStructure(arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__TermStructure, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_TermStructure__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::Convention arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  qs::TermStructure *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TermStructure__SWIG_1.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TermStructure" "', argument " "1"" of type '" "qs::Convention""'");
  } 
  arg1 = static_cast< qs::Convention >(val1);
  result = (qs::TermStructure *)new qs::TermStructure(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__TermStructure, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_TermStructure__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::TermStructure *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TermStructure__SWIG_2.");
  result = (qs::TermStructure *)new qs::TermStructure();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__TermStructure, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_TermStructure__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::Schedule *arg1 = 0 ;
  qs::InterestRate *arg2 = 0 ;
  qs::Convention arg3 ;
  int arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  qs::TermStructure *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TermStructure__SWIG_3.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TermStructure" "', argument " "1"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TermStructure" "', argument " "1"" of type '" "qs::Schedule const &""'"); 
  }
  arg1 = reinterpret_cast< qs::Schedule * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TermStructure" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TermStructure" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TermStructure" "', argument " "3"" of type '" "qs::Convention""'");
  } 
  arg3 = static_cast< qs::Convention >(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TermStructure" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (qs::TermStructure *)new qs::TermStructure((qs::Schedule const &)*arg1,(qs::InterestRate const &)*arg2,arg3,arg4);
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__TermStructure, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_TermStructure__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::Schedule *arg1 = 0 ;
  qs::InterestRate *arg2 = 0 ;
  qs::Convention arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  qs::TermStructure *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TermStructure__SWIG_4.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TermStructure" "', argument " "1"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TermStructure" "', argument " "1"" of type '" "qs::Schedule const &""'"); 
  }
  arg1 = reinterpret_cast< qs::Schedule * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TermStructure" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TermStructure" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TermStructure" "', argument " "3"" of type '" "qs::Convention""'");
  } 
  arg3 = static_cast< qs::Convention >(val3);
  result = (qs::TermStructure *)new qs::TermStructure((qs::Schedule const &)*arg1,(qs::InterestRate const &)*arg2,arg3);
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__TermStructure, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_TermStructure__SWIG_5(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::Schedule *arg1 = 0 ;
  qs::InterestRate *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  qs::TermStructure *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TermStructure__SWIG_5.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TermStructure" "', argument " "1"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TermStructure" "', argument " "1"" of type '" "qs::Schedule const &""'"); 
  }
  arg1 = reinterpret_cast< qs::Schedule * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TermStructure" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TermStructure" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  result = (qs::TermStructure *)new qs::TermStructure((qs::Schedule const &)*arg1,(qs::InterestRate const &)*arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__TermStructure, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_TermStructure__SWIG_6(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::Schedule *arg1 = 0 ;
  qs::DiscountFactor *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  qs::TermStructure *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TermStructure__SWIG_6.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TermStructure" "', argument " "1"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TermStructure" "', argument " "1"" of type '" "qs::Schedule const &""'"); 
  }
  arg1 = reinterpret_cast< qs::Schedule * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__DiscountFactor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TermStructure" "', argument " "2"" of type '" "qs::DiscountFactor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TermStructure" "', argument " "2"" of type '" "qs::DiscountFactor const &""'"); 
  }
  arg2 = reinterpret_cast< qs::DiscountFactor * >(argp2);
  result = (qs::TermStructure *)new qs::TermStructure((qs::Schedule const &)*arg1,(qs::DiscountFactor const &)*arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__TermStructure, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_TermStructure(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_TermStructure__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_TermStructure__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_TermStructure__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_TermStructure__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_TermStructure__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_TermStructure__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_TermStructure__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_TermStructure__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_TermStructure__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_TermStructure__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_TermStructure__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_TermStructure__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_TermStructure__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_TermStructure__SWIG_6(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_TermStructure");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TermStructure_append_spot__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::TermStructure *arg1 = (qs::TermStructure *) 0 ;
  qs::Maturity *arg2 = 0 ;
  qs::DiscountFactor *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__TermStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TermStructure_append_spot" "', argument " "1"" of type '" "qs::TermStructure *""'"); 
  }
  arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TermStructure_append_spot" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TermStructure_append_spot" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_qs__DiscountFactor,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TermStructure_append_spot" "', argument " "3"" of type '" "qs::DiscountFactor const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TermStructure_append_spot" "', argument " "3"" of type '" "qs::DiscountFactor const &""'"); 
  }
  arg3 = reinterpret_cast< qs::DiscountFactor * >(argp3);
  (arg1)->append_spot((qs::Maturity const &)*arg2,(qs::DiscountFactor const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TermStructure_append_spot__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::TermStructure *arg1 = (qs::TermStructure *) 0 ;
  qs::Maturity *arg2 = 0 ;
  qs::InterestRate *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__TermStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TermStructure_append_spot" "', argument " "1"" of type '" "qs::TermStructure *""'"); 
  }
  arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TermStructure_append_spot" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TermStructure_append_spot" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TermStructure_append_spot" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TermStructure_append_spot" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  arg3 = reinterpret_cast< qs::InterestRate * >(argp3);
  (arg1)->append_spot((qs::Maturity const &)*arg2,(qs::InterestRate const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TermStructure__wrap_TermStructure_append_spot(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TermStructure_append_spot__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TermStructure_append_spot__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TermStructure_append_spot__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TermStructure_append_spot__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function append_spot.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TermStructure_append_forward(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::TermStructure *arg1 = (qs::TermStructure *) 0 ;
  qs::Maturity *arg2 = 0 ;
  qs::InterestRate *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TermStructure_append_forward.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__TermStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TermStructure_append_forward" "', argument " "1"" of type '" "qs::TermStructure *""'"); 
  }
  arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TermStructure_append_forward" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TermStructure_append_forward" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TermStructure_append_forward" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TermStructure_append_forward" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  arg3 = reinterpret_cast< qs::InterestRate * >(argp3);
  (arg1)->append_forward((qs::Maturity const &)*arg2,(qs::InterestRate const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TermStructure_append_par(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::TermStructure *arg1 = (qs::TermStructure *) 0 ;
  qs::Maturity *arg2 = 0 ;
  qs::InterestRate *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TermStructure_append_par.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__TermStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TermStructure_append_par" "', argument " "1"" of type '" "qs::TermStructure *""'"); 
  }
  arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TermStructure_append_par" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TermStructure_append_par" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TermStructure_append_par" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TermStructure_append_par" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  arg3 = reinterpret_cast< qs::InterestRate * >(argp3);
  (arg1)->append_par((qs::Maturity const &)*arg2,(qs::InterestRate const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TermStructure_build(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::TermStructure *arg1 = (qs::TermStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TermStructure_build.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__TermStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TermStructure_build" "', argument " "1"" of type '" "qs::TermStructure *""'"); 
  }
  arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
  (arg1)->build();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TermStructure_get_discount_factor_start(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::TermStructure *arg1 = (qs::TermStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< qs::DiscountFactor > > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TermStructure_get_discount_factor_start.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__TermStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TermStructure_get_discount_factor_start" "', argument " "1"" of type '" "qs::TermStructure const *""'"); 
  }
  arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
  result = ((qs::TermStructure const *)arg1)->get_discount_factor_start();
  jsresult = SWIG_NewPointerObj((new std::vector< qs::DiscountFactor >(static_cast< const std::vector< qs::DiscountFactor >& >(result))), SWIGTYPE_p_std__vectorT_qs__DiscountFactor_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TermStructure_get_discount_factors_end(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::TermStructure *arg1 = (qs::TermStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< qs::DiscountFactor > > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TermStructure_get_discount_factors_end.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__TermStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TermStructure_get_discount_factors_end" "', argument " "1"" of type '" "qs::TermStructure const *""'"); 
  }
  arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
  result = ((qs::TermStructure const *)arg1)->get_discount_factors_end();
  jsresult = SWIG_NewPointerObj((new std::vector< qs::DiscountFactor >(static_cast< const std::vector< qs::DiscountFactor >& >(result))), SWIGTYPE_p_std__vectorT_qs__DiscountFactor_t, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TermStructure_get_interpolated_interest_rate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::TermStructure *arg1 = (qs::TermStructure *) 0 ;
  qs::Maturity *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TermStructure_get_interpolated_interest_rate.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__TermStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TermStructure_get_interpolated_interest_rate" "', argument " "1"" of type '" "qs::TermStructure const *""'"); 
  }
  arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TermStructure_get_interpolated_interest_rate" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TermStructure_get_interpolated_interest_rate" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  result = ((qs::TermStructure const *)arg1)->get_interpolated_interest_rate((qs::Maturity const &)*arg2);
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TermStructure_make_cashflow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::TermStructure *arg1 = (qs::TermStructure *) 0 ;
  qs::Maturity *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< qs::CustomCashFlow > result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TermStructure_make_cashflow.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__TermStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TermStructure_make_cashflow" "', argument " "1"" of type '" "qs::TermStructure *""'"); 
  }
  arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TermStructure_make_cashflow" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TermStructure_make_cashflow" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TermStructure_make_cashflow" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (arg1)->make_cashflow((qs::Maturity const &)*arg2,arg3);
  jsresult = SWIG_NewPointerObj((new qs::CustomCashFlow(static_cast< const qs::CustomCashFlow& >(result))), SWIGTYPE_p_qs__CustomCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TermStructure_get_spots__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::TermStructure *arg1 = (qs::TermStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< qs::InterestRate > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__TermStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TermStructure_get_spots" "', argument " "1"" of type '" "qs::TermStructure *""'"); 
  }
  arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
  result = (std::vector< qs::InterestRate > *) &(arg1)->get_spots();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_qs__InterestRate_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TermStructure_get_spots__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::TermStructure *arg1 = (qs::TermStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< qs::InterestRate > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__TermStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TermStructure_get_spots" "', argument " "1"" of type '" "qs::TermStructure const *""'"); 
  }
  arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
  result = (std::vector< qs::InterestRate > *) &((qs::TermStructure const *)arg1)->get_spots();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_qs__InterestRate_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TermStructure__wrap_TermStructure_get_spots(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TermStructure_get_spots__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TermStructure_get_spots__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TermStructure_get_spots__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TermStructure_get_spots__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function get_spots.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TermStructure_get_forwards__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::TermStructure *arg1 = (qs::TermStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< qs::InterestRate > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__TermStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TermStructure_get_forwards" "', argument " "1"" of type '" "qs::TermStructure *""'"); 
  }
  arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
  result = (std::vector< qs::InterestRate > *) &(arg1)->get_forwards();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_qs__InterestRate_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TermStructure_get_forwards__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::TermStructure *arg1 = (qs::TermStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< qs::InterestRate > *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__TermStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TermStructure_get_forwards" "', argument " "1"" of type '" "qs::TermStructure const *""'"); 
  }
  arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
  result = (std::vector< qs::InterestRate > *) &((qs::TermStructure const *)arg1)->get_forwards();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_qs__InterestRate_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TermStructure__wrap_TermStructure_get_forwards(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TermStructure_get_forwards__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TermStructure_get_forwards__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_TermStructure_get_forwards__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_TermStructure_get_forwards__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function get_forwards.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TermStructure_get_first_maturity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::TermStructure *arg1 = (qs::TermStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::Maturity > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TermStructure_get_first_maturity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__TermStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TermStructure_get_first_maturity" "', argument " "1"" of type '" "qs::TermStructure const *""'"); 
  }
  arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
  result = ((qs::TermStructure const *)arg1)->get_first_maturity();
  jsresult = SWIG_NewPointerObj((new qs::Maturity(static_cast< const qs::Maturity& >(result))), SWIGTYPE_p_qs__Maturity, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TermStructure_get_first_interest_rate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::TermStructure *arg1 = (qs::TermStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TermStructure_get_first_interest_rate.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__TermStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TermStructure_get_first_interest_rate" "', argument " "1"" of type '" "qs::TermStructure const *""'"); 
  }
  arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
  result = ((qs::TermStructure const *)arg1)->get_first_interest_rate();
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TermStructure_get_last_maturity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::TermStructure *arg1 = (qs::TermStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::Maturity > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TermStructure_get_last_maturity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__TermStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TermStructure_get_last_maturity" "', argument " "1"" of type '" "qs::TermStructure const *""'"); 
  }
  arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
  result = ((qs::TermStructure const *)arg1)->get_last_maturity();
  jsresult = SWIG_NewPointerObj((new qs::Maturity(static_cast< const qs::Maturity& >(result))), SWIGTYPE_p_qs__Maturity, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_TermStructure_get_last_interest_rate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::TermStructure *arg1 = (qs::TermStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::InterestRate > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_TermStructure_get_last_interest_rate.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__TermStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TermStructure_get_last_interest_rate" "', argument " "1"" of type '" "qs::TermStructure const *""'"); 
  }
  arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
  result = ((qs::TermStructure const *)arg1)->get_last_interest_rate();
  jsresult = SWIG_NewPointerObj((new qs::InterestRate(static_cast< const qs::InterestRate& >(result))), SWIGTYPE_p_qs__InterestRate, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_TermStructure__convention_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_TermStructure__convention_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    qs::TermStructure *arg1 = (qs::TermStructure *) 0 ;
    qs::Convention arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__TermStructure, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TermStructure__convention_set" "', argument " "1"" of type '" "qs::TermStructure *""'"); 
    }
    arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
    ecode2 = SWIG_AsVal_int(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TermStructure__convention_set" "', argument " "2"" of type '" "qs::Convention""'");
    } 
    arg2 = static_cast< qs::Convention >(val2);
    if (arg1) (arg1)->_convention = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_TermStructure__convention_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_TermStructure__convention_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    qs::TermStructure *arg1 = (qs::TermStructure *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    qs::Convention result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__TermStructure, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TermStructure__convention_get" "', argument " "1"" of type '" "qs::TermStructure *""'"); 
    }
    arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
    result = (qs::Convention) ((arg1)->_convention);
    jsresult = SWIG_From_int(static_cast< int >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_TermStructure__compound_times_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_TermStructure__compound_times_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    qs::TermStructure *arg1 = (qs::TermStructure *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__TermStructure, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TermStructure__compound_times_set" "', argument " "1"" of type '" "qs::TermStructure *""'"); 
    }
    arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
    ecode2 = SWIG_AsVal_int(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TermStructure__compound_times_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->_compound_times = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_TermStructure__compound_times_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_TermStructure__compound_times_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    qs::TermStructure *arg1 = (qs::TermStructure *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__TermStructure, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TermStructure__compound_times_get" "', argument " "1"" of type '" "qs::TermStructure *""'"); 
    }
    arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
    result = (int) ((arg1)->_compound_times);
    jsresult = SWIG_From_int(static_cast< int >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TermStructure(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TermStructure(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TermStructure(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_TermStructure(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_TermStructure(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            qs::TermStructure * arg1 = (qs::TermStructure *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_CashFlow(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_CashFlow(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_CashFlow(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_CashFlow(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_CashFlow(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            qs::CashFlow * arg1 = (qs::CashFlow *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_CashFlow_to_start_cashflow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::CashFlow *arg1 = (qs::CashFlow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::StartCashFlow > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CashFlow_to_start_cashflow.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__CashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CashFlow_to_start_cashflow" "', argument " "1"" of type '" "qs::CashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::CashFlow * >(argp1);
  result = ((qs::CashFlow const *)arg1)->to_start_cashflow();
  jsresult = SWIG_NewPointerObj((new qs::StartCashFlow(static_cast< const qs::StartCashFlow& >(result))), SWIGTYPE_p_qs__StartCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CashFlow_to_end_cashflow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::CashFlow *arg1 = (qs::CashFlow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::EndCashFlow > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CashFlow_to_end_cashflow.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__CashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CashFlow_to_end_cashflow" "', argument " "1"" of type '" "qs::CashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::CashFlow * >(argp1);
  result = ((qs::CashFlow const *)arg1)->to_end_cashflow();
  jsresult = SWIG_NewPointerObj((new qs::EndCashFlow(static_cast< const qs::EndCashFlow& >(result))), SWIGTYPE_p_qs__EndCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CashFlow_to_coupon__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::CashFlow *arg1 = (qs::CashFlow *) 0 ;
  qs::InterestRate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< qs::CouponCashFlow > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__CashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CashFlow_to_coupon" "', argument " "1"" of type '" "qs::CashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::CashFlow * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CashFlow_to_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CashFlow_to_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  result = ((qs::CashFlow const *)arg1)->to_coupon((qs::InterestRate const &)*arg2);
  jsresult = SWIG_NewPointerObj((new qs::CouponCashFlow(static_cast< const qs::CouponCashFlow& >(result))), SWIGTYPE_p_qs__CouponCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CashFlow_to_coupon__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::CashFlow *arg1 = (qs::CashFlow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::CouponCashFlow > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__CashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CashFlow_to_coupon" "', argument " "1"" of type '" "qs::CashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::CashFlow * >(argp1);
  result = ((qs::CashFlow const *)arg1)->to_coupon();
  jsresult = SWIG_NewPointerObj((new qs::CouponCashFlow(static_cast< const qs::CouponCashFlow& >(result))), SWIGTYPE_p_qs__CouponCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CashFlow__wrap_CashFlow_to_coupon(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_CashFlow_to_coupon__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_CashFlow_to_coupon__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_CashFlow_to_coupon__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_CashFlow_to_coupon__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function to_coupon.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CashFlow_to_custom_cashflow__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::CashFlow *arg1 = (qs::CashFlow *) 0 ;
  qs::Maturity *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< qs::CustomCashFlow > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__CashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CashFlow_to_custom_cashflow" "', argument " "1"" of type '" "qs::CashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::CashFlow * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CashFlow_to_custom_cashflow" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CashFlow_to_custom_cashflow" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  result = ((qs::CashFlow const *)arg1)->to_custom_cashflow((qs::Maturity const &)*arg2);
  jsresult = SWIG_NewPointerObj((new qs::CustomCashFlow(static_cast< const qs::CustomCashFlow& >(result))), SWIGTYPE_p_qs__CustomCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CashFlow_to_custom_cashflow__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::CashFlow *arg1 = (qs::CashFlow *) 0 ;
  qs::Maturity *arg2 = 0 ;
  qs::InterestRate *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SwigValueWrapper< qs::CustomCashFlow > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__CashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CashFlow_to_custom_cashflow" "', argument " "1"" of type '" "qs::CashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::CashFlow * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CashFlow_to_custom_cashflow" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CashFlow_to_custom_cashflow" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CashFlow_to_custom_cashflow" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CashFlow_to_custom_cashflow" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  arg3 = reinterpret_cast< qs::InterestRate * >(argp3);
  result = ((qs::CashFlow const *)arg1)->to_custom_cashflow((qs::Maturity const &)*arg2,(qs::InterestRate const &)*arg3);
  jsresult = SWIG_NewPointerObj((new qs::CustomCashFlow(static_cast< const qs::CustomCashFlow& >(result))), SWIGTYPE_p_qs__CustomCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CashFlow__wrap_CashFlow_to_custom_cashflow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_CashFlow_to_custom_cashflow__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_CashFlow_to_custom_cashflow__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_CashFlow_to_custom_cashflow__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_CashFlow_to_custom_cashflow__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function to_custom_cashflow.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_CashFlow_cash_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_CashFlow_cash_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    qs::CashFlow *arg1 = (qs::CashFlow *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__CashFlow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CashFlow_cash_set" "', argument " "1"" of type '" "qs::CashFlow *""'"); 
    }
    arg1 = reinterpret_cast< qs::CashFlow * >(argp1);
    ecode2 = SWIG_AsVal_double(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CashFlow_cash_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (arg1) (arg1)->cash = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_CashFlow_cash_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_CashFlow_cash_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    qs::CashFlow *arg1 = (qs::CashFlow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__CashFlow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CashFlow_cash_get" "', argument " "1"" of type '" "qs::CashFlow *""'"); 
    }
    arg1 = reinterpret_cast< qs::CashFlow * >(argp1);
    result = (double) ((arg1)->cash);
    jsresult = SWIG_From_double(static_cast< double >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_new_veto_CashFlow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class CashFlow can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_CouponCashFlow__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::Schedule *arg1 = 0 ;
  qs::InterestRate *arg2 = 0 ;
  double arg3 ;
  qs::InterestRate *arg4 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  qs::CouponCashFlow *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_CouponCashFlow__SWIG_0.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CouponCashFlow" "', argument " "1"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CouponCashFlow" "', argument " "1"" of type '" "qs::Schedule const &""'"); 
  }
  arg1 = reinterpret_cast< qs::Schedule * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CouponCashFlow" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CouponCashFlow" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CouponCashFlow" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_CouponCashFlow" "', argument " "4"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CouponCashFlow" "', argument " "4"" of type '" "qs::InterestRate const &""'"); 
  }
  arg4 = reinterpret_cast< qs::InterestRate * >(argp4);
  result = (qs::CouponCashFlow *)new qs::CouponCashFlow((qs::Schedule const &)*arg1,(qs::InterestRate const &)*arg2,arg3,(qs::InterestRate const &)*arg4);
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__CouponCashFlow, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_CouponCashFlow__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::Schedule *arg1 = 0 ;
  qs::InterestRate *arg2 = 0 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  qs::CouponCashFlow *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_CouponCashFlow__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CouponCashFlow" "', argument " "1"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CouponCashFlow" "', argument " "1"" of type '" "qs::Schedule const &""'"); 
  }
  arg1 = reinterpret_cast< qs::Schedule * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CouponCashFlow" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CouponCashFlow" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CouponCashFlow" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (qs::CouponCashFlow *)new qs::CouponCashFlow((qs::Schedule const &)*arg1,(qs::InterestRate const &)*arg2,arg3);
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__CouponCashFlow, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_CouponCashFlow__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::TermStructure *arg1 = 0 ;
  double arg2 ;
  qs::InterestRate *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  qs::CouponCashFlow *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_CouponCashFlow__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__TermStructure,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CouponCashFlow" "', argument " "1"" of type '" "qs::TermStructure const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CouponCashFlow" "', argument " "1"" of type '" "qs::TermStructure const &""'"); 
  }
  arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CouponCashFlow" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_CouponCashFlow" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CouponCashFlow" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  arg3 = reinterpret_cast< qs::InterestRate * >(argp3);
  result = (qs::CouponCashFlow *)new qs::CouponCashFlow((qs::TermStructure const &)*arg1,arg2,(qs::InterestRate const &)*arg3);
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__CouponCashFlow, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_CouponCashFlow__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::TermStructure *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  qs::CouponCashFlow *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_CouponCashFlow__SWIG_3.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__TermStructure,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CouponCashFlow" "', argument " "1"" of type '" "qs::TermStructure const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CouponCashFlow" "', argument " "1"" of type '" "qs::TermStructure const &""'"); 
  }
  arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CouponCashFlow" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (qs::CouponCashFlow *)new qs::CouponCashFlow((qs::TermStructure const &)*arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__CouponCashFlow, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_CouponCashFlow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_CouponCashFlow__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_CouponCashFlow__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_CouponCashFlow__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_CouponCashFlow__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_CouponCashFlow__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_CouponCashFlow__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_CouponCashFlow__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_CouponCashFlow__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_CouponCashFlow");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CouponCashFlow_to_start_cashflow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::CouponCashFlow *arg1 = (qs::CouponCashFlow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::StartCashFlow > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CouponCashFlow_to_start_cashflow.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__CouponCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CouponCashFlow_to_start_cashflow" "', argument " "1"" of type '" "qs::CouponCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::CouponCashFlow * >(argp1);
  result = ((qs::CouponCashFlow const *)arg1)->to_start_cashflow();
  jsresult = SWIG_NewPointerObj((new qs::StartCashFlow(static_cast< const qs::StartCashFlow& >(result))), SWIGTYPE_p_qs__StartCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CouponCashFlow_to_end_cashflow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::CouponCashFlow *arg1 = (qs::CouponCashFlow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::EndCashFlow > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CouponCashFlow_to_end_cashflow.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__CouponCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CouponCashFlow_to_end_cashflow" "', argument " "1"" of type '" "qs::CouponCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::CouponCashFlow * >(argp1);
  result = ((qs::CouponCashFlow const *)arg1)->to_end_cashflow();
  jsresult = SWIG_NewPointerObj((new qs::EndCashFlow(static_cast< const qs::EndCashFlow& >(result))), SWIGTYPE_p_qs__EndCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CouponCashFlow_to_coupon__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::CouponCashFlow *arg1 = (qs::CouponCashFlow *) 0 ;
  qs::InterestRate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< qs::CouponCashFlow > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__CouponCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CouponCashFlow_to_coupon" "', argument " "1"" of type '" "qs::CouponCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::CouponCashFlow * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CouponCashFlow_to_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CouponCashFlow_to_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  result = ((qs::CouponCashFlow const *)arg1)->to_coupon((qs::InterestRate const &)*arg2);
  jsresult = SWIG_NewPointerObj((new qs::CouponCashFlow(static_cast< const qs::CouponCashFlow& >(result))), SWIGTYPE_p_qs__CouponCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CouponCashFlow_to_coupon__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::CouponCashFlow *arg1 = (qs::CouponCashFlow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::CouponCashFlow > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__CouponCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CouponCashFlow_to_coupon" "', argument " "1"" of type '" "qs::CouponCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::CouponCashFlow * >(argp1);
  result = ((qs::CouponCashFlow const *)arg1)->to_coupon();
  jsresult = SWIG_NewPointerObj((new qs::CouponCashFlow(static_cast< const qs::CouponCashFlow& >(result))), SWIGTYPE_p_qs__CouponCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CouponCashFlow__wrap_CouponCashFlow_to_coupon(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_CouponCashFlow_to_coupon__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_CouponCashFlow_to_coupon__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_CouponCashFlow_to_coupon__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_CouponCashFlow_to_coupon__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function to_coupon.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CouponCashFlow_to_custom_cashflow__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::CouponCashFlow *arg1 = (qs::CouponCashFlow *) 0 ;
  qs::Maturity *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< qs::CustomCashFlow > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__CouponCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CouponCashFlow_to_custom_cashflow" "', argument " "1"" of type '" "qs::CouponCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::CouponCashFlow * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CouponCashFlow_to_custom_cashflow" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CouponCashFlow_to_custom_cashflow" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  result = ((qs::CouponCashFlow const *)arg1)->to_custom_cashflow((qs::Maturity const &)*arg2);
  jsresult = SWIG_NewPointerObj((new qs::CustomCashFlow(static_cast< const qs::CustomCashFlow& >(result))), SWIGTYPE_p_qs__CustomCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CouponCashFlow_to_custom_cashflow__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::CouponCashFlow *arg1 = (qs::CouponCashFlow *) 0 ;
  qs::Maturity *arg2 = 0 ;
  qs::InterestRate *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SwigValueWrapper< qs::CustomCashFlow > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__CouponCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CouponCashFlow_to_custom_cashflow" "', argument " "1"" of type '" "qs::CouponCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::CouponCashFlow * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CouponCashFlow_to_custom_cashflow" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CouponCashFlow_to_custom_cashflow" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CouponCashFlow_to_custom_cashflow" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CouponCashFlow_to_custom_cashflow" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  arg3 = reinterpret_cast< qs::InterestRate * >(argp3);
  result = ((qs::CouponCashFlow const *)arg1)->to_custom_cashflow((qs::Maturity const &)*arg2,(qs::InterestRate const &)*arg3);
  jsresult = SWIG_NewPointerObj((new qs::CustomCashFlow(static_cast< const qs::CustomCashFlow& >(result))), SWIGTYPE_p_qs__CustomCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CouponCashFlow__wrap_CouponCashFlow_to_custom_cashflow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_CouponCashFlow_to_custom_cashflow__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_CouponCashFlow_to_custom_cashflow__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_CouponCashFlow_to_custom_cashflow__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_CouponCashFlow_to_custom_cashflow__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function to_custom_cashflow.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_CouponCashFlow_growth_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_CouponCashFlow_growth_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    qs::CouponCashFlow *arg1 = (qs::CouponCashFlow *) 0 ;
    qs::InterestRate *arg2 = (qs::InterestRate *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__CouponCashFlow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CouponCashFlow_growth_set" "', argument " "1"" of type '" "qs::CouponCashFlow *""'"); 
    }
    arg1 = reinterpret_cast< qs::CouponCashFlow * >(argp1);
    res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_qs__InterestRate, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CouponCashFlow_growth_set" "', argument " "2"" of type '" "qs::InterestRate *""'"); 
    }
    arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
    if (arg1) (arg1)->growth = *arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_CouponCashFlow_growth_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_CouponCashFlow_growth_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    qs::CouponCashFlow *arg1 = (qs::CouponCashFlow *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    qs::InterestRate *result = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_qs__CouponCashFlow, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CouponCashFlow_growth_get" "', argument " "1"" of type '" "qs::CouponCashFlow *""'"); 
    }
    arg1 = reinterpret_cast< qs::CouponCashFlow * >(argp1);
    result = (qs::InterestRate *)& ((arg1)->growth);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qs__InterestRate, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_CouponCashFlow(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_CouponCashFlow(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_CouponCashFlow(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_CouponCashFlow(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_CouponCashFlow(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            qs::CouponCashFlow * arg1 = (qs::CouponCashFlow *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_StartCashFlow__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::Schedule *arg1 = 0 ;
  qs::InterestRate *arg2 = 0 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  qs::StartCashFlow *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_StartCashFlow__SWIG_0.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StartCashFlow" "', argument " "1"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StartCashFlow" "', argument " "1"" of type '" "qs::Schedule const &""'"); 
  }
  arg1 = reinterpret_cast< qs::Schedule * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StartCashFlow" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StartCashFlow" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_StartCashFlow" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (qs::StartCashFlow *)new qs::StartCashFlow((qs::Schedule const &)*arg1,(qs::InterestRate const &)*arg2,arg3);
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__StartCashFlow, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_StartCashFlow__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::TermStructure *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  qs::StartCashFlow *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_StartCashFlow__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__TermStructure,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StartCashFlow" "', argument " "1"" of type '" "qs::TermStructure const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StartCashFlow" "', argument " "1"" of type '" "qs::TermStructure const &""'"); 
  }
  arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_StartCashFlow" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (qs::StartCashFlow *)new qs::StartCashFlow((qs::TermStructure const &)*arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__StartCashFlow, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_StartCashFlow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_StartCashFlow__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_StartCashFlow__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_StartCashFlow__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_StartCashFlow__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_StartCashFlow");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StartCashFlow_to_start_cashflow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::StartCashFlow *arg1 = (qs::StartCashFlow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::StartCashFlow > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_StartCashFlow_to_start_cashflow.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__StartCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StartCashFlow_to_start_cashflow" "', argument " "1"" of type '" "qs::StartCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::StartCashFlow * >(argp1);
  result = ((qs::StartCashFlow const *)arg1)->to_start_cashflow();
  jsresult = SWIG_NewPointerObj((new qs::StartCashFlow(static_cast< const qs::StartCashFlow& >(result))), SWIGTYPE_p_qs__StartCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StartCashFlow_to_end_cashflow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::StartCashFlow *arg1 = (qs::StartCashFlow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::EndCashFlow > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_StartCashFlow_to_end_cashflow.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__StartCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StartCashFlow_to_end_cashflow" "', argument " "1"" of type '" "qs::StartCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::StartCashFlow * >(argp1);
  result = ((qs::StartCashFlow const *)arg1)->to_end_cashflow();
  jsresult = SWIG_NewPointerObj((new qs::EndCashFlow(static_cast< const qs::EndCashFlow& >(result))), SWIGTYPE_p_qs__EndCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StartCashFlow_to_coupon__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::StartCashFlow *arg1 = (qs::StartCashFlow *) 0 ;
  qs::InterestRate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< qs::CouponCashFlow > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__StartCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StartCashFlow_to_coupon" "', argument " "1"" of type '" "qs::StartCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::StartCashFlow * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StartCashFlow_to_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StartCashFlow_to_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  result = ((qs::StartCashFlow const *)arg1)->to_coupon((qs::InterestRate const &)*arg2);
  jsresult = SWIG_NewPointerObj((new qs::CouponCashFlow(static_cast< const qs::CouponCashFlow& >(result))), SWIGTYPE_p_qs__CouponCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StartCashFlow_to_coupon__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::StartCashFlow *arg1 = (qs::StartCashFlow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::CouponCashFlow > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__StartCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StartCashFlow_to_coupon" "', argument " "1"" of type '" "qs::StartCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::StartCashFlow * >(argp1);
  result = ((qs::StartCashFlow const *)arg1)->to_coupon();
  jsresult = SWIG_NewPointerObj((new qs::CouponCashFlow(static_cast< const qs::CouponCashFlow& >(result))), SWIGTYPE_p_qs__CouponCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StartCashFlow__wrap_StartCashFlow_to_coupon(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_StartCashFlow_to_coupon__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_StartCashFlow_to_coupon__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_StartCashFlow_to_coupon__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_StartCashFlow_to_coupon__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function to_coupon.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StartCashFlow_to_custom_cashflow__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::StartCashFlow *arg1 = (qs::StartCashFlow *) 0 ;
  qs::Maturity *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< qs::CustomCashFlow > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__StartCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StartCashFlow_to_custom_cashflow" "', argument " "1"" of type '" "qs::StartCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::StartCashFlow * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StartCashFlow_to_custom_cashflow" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StartCashFlow_to_custom_cashflow" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  result = ((qs::StartCashFlow const *)arg1)->to_custom_cashflow((qs::Maturity const &)*arg2);
  jsresult = SWIG_NewPointerObj((new qs::CustomCashFlow(static_cast< const qs::CustomCashFlow& >(result))), SWIGTYPE_p_qs__CustomCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StartCashFlow_to_custom_cashflow__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::StartCashFlow *arg1 = (qs::StartCashFlow *) 0 ;
  qs::Maturity *arg2 = 0 ;
  qs::InterestRate *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SwigValueWrapper< qs::CustomCashFlow > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__StartCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StartCashFlow_to_custom_cashflow" "', argument " "1"" of type '" "qs::StartCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::StartCashFlow * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StartCashFlow_to_custom_cashflow" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StartCashFlow_to_custom_cashflow" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StartCashFlow_to_custom_cashflow" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StartCashFlow_to_custom_cashflow" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  arg3 = reinterpret_cast< qs::InterestRate * >(argp3);
  result = ((qs::StartCashFlow const *)arg1)->to_custom_cashflow((qs::Maturity const &)*arg2,(qs::InterestRate const &)*arg3);
  jsresult = SWIG_NewPointerObj((new qs::CustomCashFlow(static_cast< const qs::CustomCashFlow& >(result))), SWIGTYPE_p_qs__CustomCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_StartCashFlow__wrap_StartCashFlow_to_custom_cashflow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_StartCashFlow_to_custom_cashflow__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_StartCashFlow_to_custom_cashflow__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_StartCashFlow_to_custom_cashflow__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_StartCashFlow_to_custom_cashflow__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function to_custom_cashflow.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_StartCashFlow(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_StartCashFlow(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_StartCashFlow(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_StartCashFlow(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_StartCashFlow(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            qs::StartCashFlow * arg1 = (qs::StartCashFlow *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_EndCashFlow__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::Schedule *arg1 = 0 ;
  qs::InterestRate *arg2 = 0 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  qs::EndCashFlow *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_EndCashFlow__SWIG_0.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EndCashFlow" "', argument " "1"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EndCashFlow" "', argument " "1"" of type '" "qs::Schedule const &""'"); 
  }
  arg1 = reinterpret_cast< qs::Schedule * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_EndCashFlow" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EndCashFlow" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_EndCashFlow" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (qs::EndCashFlow *)new qs::EndCashFlow((qs::Schedule const &)*arg1,(qs::InterestRate const &)*arg2,arg3);
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__EndCashFlow, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_EndCashFlow__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::TermStructure *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  qs::EndCashFlow *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_EndCashFlow__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__TermStructure,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EndCashFlow" "', argument " "1"" of type '" "qs::TermStructure const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EndCashFlow" "', argument " "1"" of type '" "qs::TermStructure const &""'"); 
  }
  arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_EndCashFlow" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (qs::EndCashFlow *)new qs::EndCashFlow((qs::TermStructure const &)*arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__EndCashFlow, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_EndCashFlow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_EndCashFlow__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_EndCashFlow__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_EndCashFlow__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_EndCashFlow__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_EndCashFlow");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EndCashFlow_to_start_cashflow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::EndCashFlow *arg1 = (qs::EndCashFlow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::StartCashFlow > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EndCashFlow_to_start_cashflow.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__EndCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndCashFlow_to_start_cashflow" "', argument " "1"" of type '" "qs::EndCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::EndCashFlow * >(argp1);
  result = ((qs::EndCashFlow const *)arg1)->to_start_cashflow();
  jsresult = SWIG_NewPointerObj((new qs::StartCashFlow(static_cast< const qs::StartCashFlow& >(result))), SWIGTYPE_p_qs__StartCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EndCashFlow_to_end_cashflow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::EndCashFlow *arg1 = (qs::EndCashFlow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::EndCashFlow > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EndCashFlow_to_end_cashflow.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__EndCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndCashFlow_to_end_cashflow" "', argument " "1"" of type '" "qs::EndCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::EndCashFlow * >(argp1);
  result = ((qs::EndCashFlow const *)arg1)->to_end_cashflow();
  jsresult = SWIG_NewPointerObj((new qs::EndCashFlow(static_cast< const qs::EndCashFlow& >(result))), SWIGTYPE_p_qs__EndCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EndCashFlow_to_coupon__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::EndCashFlow *arg1 = (qs::EndCashFlow *) 0 ;
  qs::InterestRate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< qs::CouponCashFlow > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__EndCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndCashFlow_to_coupon" "', argument " "1"" of type '" "qs::EndCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::EndCashFlow * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EndCashFlow_to_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EndCashFlow_to_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  result = ((qs::EndCashFlow const *)arg1)->to_coupon((qs::InterestRate const &)*arg2);
  jsresult = SWIG_NewPointerObj((new qs::CouponCashFlow(static_cast< const qs::CouponCashFlow& >(result))), SWIGTYPE_p_qs__CouponCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EndCashFlow_to_coupon__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::EndCashFlow *arg1 = (qs::EndCashFlow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::CouponCashFlow > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__EndCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndCashFlow_to_coupon" "', argument " "1"" of type '" "qs::EndCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::EndCashFlow * >(argp1);
  result = ((qs::EndCashFlow const *)arg1)->to_coupon();
  jsresult = SWIG_NewPointerObj((new qs::CouponCashFlow(static_cast< const qs::CouponCashFlow& >(result))), SWIGTYPE_p_qs__CouponCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EndCashFlow__wrap_EndCashFlow_to_coupon(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EndCashFlow_to_coupon__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EndCashFlow_to_coupon__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EndCashFlow_to_coupon__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EndCashFlow_to_coupon__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function to_coupon.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EndCashFlow_to_custom_cashflow__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::EndCashFlow *arg1 = (qs::EndCashFlow *) 0 ;
  qs::Maturity *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< qs::CustomCashFlow > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__EndCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndCashFlow_to_custom_cashflow" "', argument " "1"" of type '" "qs::EndCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::EndCashFlow * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EndCashFlow_to_custom_cashflow" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EndCashFlow_to_custom_cashflow" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  result = ((qs::EndCashFlow const *)arg1)->to_custom_cashflow((qs::Maturity const &)*arg2);
  jsresult = SWIG_NewPointerObj((new qs::CustomCashFlow(static_cast< const qs::CustomCashFlow& >(result))), SWIGTYPE_p_qs__CustomCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EndCashFlow_to_custom_cashflow__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::EndCashFlow *arg1 = (qs::EndCashFlow *) 0 ;
  qs::Maturity *arg2 = 0 ;
  qs::InterestRate *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SwigValueWrapper< qs::CustomCashFlow > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__EndCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndCashFlow_to_custom_cashflow" "', argument " "1"" of type '" "qs::EndCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::EndCashFlow * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EndCashFlow_to_custom_cashflow" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EndCashFlow_to_custom_cashflow" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EndCashFlow_to_custom_cashflow" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EndCashFlow_to_custom_cashflow" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  arg3 = reinterpret_cast< qs::InterestRate * >(argp3);
  result = ((qs::EndCashFlow const *)arg1)->to_custom_cashflow((qs::Maturity const &)*arg2,(qs::InterestRate const &)*arg3);
  jsresult = SWIG_NewPointerObj((new qs::CustomCashFlow(static_cast< const qs::CustomCashFlow& >(result))), SWIGTYPE_p_qs__CustomCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EndCashFlow__wrap_EndCashFlow_to_custom_cashflow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EndCashFlow_to_custom_cashflow__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EndCashFlow_to_custom_cashflow__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_EndCashFlow_to_custom_cashflow__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_EndCashFlow_to_custom_cashflow__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function to_custom_cashflow.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_EndCashFlow(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_EndCashFlow(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_EndCashFlow(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_EndCashFlow(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_EndCashFlow(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            qs::EndCashFlow * arg1 = (qs::EndCashFlow *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_CustomCashFlow__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::Schedule *arg1 = 0 ;
  qs::InterestRate *arg2 = 0 ;
  double arg3 ;
  qs::Maturity *arg4 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  qs::CustomCashFlow *result;
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_CustomCashFlow__SWIG_0.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__Schedule,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CustomCashFlow" "', argument " "1"" of type '" "qs::Schedule const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CustomCashFlow" "', argument " "1"" of type '" "qs::Schedule const &""'"); 
  }
  arg1 = reinterpret_cast< qs::Schedule * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CustomCashFlow" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CustomCashFlow" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CustomCashFlow" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_CustomCashFlow" "', argument " "4"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CustomCashFlow" "', argument " "4"" of type '" "qs::Maturity const &""'"); 
  }
  arg4 = reinterpret_cast< qs::Maturity * >(argp4);
  result = (qs::CustomCashFlow *)new qs::CustomCashFlow((qs::Schedule const &)*arg1,(qs::InterestRate const &)*arg2,arg3,(qs::Maturity const &)*arg4);
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__CustomCashFlow, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_CustomCashFlow__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  qs::TermStructure *arg1 = 0 ;
  double arg2 ;
  qs::Maturity *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  qs::CustomCashFlow *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_CustomCashFlow__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_qs__TermStructure,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CustomCashFlow" "', argument " "1"" of type '" "qs::TermStructure const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CustomCashFlow" "', argument " "1"" of type '" "qs::TermStructure const &""'"); 
  }
  arg1 = reinterpret_cast< qs::TermStructure * >(argp1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CustomCashFlow" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_CustomCashFlow" "', argument " "3"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CustomCashFlow" "', argument " "3"" of type '" "qs::Maturity const &""'"); 
  }
  arg3 = reinterpret_cast< qs::Maturity * >(argp3);
  result = (qs::CustomCashFlow *)new qs::CustomCashFlow((qs::TermStructure const &)*arg1,arg2,(qs::Maturity const &)*arg3);
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_qs__CustomCashFlow, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_CustomCashFlow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_CustomCashFlow__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_CustomCashFlow__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_CustomCashFlow__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_CustomCashFlow__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_CustomCashFlow");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CustomCashFlow_to_start_cashflow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::CustomCashFlow *arg1 = (qs::CustomCashFlow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::StartCashFlow > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CustomCashFlow_to_start_cashflow.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__CustomCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomCashFlow_to_start_cashflow" "', argument " "1"" of type '" "qs::CustomCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::CustomCashFlow * >(argp1);
  result = ((qs::CustomCashFlow const *)arg1)->to_start_cashflow();
  jsresult = SWIG_NewPointerObj((new qs::StartCashFlow(static_cast< const qs::StartCashFlow& >(result))), SWIGTYPE_p_qs__StartCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CustomCashFlow_to_end_cashflow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::CustomCashFlow *arg1 = (qs::CustomCashFlow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::EndCashFlow > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CustomCashFlow_to_end_cashflow.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__CustomCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomCashFlow_to_end_cashflow" "', argument " "1"" of type '" "qs::CustomCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::CustomCashFlow * >(argp1);
  result = ((qs::CustomCashFlow const *)arg1)->to_end_cashflow();
  jsresult = SWIG_NewPointerObj((new qs::EndCashFlow(static_cast< const qs::EndCashFlow& >(result))), SWIGTYPE_p_qs__EndCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CustomCashFlow_to_coupon__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::CustomCashFlow *arg1 = (qs::CustomCashFlow *) 0 ;
  qs::InterestRate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< qs::CouponCashFlow > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__CustomCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomCashFlow_to_coupon" "', argument " "1"" of type '" "qs::CustomCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::CustomCashFlow * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomCashFlow_to_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomCashFlow_to_coupon" "', argument " "2"" of type '" "qs::InterestRate const &""'"); 
  }
  arg2 = reinterpret_cast< qs::InterestRate * >(argp2);
  result = ((qs::CustomCashFlow const *)arg1)->to_coupon((qs::InterestRate const &)*arg2);
  jsresult = SWIG_NewPointerObj((new qs::CouponCashFlow(static_cast< const qs::CouponCashFlow& >(result))), SWIGTYPE_p_qs__CouponCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CustomCashFlow_to_coupon__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::CustomCashFlow *arg1 = (qs::CustomCashFlow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< qs::CouponCashFlow > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__CustomCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomCashFlow_to_coupon" "', argument " "1"" of type '" "qs::CustomCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::CustomCashFlow * >(argp1);
  result = ((qs::CustomCashFlow const *)arg1)->to_coupon();
  jsresult = SWIG_NewPointerObj((new qs::CouponCashFlow(static_cast< const qs::CouponCashFlow& >(result))), SWIGTYPE_p_qs__CouponCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CustomCashFlow__wrap_CustomCashFlow_to_coupon(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_CustomCashFlow_to_coupon__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_CustomCashFlow_to_coupon__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_CustomCashFlow_to_coupon__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_CustomCashFlow_to_coupon__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function to_coupon.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CustomCashFlow_to_custom_cashflow__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::CustomCashFlow *arg1 = (qs::CustomCashFlow *) 0 ;
  qs::Maturity *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< qs::CustomCashFlow > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__CustomCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomCashFlow_to_custom_cashflow" "', argument " "1"" of type '" "qs::CustomCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::CustomCashFlow * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomCashFlow_to_custom_cashflow" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomCashFlow_to_custom_cashflow" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  result = ((qs::CustomCashFlow const *)arg1)->to_custom_cashflow((qs::Maturity const &)*arg2);
  jsresult = SWIG_NewPointerObj((new qs::CustomCashFlow(static_cast< const qs::CustomCashFlow& >(result))), SWIGTYPE_p_qs__CustomCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CustomCashFlow_to_custom_cashflow__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::CustomCashFlow *arg1 = (qs::CustomCashFlow *) 0 ;
  qs::Maturity *arg2 = 0 ;
  qs::InterestRate *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  SwigValueWrapper< qs::CustomCashFlow > result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__CustomCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomCashFlow_to_custom_cashflow" "', argument " "1"" of type '" "qs::CustomCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::CustomCashFlow * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_qs__Maturity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CustomCashFlow_to_custom_cashflow" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomCashFlow_to_custom_cashflow" "', argument " "2"" of type '" "qs::Maturity const &""'"); 
  }
  arg2 = reinterpret_cast< qs::Maturity * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_qs__InterestRate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CustomCashFlow_to_custom_cashflow" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CustomCashFlow_to_custom_cashflow" "', argument " "3"" of type '" "qs::InterestRate const &""'"); 
  }
  arg3 = reinterpret_cast< qs::InterestRate * >(argp3);
  result = ((qs::CustomCashFlow const *)arg1)->to_custom_cashflow((qs::Maturity const &)*arg2,(qs::InterestRate const &)*arg3);
  jsresult = SWIG_NewPointerObj((new qs::CustomCashFlow(static_cast< const qs::CustomCashFlow& >(result))), SWIGTYPE_p_qs__CustomCashFlow, SWIG_POINTER_OWN |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CustomCashFlow__wrap_CustomCashFlow_to_custom_cashflow(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_CustomCashFlow_to_custom_cashflow__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_CustomCashFlow_to_custom_cashflow__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_CustomCashFlow_to_custom_cashflow__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_CustomCashFlow_to_custom_cashflow__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function to_custom_cashflow.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CustomCashFlow_get_maturity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  qs::CustomCashFlow *arg1 = (qs::CustomCashFlow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  qs::Maturity *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CustomCashFlow_get_maturity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_qs__CustomCashFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CustomCashFlow_get_maturity" "', argument " "1"" of type '" "qs::CustomCashFlow const *""'"); 
  }
  arg1 = reinterpret_cast< qs::CustomCashFlow * >(argp1);
  result = (qs::Maturity *) &((qs::CustomCashFlow const *)arg1)->get_maturity();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_qs__Maturity, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_CustomCashFlow(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_CustomCashFlow(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_CustomCashFlow(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_CustomCashFlow(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_CustomCashFlow(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            qs::CustomCashFlow * arg1 = (qs::CustomCashFlow *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_TxFrom_txid_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_TxFrom_txid_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    pf::TxFrom *arg1 = (pf::TxFrom *) 0 ;
    long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__TxFrom, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TxFrom_txid_set" "', argument " "1"" of type '" "pf::TxFrom *""'"); 
    }
    arg1 = reinterpret_cast< pf::TxFrom * >(argp1);
    ecode2 = SWIG_AsVal_long(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TxFrom_txid_set" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    if (arg1) (arg1)->txid = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_TxFrom_txid_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_TxFrom_txid_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    pf::TxFrom *arg1 = (pf::TxFrom *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__TxFrom, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TxFrom_txid_get" "', argument " "1"" of type '" "pf::TxFrom *""'"); 
    }
    arg1 = reinterpret_cast< pf::TxFrom * >(argp1);
    result = (long) ((arg1)->txid);
    jsresult = SWIG_From_long(static_cast< long >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_TxFrom_vout_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_TxFrom_vout_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    pf::TxFrom *arg1 = (pf::TxFrom *) 0 ;
    long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__TxFrom, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TxFrom_vout_set" "', argument " "1"" of type '" "pf::TxFrom *""'"); 
    }
    arg1 = reinterpret_cast< pf::TxFrom * >(argp1);
    ecode2 = SWIG_AsVal_long(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TxFrom_vout_set" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    if (arg1) (arg1)->vout = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_TxFrom_vout_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_TxFrom_vout_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    pf::TxFrom *arg1 = (pf::TxFrom *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__TxFrom, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TxFrom_vout_get" "', argument " "1"" of type '" "pf::TxFrom *""'"); 
    }
    arg1 = reinterpret_cast< pf::TxFrom * >(argp1);
    result = (long) ((arg1)->vout);
    jsresult = SWIG_From_long(static_cast< long >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_new_TxFrom(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  pf::TxFrom *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TxFrom.");
  result = (pf::TxFrom *)new pf::TxFrom();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_pf__TxFrom, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TxFrom(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TxFrom(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TxFrom(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_TxFrom(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_TxFrom(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            pf::TxFrom * arg1 = (pf::TxFrom *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_TxTo_amount_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_TxTo_amount_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    pf::TxTo *arg1 = (pf::TxTo *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__TxTo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TxTo_amount_set" "', argument " "1"" of type '" "pf::TxTo *""'"); 
    }
    arg1 = reinterpret_cast< pf::TxTo * >(argp1);
    ecode2 = SWIG_AsVal_double(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TxTo_amount_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (arg1) (arg1)->amount = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_TxTo_amount_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_TxTo_amount_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    pf::TxTo *arg1 = (pf::TxTo *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__TxTo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TxTo_amount_get" "', argument " "1"" of type '" "pf::TxTo *""'"); 
    }
    arg1 = reinterpret_cast< pf::TxTo * >(argp1);
    result = (double) ((arg1)->amount);
    jsresult = SWIG_From_double(static_cast< double >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_TxTo_currency_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_TxTo_currency_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    pf::TxTo *arg1 = (pf::TxTo *) 0 ;
    std::string *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__TxTo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TxTo_currency_set" "', argument " "1"" of type '" "pf::TxTo *""'"); 
    }
    arg1 = reinterpret_cast< pf::TxTo * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string(value, &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TxTo_currency_set" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TxTo_currency_set" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      arg2 = ptr;
    }
    if (arg1) (arg1)->currency = *arg2;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_TxTo_currency_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_TxTo_currency_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    pf::TxTo *arg1 = (pf::TxTo *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::string *result = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__TxTo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TxTo_currency_get" "', argument " "1"" of type '" "pf::TxTo *""'"); 
    }
    arg1 = reinterpret_cast< pf::TxTo * >(argp1);
    result = (std::string *) & ((arg1)->currency);
    jsresult = SWIG_From_std_string(static_cast< std::string >(*result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_TxTo_wallet_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_TxTo_wallet_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    pf::TxTo *arg1 = (pf::TxTo *) 0 ;
    long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__TxTo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TxTo_wallet_set" "', argument " "1"" of type '" "pf::TxTo *""'"); 
    }
    arg1 = reinterpret_cast< pf::TxTo * >(argp1);
    ecode2 = SWIG_AsVal_long(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TxTo_wallet_set" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    if (arg1) (arg1)->wallet = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_TxTo_wallet_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_TxTo_wallet_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    pf::TxTo *arg1 = (pf::TxTo *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__TxTo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TxTo_wallet_get" "', argument " "1"" of type '" "pf::TxTo *""'"); 
    }
    arg1 = reinterpret_cast< pf::TxTo * >(argp1);
    result = (long) ((arg1)->wallet);
    jsresult = SWIG_From_long(static_cast< long >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_new_TxTo(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  pf::TxTo *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TxTo.");
  result = (pf::TxTo *)new pf::TxTo();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_pf__TxTo, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_TxTo(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_TxTo(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_TxTo(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_TxTo(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_TxTo(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            pf::TxTo * arg1 = (pf::TxTo *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_amount_info(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  double arg1 ;
  std::string arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  pf::amount_info *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_amount_info.");
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_amount_info" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_amount_info" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (pf::amount_info *)new pf::amount_info(arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_pf__amount_info, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_amount_info_get_amount(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::amount_info *arg1 = (pf::amount_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_amount_info_get_amount.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__amount_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "amount_info_get_amount" "', argument " "1"" of type '" "pf::amount_info const *""'"); 
  }
  arg1 = reinterpret_cast< pf::amount_info * >(argp1);
  result = (double)((pf::amount_info const *)arg1)->get_amount();
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_amount_info_get_currency(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::amount_info *arg1 = (pf::amount_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_amount_info_get_currency.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__amount_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "amount_info_get_currency" "', argument " "1"" of type '" "pf::amount_info const *""'"); 
  }
  arg1 = reinterpret_cast< pf::amount_info * >(argp1);
  result = (std::string *) &((pf::amount_info const *)arg1)->get_currency();
  jsresult = SWIG_From_std_string(static_cast< std::string >(*result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_amount_info(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_amount_info(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_amount_info(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_amount_info(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_amount_info(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            pf::amount_info * arg1 = (pf::amount_info *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Transaction_txid_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Transaction_txid_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    pf::Transaction *arg1 = (pf::Transaction *) 0 ;
    long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__Transaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transaction_txid_set" "', argument " "1"" of type '" "pf::Transaction *""'"); 
    }
    arg1 = reinterpret_cast< pf::Transaction * >(argp1);
    ecode2 = SWIG_AsVal_long(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transaction_txid_set" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    if (arg1) (arg1)->txid = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Transaction_txid_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Transaction_txid_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    pf::Transaction *arg1 = (pf::Transaction *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__Transaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transaction_txid_get" "', argument " "1"" of type '" "pf::Transaction *""'"); 
    }
    arg1 = reinterpret_cast< pf::Transaction * >(argp1);
    result = (long) ((arg1)->txid);
    jsresult = SWIG_From_long(static_cast< long >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Transaction_description_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Transaction_description_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    pf::Transaction *arg1 = (pf::Transaction *) 0 ;
    std::string *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__Transaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transaction_description_set" "', argument " "1"" of type '" "pf::Transaction *""'"); 
    }
    arg1 = reinterpret_cast< pf::Transaction * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string(value, &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transaction_description_set" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transaction_description_set" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      arg2 = ptr;
    }
    if (arg1) (arg1)->description = *arg2;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Transaction_description_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Transaction_description_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    pf::Transaction *arg1 = (pf::Transaction *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::string *result = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__Transaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transaction_description_get" "', argument " "1"" of type '" "pf::Transaction *""'"); 
    }
    arg1 = reinterpret_cast< pf::Transaction * >(argp1);
    result = (std::string *) & ((arg1)->description);
    jsresult = SWIG_From_std_string(static_cast< std::string >(*result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Transaction_group_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Transaction_group_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    pf::Transaction *arg1 = (pf::Transaction *) 0 ;
    std::string *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__Transaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transaction_group_set" "', argument " "1"" of type '" "pf::Transaction *""'"); 
    }
    arg1 = reinterpret_cast< pf::Transaction * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string(value, &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transaction_group_set" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transaction_group_set" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      arg2 = ptr;
    }
    if (arg1) (arg1)->group = *arg2;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Transaction_group_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Transaction_group_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    pf::Transaction *arg1 = (pf::Transaction *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::string *result = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__Transaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transaction_group_get" "', argument " "1"" of type '" "pf::Transaction *""'"); 
    }
    arg1 = reinterpret_cast< pf::Transaction * >(argp1);
    result = (std::string *) & ((arg1)->group);
    jsresult = SWIG_From_std_string(static_cast< std::string >(*result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Transaction_pay_id_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Transaction_pay_id_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    pf::Transaction *arg1 = (pf::Transaction *) 0 ;
    std::string *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__Transaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transaction_pay_id_set" "', argument " "1"" of type '" "pf::Transaction *""'"); 
    }
    arg1 = reinterpret_cast< pf::Transaction * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string(value, &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transaction_pay_id_set" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transaction_pay_id_set" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      arg2 = ptr;
    }
    if (arg1) (arg1)->pay_id = *arg2;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Transaction_pay_id_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Transaction_pay_id_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    pf::Transaction *arg1 = (pf::Transaction *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::string *result = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__Transaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transaction_pay_id_get" "', argument " "1"" of type '" "pf::Transaction *""'"); 
    }
    arg1 = reinterpret_cast< pf::Transaction * >(argp1);
    result = (std::string *) & ((arg1)->pay_id);
    jsresult = SWIG_From_std_string(static_cast< std::string >(*result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Transaction_contract_id_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Transaction_contract_id_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    pf::Transaction *arg1 = (pf::Transaction *) 0 ;
    std::string *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__Transaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transaction_contract_id_set" "', argument " "1"" of type '" "pf::Transaction *""'"); 
    }
    arg1 = reinterpret_cast< pf::Transaction * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string(value, &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transaction_contract_id_set" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transaction_contract_id_set" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      arg2 = ptr;
    }
    if (arg1) (arg1)->contract_id = *arg2;
    
    if (SWIG_IsNewObj(res2)) delete arg2;
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Transaction_contract_id_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Transaction_contract_id_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    pf::Transaction *arg1 = (pf::Transaction *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::string *result = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__Transaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transaction_contract_id_get" "', argument " "1"" of type '" "pf::Transaction *""'"); 
    }
    arg1 = reinterpret_cast< pf::Transaction * >(argp1);
    result = (std::string *) & ((arg1)->contract_id);
    jsresult = SWIG_From_std_string(static_cast< std::string >(*result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Transaction_amounts_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Transaction_amounts_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    pf::Transaction *arg1 = (pf::Transaction *) 0 ;
    std::vector< pf::amount_info > *arg2 = (std::vector< pf::amount_info > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__Transaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transaction_amounts_set" "', argument " "1"" of type '" "pf::Transaction *""'"); 
    }
    arg1 = reinterpret_cast< pf::Transaction * >(argp1);
    res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_pf__amount_info_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transaction_amounts_set" "', argument " "2"" of type '" "std::vector< pf::amount_info > *""'"); 
    }
    arg2 = reinterpret_cast< std::vector< pf::amount_info > * >(argp2);
    if (arg1) (arg1)->amounts = *arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Transaction_amounts_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Transaction_amounts_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    pf::Transaction *arg1 = (pf::Transaction *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< pf::amount_info > *result = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__Transaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transaction_amounts_get" "', argument " "1"" of type '" "pf::Transaction *""'"); 
    }
    arg1 = reinterpret_cast< pf::Transaction * >(argp1);
    result = (std::vector< pf::amount_info > *)& ((arg1)->amounts);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_pf__amount_info_t, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Transaction_froms_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Transaction_froms_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    pf::Transaction *arg1 = (pf::Transaction *) 0 ;
    std::vector< pf::TxFrom > *arg2 = (std::vector< pf::TxFrom > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__Transaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transaction_froms_set" "', argument " "1"" of type '" "pf::Transaction *""'"); 
    }
    arg1 = reinterpret_cast< pf::Transaction * >(argp1);
    res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_pf__TxFrom_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transaction_froms_set" "', argument " "2"" of type '" "std::vector< pf::TxFrom > *""'"); 
    }
    arg2 = reinterpret_cast< std::vector< pf::TxFrom > * >(argp2);
    if (arg1) (arg1)->froms = *arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Transaction_froms_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Transaction_froms_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    pf::Transaction *arg1 = (pf::Transaction *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< pf::TxFrom > *result = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__Transaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transaction_froms_get" "', argument " "1"" of type '" "pf::Transaction *""'"); 
    }
    arg1 = reinterpret_cast< pf::Transaction * >(argp1);
    result = (std::vector< pf::TxFrom > *)& ((arg1)->froms);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_pf__TxFrom_t, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Transaction_tos_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Transaction_tos_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    pf::Transaction *arg1 = (pf::Transaction *) 0 ;
    std::vector< pf::TxTo > *arg2 = (std::vector< pf::TxTo > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__Transaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transaction_tos_set" "', argument " "1"" of type '" "pf::Transaction *""'"); 
    }
    arg1 = reinterpret_cast< pf::Transaction * >(argp1);
    res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_pf__TxTo_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transaction_tos_set" "', argument " "2"" of type '" "std::vector< pf::TxTo > *""'"); 
    }
    arg2 = reinterpret_cast< std::vector< pf::TxTo > * >(argp2);
    if (arg1) (arg1)->tos = *arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Transaction_tos_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Transaction_tos_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    pf::Transaction *arg1 = (pf::Transaction *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< pf::TxTo > *result = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__Transaction, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transaction_tos_get" "', argument " "1"" of type '" "pf::Transaction *""'"); 
    }
    arg1 = reinterpret_cast< pf::Transaction * >(argp1);
    result = (std::vector< pf::TxTo > *)& ((arg1)->tos);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_pf__TxTo_t, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_Transaction_get_amount(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::Transaction *arg1 = (pf::Transaction *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Transaction_get_amount.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__Transaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transaction_get_amount" "', argument " "1"" of type '" "pf::Transaction *""'"); 
  }
  arg1 = reinterpret_cast< pf::Transaction * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transaction_get_amount" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transaction_get_amount" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->get_amount((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Transaction(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  pf::Transaction *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Transaction.");
  result = (pf::Transaction *)new pf::Transaction();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_pf__Transaction, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Transaction(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Transaction(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Transaction(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_Transaction(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_Transaction(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            pf::Transaction * arg1 = (pf::Transaction *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_tuple_hash(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  pf::tuple_hash *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_tuple_hash.");
  result = (pf::tuple_hash *)new pf::tuple_hash();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_pf__tuple_hash, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_tuple_hash(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_tuple_hash(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_tuple_hash(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_tuple_hash(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_tuple_hash(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            pf::tuple_hash * arg1 = (pf::tuple_hash *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_BlockChain_data_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_BlockChain_data_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    pf::BlockChain *arg1 = (pf::BlockChain *) 0 ;
    std::vector< pf::Transaction > *arg2 = (std::vector< pf::Transaction > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__BlockChain, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockChain_data_set" "', argument " "1"" of type '" "pf::BlockChain *""'"); 
    }
    arg1 = reinterpret_cast< pf::BlockChain * >(argp1);
    res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__vectorT_pf__Transaction_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlockChain_data_set" "', argument " "2"" of type '" "std::vector< pf::Transaction > *""'"); 
    }
    arg2 = reinterpret_cast< std::vector< pf::Transaction > * >(argp2);
    if (arg1) (arg1)->data = *arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_BlockChain_data_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_BlockChain_data_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    pf::BlockChain *arg1 = (pf::BlockChain *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< pf::Transaction > *result = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__BlockChain, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockChain_data_get" "', argument " "1"" of type '" "pf::BlockChain *""'"); 
    }
    arg1 = reinterpret_cast< pf::BlockChain * >(argp1);
    result = (std::vector< pf::Transaction > *)& ((arg1)->data);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_pf__Transaction_t, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_BlockChain_lastid_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_BlockChain_lastid_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    pf::BlockChain *arg1 = (pf::BlockChain *) 0 ;
    long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__BlockChain, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockChain_lastid_set" "', argument " "1"" of type '" "pf::BlockChain *""'"); 
    }
    arg1 = reinterpret_cast< pf::BlockChain * >(argp1);
    ecode2 = SWIG_AsVal_long(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockChain_lastid_set" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    if (arg1) (arg1)->lastid = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_BlockChain_lastid_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_BlockChain_lastid_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    pf::BlockChain *arg1 = (pf::BlockChain *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__BlockChain, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockChain_lastid_get" "', argument " "1"" of type '" "pf::BlockChain *""'"); 
    }
    arg1 = reinterpret_cast< pf::BlockChain * >(argp1);
    result = (long) ((arg1)->lastid);
    jsresult = SWIG_From_long(static_cast< long >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_BlockChain_cached_txtos_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_BlockChain_cached_txtos_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    pf::BlockChain *arg1 = (pf::BlockChain *) 0 ;
    std::unordered_map< std::tuple< long,long >,std::tuple< pf::Transaction,pf::TxTo >,pf::tuple_hash > *arg2 = (std::unordered_map< std::tuple< long,long >,std::tuple< pf::Transaction,pf::TxTo >,pf::tuple_hash > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__BlockChain, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockChain_cached_txtos_set" "', argument " "1"" of type '" "pf::BlockChain *""'"); 
    }
    arg1 = reinterpret_cast< pf::BlockChain * >(argp1);
    res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_std__unordered_mapT_std__tupleT_long_long_t_std__tupleT_pf__Transaction_pf__TxTo_t_pf__tuple_hash_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlockChain_cached_txtos_set" "', argument " "2"" of type '" "std::unordered_map< std::tuple< long,long >,std::tuple< pf::Transaction,pf::TxTo >,pf::tuple_hash > *""'"); 
    }
    arg2 = reinterpret_cast< std::unordered_map< std::tuple< long,long >,std::tuple< pf::Transaction,pf::TxTo >,pf::tuple_hash > * >(argp2);
    if (arg1) (arg1)->cached_txtos = *arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_BlockChain_cached_txtos_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_BlockChain_cached_txtos_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    pf::BlockChain *arg1 = (pf::BlockChain *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::unordered_map< std::tuple< long,long >,std::tuple< pf::Transaction,pf::TxTo >,pf::tuple_hash > *result = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__BlockChain, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockChain_cached_txtos_get" "', argument " "1"" of type '" "pf::BlockChain *""'"); 
    }
    arg1 = reinterpret_cast< pf::BlockChain * >(argp1);
    result = (std::unordered_map< std::tuple< long,long >,std::tuple< pf::Transaction,pf::TxTo >,pf::tuple_hash > *)& ((arg1)->cached_txtos);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__unordered_mapT_std__tupleT_long_long_t_std__tupleT_pf__Transaction_pf__TxTo_t_pf__tuple_hash_t, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_new_BlockChain(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  pf::BlockChain *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_BlockChain.");
  result = (pf::BlockChain *)new pf::BlockChain();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_pf__BlockChain, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BlockChain_nextid(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::BlockChain *arg1 = (pf::BlockChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BlockChain_nextid.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__BlockChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockChain_nextid" "', argument " "1"" of type '" "pf::BlockChain *""'"); 
  }
  arg1 = reinterpret_cast< pf::BlockChain * >(argp1);
  result = (long)(arg1)->nextid();
  jsresult = SWIG_From_long(static_cast< long >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BlockChain_is_utxo(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::BlockChain *arg1 = (pf::BlockChain *) 0 ;
  pf::Transaction *arg2 = 0 ;
  pf::TxTo *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BlockChain_is_utxo.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__BlockChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockChain_is_utxo" "', argument " "1"" of type '" "pf::BlockChain const *""'"); 
  }
  arg1 = reinterpret_cast< pf::BlockChain * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_pf__Transaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlockChain_is_utxo" "', argument " "2"" of type '" "pf::Transaction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockChain_is_utxo" "', argument " "2"" of type '" "pf::Transaction const &""'"); 
  }
  arg2 = reinterpret_cast< pf::Transaction * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_pf__TxTo,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BlockChain_is_utxo" "', argument " "3"" of type '" "pf::TxTo const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockChain_is_utxo" "', argument " "3"" of type '" "pf::TxTo const &""'"); 
  }
  arg3 = reinterpret_cast< pf::TxTo * >(argp3);
  result = (bool)((pf::BlockChain const *)arg1)->is_utxo((pf::Transaction const &)*arg2,(pf::TxTo const &)*arg3);
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BlockChain_get_utxos(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::BlockChain *arg1 = (pf::BlockChain *) 0 ;
  long arg2 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  SwigValueWrapper< std::vector< std::tuple< pf::Transaction,pf::TxTo,size_t > > > result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BlockChain_get_utxos.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__BlockChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockChain_get_utxos" "', argument " "1"" of type '" "pf::BlockChain *""'"); 
  }
  arg1 = reinterpret_cast< pf::BlockChain * >(argp1);
  ecode2 = SWIG_AsVal_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockChain_get_utxos" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlockChain_get_utxos" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(args[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BlockChain_get_utxos" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockChain_get_utxos" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  result = (arg1)->get_utxos(arg2,arg3,(std::string const &)*arg4);
  jsresult = SWIG_NewPointerObj((new std::vector< std::tuple< pf::Transaction,pf::TxTo,size_t > >(static_cast< const std::vector< std::tuple< pf::Transaction,pf::TxTo,size_t > >& >(result))), SWIGTYPE_p_std__vectorT_std__tupleT_pf__Transaction_pf__TxTo_size_t_t_t, SWIG_POINTER_OWN |  0 );
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BlockChain_add_transaction__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::BlockChain *arg1 = (pf::BlockChain *) 0 ;
  long arg2 ;
  long arg3 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  double arg8 ;
  std::string *arg9 = 0 ;
  size_t arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  int res7 = SWIG_OLDOBJ ;
  double val8 ;
  int ecode8 = 0 ;
  int res9 = SWIG_OLDOBJ ;
  size_t val10 ;
  int ecode10 = 0 ;
  pf::Transaction result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__BlockChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockChain_add_transaction" "', argument " "1"" of type '" "pf::BlockChain *""'"); 
  }
  arg1 = reinterpret_cast< pf::BlockChain * >(argp1);
  ecode2 = SWIG_AsVal_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockChain_add_transaction" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlockChain_add_transaction" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_double(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BlockChain_add_transaction" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(args[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BlockChain_add_transaction" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockChain_add_transaction" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(args[4], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "BlockChain_add_transaction" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockChain_add_transaction" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res7 = SWIG_AsPtr_std_string(args[5], &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "BlockChain_add_transaction" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockChain_add_transaction" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    arg7 = ptr;
  }
  ecode8 = SWIG_AsVal_double(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "BlockChain_add_transaction" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    std::string *ptr = (std::string *)0;
    res9 = SWIG_AsPtr_std_string(args[7], &ptr);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "BlockChain_add_transaction" "', argument " "9"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockChain_add_transaction" "', argument " "9"" of type '" "std::string const &""'"); 
    }
    arg9 = ptr;
  }
  ecode10 = SWIG_AsVal_size_t(args[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "BlockChain_add_transaction" "', argument " "10"" of type '" "size_t""'");
  } 
  arg10 = static_cast< size_t >(val10);
  result = (arg1)->add_transaction(arg2,arg3,arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,arg8,(std::string const &)*arg9,arg10);
  jsresult = SWIG_NewPointerObj((new pf::Transaction(static_cast< const pf::Transaction& >(result))), SWIGTYPE_p_pf__Transaction, SWIG_POINTER_OWN |  0 );
  
  
  
  
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  
  if (SWIG_IsNewObj(res9)) delete arg9;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BlockChain_add_transaction__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::BlockChain *arg1 = (pf::BlockChain *) 0 ;
  long arg2 ;
  long arg3 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  double arg8 ;
  std::string *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  int res7 = SWIG_OLDOBJ ;
  double val8 ;
  int ecode8 = 0 ;
  int res9 = SWIG_OLDOBJ ;
  pf::Transaction result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__BlockChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockChain_add_transaction" "', argument " "1"" of type '" "pf::BlockChain *""'"); 
  }
  arg1 = reinterpret_cast< pf::BlockChain * >(argp1);
  ecode2 = SWIG_AsVal_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockChain_add_transaction" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlockChain_add_transaction" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_double(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BlockChain_add_transaction" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(args[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BlockChain_add_transaction" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockChain_add_transaction" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(args[4], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "BlockChain_add_transaction" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockChain_add_transaction" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res7 = SWIG_AsPtr_std_string(args[5], &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "BlockChain_add_transaction" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockChain_add_transaction" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    arg7 = ptr;
  }
  ecode8 = SWIG_AsVal_double(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "BlockChain_add_transaction" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    std::string *ptr = (std::string *)0;
    res9 = SWIG_AsPtr_std_string(args[7], &ptr);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "BlockChain_add_transaction" "', argument " "9"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockChain_add_transaction" "', argument " "9"" of type '" "std::string const &""'"); 
    }
    arg9 = ptr;
  }
  result = (arg1)->add_transaction(arg2,arg3,arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,arg8,(std::string const &)*arg9);
  jsresult = SWIG_NewPointerObj((new pf::Transaction(static_cast< const pf::Transaction& >(result))), SWIGTYPE_p_pf__Transaction, SWIG_POINTER_OWN |  0 );
  
  
  
  
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  
  if (SWIG_IsNewObj(res9)) delete arg9;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BlockChain_add_transaction__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::BlockChain *arg1 = (pf::BlockChain *) 0 ;
  long arg2 ;
  long arg3 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  int res7 = SWIG_OLDOBJ ;
  double val8 ;
  int ecode8 = 0 ;
  pf::Transaction result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__BlockChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockChain_add_transaction" "', argument " "1"" of type '" "pf::BlockChain *""'"); 
  }
  arg1 = reinterpret_cast< pf::BlockChain * >(argp1);
  ecode2 = SWIG_AsVal_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockChain_add_transaction" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlockChain_add_transaction" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_double(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BlockChain_add_transaction" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(args[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BlockChain_add_transaction" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockChain_add_transaction" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(args[4], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "BlockChain_add_transaction" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockChain_add_transaction" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res7 = SWIG_AsPtr_std_string(args[5], &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "BlockChain_add_transaction" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockChain_add_transaction" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    arg7 = ptr;
  }
  ecode8 = SWIG_AsVal_double(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "BlockChain_add_transaction" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  result = (arg1)->add_transaction(arg2,arg3,arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,arg8);
  jsresult = SWIG_NewPointerObj((new pf::Transaction(static_cast< const pf::Transaction& >(result))), SWIGTYPE_p_pf__Transaction, SWIG_POINTER_OWN |  0 );
  
  
  
  
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BlockChain_add_transaction__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::BlockChain *arg1 = (pf::BlockChain *) 0 ;
  long arg2 ;
  long arg3 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  int res7 = SWIG_OLDOBJ ;
  pf::Transaction result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__BlockChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockChain_add_transaction" "', argument " "1"" of type '" "pf::BlockChain *""'"); 
  }
  arg1 = reinterpret_cast< pf::BlockChain * >(argp1);
  ecode2 = SWIG_AsVal_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockChain_add_transaction" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlockChain_add_transaction" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_double(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BlockChain_add_transaction" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(args[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BlockChain_add_transaction" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockChain_add_transaction" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(args[4], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "BlockChain_add_transaction" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockChain_add_transaction" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res7 = SWIG_AsPtr_std_string(args[5], &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "BlockChain_add_transaction" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockChain_add_transaction" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    arg7 = ptr;
  }
  result = (arg1)->add_transaction(arg2,arg3,arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7);
  jsresult = SWIG_NewPointerObj((new pf::Transaction(static_cast< const pf::Transaction& >(result))), SWIGTYPE_p_pf__Transaction, SWIG_POINTER_OWN |  0 );
  
  
  
  
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BlockChain_add_transaction__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::BlockChain *arg1 = (pf::BlockChain *) 0 ;
  long arg2 ;
  long arg3 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  pf::Transaction result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__BlockChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockChain_add_transaction" "', argument " "1"" of type '" "pf::BlockChain *""'"); 
  }
  arg1 = reinterpret_cast< pf::BlockChain * >(argp1);
  ecode2 = SWIG_AsVal_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockChain_add_transaction" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlockChain_add_transaction" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_double(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BlockChain_add_transaction" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(args[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BlockChain_add_transaction" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockChain_add_transaction" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(args[4], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "BlockChain_add_transaction" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockChain_add_transaction" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  result = (arg1)->add_transaction(arg2,arg3,arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  jsresult = SWIG_NewPointerObj((new pf::Transaction(static_cast< const pf::Transaction& >(result))), SWIGTYPE_p_pf__Transaction, SWIG_POINTER_OWN |  0 );
  
  
  
  
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BlockChain_add_transaction__SWIG_5(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::BlockChain *arg1 = (pf::BlockChain *) 0 ;
  long arg2 ;
  long arg3 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  pf::Transaction result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__BlockChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockChain_add_transaction" "', argument " "1"" of type '" "pf::BlockChain *""'"); 
  }
  arg1 = reinterpret_cast< pf::BlockChain * >(argp1);
  ecode2 = SWIG_AsVal_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockChain_add_transaction" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlockChain_add_transaction" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_double(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BlockChain_add_transaction" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(args[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BlockChain_add_transaction" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockChain_add_transaction" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  result = (arg1)->add_transaction(arg2,arg3,arg4,(std::string const &)*arg5);
  jsresult = SWIG_NewPointerObj((new pf::Transaction(static_cast< const pf::Transaction& >(result))), SWIGTYPE_p_pf__Transaction, SWIG_POINTER_OWN |  0 );
  
  
  
  
  if (SWIG_IsNewObj(res5)) delete arg5;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BlockChain__wrap_BlockChain_add_transaction(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 9) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_BlockChain_add_transaction__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_BlockChain_add_transaction__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 8) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_BlockChain_add_transaction__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_BlockChain_add_transaction__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_BlockChain_add_transaction__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_BlockChain_add_transaction__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_BlockChain_add_transaction__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_BlockChain_add_transaction__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_BlockChain_add_transaction__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_BlockChain_add_transaction__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_BlockChain_add_transaction__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_BlockChain_add_transaction__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function add_transaction.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BlockChain_valid(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::BlockChain *arg1 = (pf::BlockChain *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BlockChain_valid.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__BlockChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockChain_valid" "', argument " "1"" of type '" "pf::BlockChain *""'"); 
  }
  arg1 = reinterpret_cast< pf::BlockChain * >(argp1);
  result = (bool)(arg1)->valid();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BlockChain_balance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::BlockChain *arg1 = (pf::BlockChain *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  std::unordered_map< std::string,double > result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BlockChain_balance.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__BlockChain, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockChain_balance" "', argument " "1"" of type '" "pf::BlockChain *""'"); 
  }
  arg1 = reinterpret_cast< pf::BlockChain * >(argp1);
  ecode2 = SWIG_AsVal_long(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockChain_balance" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (arg1)->balance(arg2);
  jsresult = SWIG_NewPointerObj((new std::unordered_map< std::string,double >(static_cast< const std::unordered_map< std::string,double >& >(result))), SWIGTYPE_p_std__unordered_mapT_std__string_double_t, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_BlockChain(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_BlockChain(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_BlockChain(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_BlockChain(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_BlockChain(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            pf::BlockChain * arg1 = (pf::BlockChain *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_Deal_price(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::Deal *arg1 = (pf::Deal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Deal_price.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__Deal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Deal_price" "', argument " "1"" of type '" "pf::Deal *""'"); 
  }
  arg1 = reinterpret_cast< pf::Deal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Deal_price" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Deal_price" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->price((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Deal_current_price(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::Deal *arg1 = (pf::Deal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Deal_current_price.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__Deal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Deal_current_price" "', argument " "1"" of type '" "pf::Deal *""'"); 
  }
  arg1 = reinterpret_cast< pf::Deal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Deal_current_price" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Deal_current_price" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->current_price((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Deal_buy_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::Deal *arg1 = (pf::Deal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Deal_buy_value.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__Deal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Deal_buy_value" "', argument " "1"" of type '" "pf::Deal *""'"); 
  }
  arg1 = reinterpret_cast< pf::Deal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Deal_buy_value" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Deal_buy_value" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->buy_value((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Deal_comm_buy(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::Deal *arg1 = (pf::Deal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Deal_comm_buy.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__Deal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Deal_comm_buy" "', argument " "1"" of type '" "pf::Deal *""'"); 
  }
  arg1 = reinterpret_cast< pf::Deal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Deal_comm_buy" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Deal_comm_buy" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->comm_buy((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Deal_adquisition(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::Deal *arg1 = (pf::Deal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Deal_adquisition.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__Deal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Deal_adquisition" "', argument " "1"" of type '" "pf::Deal *""'"); 
  }
  arg1 = reinterpret_cast< pf::Deal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Deal_adquisition" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Deal_adquisition" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->adquisition((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Deal_sold_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::Deal *arg1 = (pf::Deal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Deal_sold_value.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__Deal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Deal_sold_value" "', argument " "1"" of type '" "pf::Deal *""'"); 
  }
  arg1 = reinterpret_cast< pf::Deal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Deal_sold_value" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Deal_sold_value" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->sold_value((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Deal_comm_sell(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::Deal *arg1 = (pf::Deal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Deal_comm_sell.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__Deal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Deal_comm_sell" "', argument " "1"" of type '" "pf::Deal *""'"); 
  }
  arg1 = reinterpret_cast< pf::Deal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Deal_comm_sell" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Deal_comm_sell" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->comm_sell((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Deal_transmision(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::Deal *arg1 = (pf::Deal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Deal_transmision.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__Deal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Deal_transmision" "', argument " "1"" of type '" "pf::Deal *""'"); 
  }
  arg1 = reinterpret_cast< pf::Deal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Deal_transmision" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Deal_transmision" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->transmision((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Deal_gross_profit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::Deal *arg1 = (pf::Deal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Deal_gross_profit.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__Deal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Deal_gross_profit" "', argument " "1"" of type '" "pf::Deal *""'"); 
  }
  arg1 = reinterpret_cast< pf::Deal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Deal_gross_profit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Deal_gross_profit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->gross_profit((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Deal_net_profit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::Deal *arg1 = (pf::Deal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Deal_net_profit.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__Deal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Deal_net_profit" "', argument " "1"" of type '" "pf::Deal *""'"); 
  }
  arg1 = reinterpret_cast< pf::Deal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Deal_net_profit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Deal_net_profit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->net_profit((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Deal_gross_performance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::Deal *arg1 = (pf::Deal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Deal_gross_performance.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__Deal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Deal_gross_performance" "', argument " "1"" of type '" "pf::Deal *""'"); 
  }
  arg1 = reinterpret_cast< pf::Deal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Deal_gross_performance" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Deal_gross_performance" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->gross_performance((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Deal_net_performance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::Deal *arg1 = (pf::Deal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Deal_net_performance.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__Deal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Deal_net_performance" "', argument " "1"" of type '" "pf::Deal *""'"); 
  }
  arg1 = reinterpret_cast< pf::Deal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Deal_net_performance" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Deal_net_performance" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->net_performance((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Deal(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Deal(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Deal(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_Deal(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_Deal(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            pf::Deal * arg1 = (pf::Deal *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_veto_Deal(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class Deal can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_OpenDeal_buy_tx_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_OpenDeal_buy_tx_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    pf::OpenDeal *arg1 = (pf::OpenDeal *) 0 ;
    pf::Transaction *arg2 = (pf::Transaction *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__OpenDeal, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenDeal_buy_tx_set" "', argument " "1"" of type '" "pf::OpenDeal *""'"); 
    }
    arg1 = reinterpret_cast< pf::OpenDeal * >(argp1);
    res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_pf__Transaction, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenDeal_buy_tx_set" "', argument " "2"" of type '" "pf::Transaction *""'"); 
    }
    arg2 = reinterpret_cast< pf::Transaction * >(argp2);
    if (arg1) (arg1)->buy_tx = *arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_OpenDeal_buy_tx_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_OpenDeal_buy_tx_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    pf::OpenDeal *arg1 = (pf::OpenDeal *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    pf::Transaction *result = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__OpenDeal, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenDeal_buy_tx_get" "', argument " "1"" of type '" "pf::OpenDeal *""'"); 
    }
    arg1 = reinterpret_cast< pf::OpenDeal * >(argp1);
    result = (pf::Transaction *)& ((arg1)->buy_tx);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pf__Transaction, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_OpenDeal_price(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::OpenDeal *arg1 = (pf::OpenDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpenDeal_price.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__OpenDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenDeal_price" "', argument " "1"" of type '" "pf::OpenDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::OpenDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenDeal_price" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenDeal_price" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->price((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpenDeal_current_price(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::OpenDeal *arg1 = (pf::OpenDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpenDeal_current_price.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__OpenDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenDeal_current_price" "', argument " "1"" of type '" "pf::OpenDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::OpenDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenDeal_current_price" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenDeal_current_price" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->current_price((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpenDeal_buy_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::OpenDeal *arg1 = (pf::OpenDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpenDeal_buy_value.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__OpenDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenDeal_buy_value" "', argument " "1"" of type '" "pf::OpenDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::OpenDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenDeal_buy_value" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenDeal_buy_value" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->buy_value((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpenDeal_comm_buy(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::OpenDeal *arg1 = (pf::OpenDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpenDeal_comm_buy.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__OpenDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenDeal_comm_buy" "', argument " "1"" of type '" "pf::OpenDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::OpenDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenDeal_comm_buy" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenDeal_comm_buy" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->comm_buy((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpenDeal_adquisition(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::OpenDeal *arg1 = (pf::OpenDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpenDeal_adquisition.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__OpenDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenDeal_adquisition" "', argument " "1"" of type '" "pf::OpenDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::OpenDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenDeal_adquisition" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenDeal_adquisition" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->adquisition((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpenDeal_sold_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::OpenDeal *arg1 = (pf::OpenDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpenDeal_sold_value.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__OpenDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenDeal_sold_value" "', argument " "1"" of type '" "pf::OpenDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::OpenDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenDeal_sold_value" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenDeal_sold_value" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->sold_value((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpenDeal_comm_sell(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::OpenDeal *arg1 = (pf::OpenDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpenDeal_comm_sell.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__OpenDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenDeal_comm_sell" "', argument " "1"" of type '" "pf::OpenDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::OpenDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenDeal_comm_sell" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenDeal_comm_sell" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->comm_sell((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpenDeal_transmision(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::OpenDeal *arg1 = (pf::OpenDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpenDeal_transmision.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__OpenDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenDeal_transmision" "', argument " "1"" of type '" "pf::OpenDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::OpenDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenDeal_transmision" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenDeal_transmision" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->transmision((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpenDeal_gross_profit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::OpenDeal *arg1 = (pf::OpenDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpenDeal_gross_profit.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__OpenDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenDeal_gross_profit" "', argument " "1"" of type '" "pf::OpenDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::OpenDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenDeal_gross_profit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenDeal_gross_profit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->gross_profit((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpenDeal_net_profit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::OpenDeal *arg1 = (pf::OpenDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpenDeal_net_profit.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__OpenDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenDeal_net_profit" "', argument " "1"" of type '" "pf::OpenDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::OpenDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenDeal_net_profit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenDeal_net_profit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->net_profit((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpenDeal_gross_performance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::OpenDeal *arg1 = (pf::OpenDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpenDeal_gross_performance.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__OpenDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenDeal_gross_performance" "', argument " "1"" of type '" "pf::OpenDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::OpenDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenDeal_gross_performance" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenDeal_gross_performance" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->gross_performance((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OpenDeal_net_performance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::OpenDeal *arg1 = (pf::OpenDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OpenDeal_net_performance.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__OpenDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OpenDeal_net_performance" "', argument " "1"" of type '" "pf::OpenDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::OpenDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OpenDeal_net_performance" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OpenDeal_net_performance" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->net_performance((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_OpenDeal(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  pf::OpenDeal *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_OpenDeal.");
  result = (pf::OpenDeal *)new pf::OpenDeal();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_pf__OpenDeal, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_OpenDeal(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_OpenDeal(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_OpenDeal(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_OpenDeal(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_OpenDeal(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            pf::OpenDeal * arg1 = (pf::OpenDeal *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_ClosedDeal_open_deal_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_ClosedDeal_open_deal_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    pf::ClosedDeal *arg1 = (pf::ClosedDeal *) 0 ;
    pf::OpenDeal *arg2 = (pf::OpenDeal *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__ClosedDeal, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClosedDeal_open_deal_set" "', argument " "1"" of type '" "pf::ClosedDeal *""'"); 
    }
    arg1 = reinterpret_cast< pf::ClosedDeal * >(argp1);
    res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_pf__OpenDeal, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClosedDeal_open_deal_set" "', argument " "2"" of type '" "pf::OpenDeal *""'"); 
    }
    arg2 = reinterpret_cast< pf::OpenDeal * >(argp2);
    if (arg1) (arg1)->open_deal = *arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_ClosedDeal_open_deal_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_ClosedDeal_open_deal_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    pf::ClosedDeal *arg1 = (pf::ClosedDeal *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    pf::OpenDeal *result = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__ClosedDeal, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClosedDeal_open_deal_get" "', argument " "1"" of type '" "pf::ClosedDeal *""'"); 
    }
    arg1 = reinterpret_cast< pf::ClosedDeal * >(argp1);
    result = (pf::OpenDeal *)& ((arg1)->open_deal);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pf__OpenDeal, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_ClosedDeal_sell_tx_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_ClosedDeal_sell_tx_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    pf::ClosedDeal *arg1 = (pf::ClosedDeal *) 0 ;
    pf::Transaction *arg2 = (pf::Transaction *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__ClosedDeal, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClosedDeal_sell_tx_set" "', argument " "1"" of type '" "pf::ClosedDeal *""'"); 
    }
    arg1 = reinterpret_cast< pf::ClosedDeal * >(argp1);
    res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_pf__Transaction, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClosedDeal_sell_tx_set" "', argument " "2"" of type '" "pf::Transaction *""'"); 
    }
    arg2 = reinterpret_cast< pf::Transaction * >(argp2);
    if (arg1) (arg1)->sell_tx = *arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_ClosedDeal_sell_tx_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_ClosedDeal_sell_tx_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    pf::ClosedDeal *arg1 = (pf::ClosedDeal *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    pf::Transaction *result = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__ClosedDeal, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClosedDeal_sell_tx_get" "', argument " "1"" of type '" "pf::ClosedDeal *""'"); 
    }
    arg1 = reinterpret_cast< pf::ClosedDeal * >(argp1);
    result = (pf::Transaction *)& ((arg1)->sell_tx);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pf__Transaction, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_ClosedDeal_price(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::ClosedDeal *arg1 = (pf::ClosedDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ClosedDeal_price.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__ClosedDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClosedDeal_price" "', argument " "1"" of type '" "pf::ClosedDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::ClosedDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClosedDeal_price" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClosedDeal_price" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->price((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ClosedDeal_current_price(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::ClosedDeal *arg1 = (pf::ClosedDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ClosedDeal_current_price.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__ClosedDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClosedDeal_current_price" "', argument " "1"" of type '" "pf::ClosedDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::ClosedDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClosedDeal_current_price" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClosedDeal_current_price" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->current_price((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ClosedDeal_buy_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::ClosedDeal *arg1 = (pf::ClosedDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ClosedDeal_buy_value.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__ClosedDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClosedDeal_buy_value" "', argument " "1"" of type '" "pf::ClosedDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::ClosedDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClosedDeal_buy_value" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClosedDeal_buy_value" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->buy_value((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ClosedDeal_comm_buy(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::ClosedDeal *arg1 = (pf::ClosedDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ClosedDeal_comm_buy.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__ClosedDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClosedDeal_comm_buy" "', argument " "1"" of type '" "pf::ClosedDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::ClosedDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClosedDeal_comm_buy" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClosedDeal_comm_buy" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->comm_buy((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ClosedDeal_adquisition(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::ClosedDeal *arg1 = (pf::ClosedDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ClosedDeal_adquisition.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__ClosedDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClosedDeal_adquisition" "', argument " "1"" of type '" "pf::ClosedDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::ClosedDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClosedDeal_adquisition" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClosedDeal_adquisition" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->adquisition((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ClosedDeal_sold_value(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::ClosedDeal *arg1 = (pf::ClosedDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ClosedDeal_sold_value.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__ClosedDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClosedDeal_sold_value" "', argument " "1"" of type '" "pf::ClosedDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::ClosedDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClosedDeal_sold_value" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClosedDeal_sold_value" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->sold_value((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ClosedDeal_comm_sell(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::ClosedDeal *arg1 = (pf::ClosedDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ClosedDeal_comm_sell.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__ClosedDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClosedDeal_comm_sell" "', argument " "1"" of type '" "pf::ClosedDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::ClosedDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClosedDeal_comm_sell" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClosedDeal_comm_sell" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->comm_sell((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ClosedDeal_transmision(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::ClosedDeal *arg1 = (pf::ClosedDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ClosedDeal_transmision.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__ClosedDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClosedDeal_transmision" "', argument " "1"" of type '" "pf::ClosedDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::ClosedDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClosedDeal_transmision" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClosedDeal_transmision" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->transmision((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ClosedDeal_gross_profit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::ClosedDeal *arg1 = (pf::ClosedDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ClosedDeal_gross_profit.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__ClosedDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClosedDeal_gross_profit" "', argument " "1"" of type '" "pf::ClosedDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::ClosedDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClosedDeal_gross_profit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClosedDeal_gross_profit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->gross_profit((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ClosedDeal_net_profit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::ClosedDeal *arg1 = (pf::ClosedDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ClosedDeal_net_profit.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__ClosedDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClosedDeal_net_profit" "', argument " "1"" of type '" "pf::ClosedDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::ClosedDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClosedDeal_net_profit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClosedDeal_net_profit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->net_profit((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ClosedDeal_gross_performance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::ClosedDeal *arg1 = (pf::ClosedDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ClosedDeal_gross_performance.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__ClosedDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClosedDeal_gross_performance" "', argument " "1"" of type '" "pf::ClosedDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::ClosedDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClosedDeal_gross_performance" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClosedDeal_gross_performance" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->gross_performance((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ClosedDeal_net_performance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  pf::ClosedDeal *arg1 = (pf::ClosedDeal *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ClosedDeal_net_performance.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_pf__ClosedDeal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClosedDeal_net_performance" "', argument " "1"" of type '" "pf::ClosedDeal *""'"); 
  }
  arg1 = reinterpret_cast< pf::ClosedDeal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClosedDeal_net_performance" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClosedDeal_net_performance" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->net_performance((std::string const &)*arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_ClosedDeal(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  pf::ClosedDeal *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ClosedDeal.");
  result = (pf::ClosedDeal *)new pf::ClosedDeal();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_pf__ClosedDeal, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_ClosedDeal(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_ClosedDeal(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_ClosedDeal(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_ClosedDeal(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_ClosedDeal(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            pf::ClosedDeal * arg1 = (pf::ClosedDeal *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_SymbolInfoTick_ask_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_SymbolInfoTick_ask_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    pf::SymbolInfoTick *arg1 = (pf::SymbolInfoTick *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__SymbolInfoTick, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymbolInfoTick_ask_set" "', argument " "1"" of type '" "pf::SymbolInfoTick *""'"); 
    }
    arg1 = reinterpret_cast< pf::SymbolInfoTick * >(argp1);
    ecode2 = SWIG_AsVal_double(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymbolInfoTick_ask_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (arg1) (arg1)->ask = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_SymbolInfoTick_ask_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_SymbolInfoTick_ask_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    pf::SymbolInfoTick *arg1 = (pf::SymbolInfoTick *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__SymbolInfoTick, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymbolInfoTick_ask_get" "', argument " "1"" of type '" "pf::SymbolInfoTick *""'"); 
    }
    arg1 = reinterpret_cast< pf::SymbolInfoTick * >(argp1);
    result = (double) ((arg1)->ask);
    jsresult = SWIG_From_double(static_cast< double >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_SymbolInfoTick_bid_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_SymbolInfoTick_bid_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    pf::SymbolInfoTick *arg1 = (pf::SymbolInfoTick *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__SymbolInfoTick, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymbolInfoTick_bid_set" "', argument " "1"" of type '" "pf::SymbolInfoTick *""'"); 
    }
    arg1 = reinterpret_cast< pf::SymbolInfoTick * >(argp1);
    ecode2 = SWIG_AsVal_double(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymbolInfoTick_bid_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (arg1) (arg1)->bid = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_SymbolInfoTick_bid_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_SymbolInfoTick_bid_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    pf::SymbolInfoTick *arg1 = (pf::SymbolInfoTick *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_pf__SymbolInfoTick, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymbolInfoTick_bid_get" "', argument " "1"" of type '" "pf::SymbolInfoTick *""'"); 
    }
    arg1 = reinterpret_cast< pf::SymbolInfoTick * >(argp1);
    result = (double) ((arg1)->bid);
    jsresult = SWIG_From_double(static_cast< double >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_new_SymbolInfoTick(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  pf::SymbolInfoTick *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SymbolInfoTick.");
  result = (pf::SymbolInfoTick *)new pf::SymbolInfoTick();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_pf__SymbolInfoTick, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_SymbolInfoTick(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_SymbolInfoTick(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_SymbolInfoTick(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_SymbolInfoTick(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_SymbolInfoTick(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            pf::SymbolInfoTick * arg1 = (pf::SymbolInfoTick *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_pf_FakeTrader_ORDER_TYPE_BUY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_pf_FakeTrader_ORDER_TYPE_BUY(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(pf::FakeTrader::ORDER_TYPE_BUY));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_pf_FakeTrader_ORDER_TYPE_SELL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_pf_FakeTrader_ORDER_TYPE_SELL(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(pf::FakeTrader::ORDER_TYPE_SELL));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_new_FakeTrader(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  pf::FakeTrader *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_FakeTrader.");
  result = (pf::FakeTrader *)new pf::FakeTrader();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_pf__FakeTrader, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_FakeTrader(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_FakeTrader(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_FakeTrader(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_FakeTrader(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_FakeTrader(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            pf::FakeTrader * arg1 = (pf::FakeTrader *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_sim_Simulator_PRICE_VOLATILITY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_sim_Simulator_PRICE_VOLATILITY(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(sim::Simulator::PRICE_VOLATILITY));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_sim_Simulator_BACKTESTING(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_sim_Simulator_BACKTESTING(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    
    jsresult = SWIG_From_int(static_cast< int >(sim::Simulator::BACKTESTING));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_new_Simulator(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  sim::Simulator::Mode arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  sim::Simulator *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Simulator.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Simulator" "', argument " "1"" of type '" "sim::Simulator::Mode""'");
  } 
  arg1 = static_cast< sim::Simulator::Mode >(val1);
  result = (sim::Simulator *)new sim::Simulator(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_sim__Simulator, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Simulator_append_path(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  sim::Simulator *arg1 = (sim::Simulator *) 0 ;
  rp::column_ptr *arg2 = 0 ;
  rp::column_ptr *arg3 = 0 ;
  rp::column_ptr *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Simulator_append_path.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_sim__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_append_path" "', argument " "1"" of type '" "sim::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< sim::Simulator * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulator_append_path" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulator_append_path" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Simulator_append_path" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulator_append_path" "', argument " "3"" of type '" "rp::column_ptr const &""'"); 
  }
  arg3 = reinterpret_cast< rp::column_ptr * >(argp3);
  res4 = SWIG_ConvertPtr(args[2], &argp4, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Simulator_append_path" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulator_append_path" "', argument " "4"" of type '" "rp::column_ptr const &""'"); 
  }
  arg4 = reinterpret_cast< rp::column_ptr * >(argp4);
  (arg1)->append_path((rp::column_ptr const &)*arg2,(rp::column_ptr const &)*arg3,(rp::column_ptr const &)*arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Simulator_update(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  sim::Simulator *arg1 = (sim::Simulator *) 0 ;
  rp::column_ptr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Simulator_update.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_sim__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_update" "', argument " "1"" of type '" "sim::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< sim::Simulator * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__shared_ptrT_Serie_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Simulator_update" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Simulator_update" "', argument " "2"" of type '" "rp::column_ptr const &""'"); 
  }
  arg2 = reinterpret_cast< rp::column_ptr * >(argp2);
  (arg1)->update((rp::column_ptr const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Simulator_get_results(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  sim::Simulator *arg1 = (sim::Simulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  sim::Simulator::results_type *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Simulator_get_results.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_sim__Simulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Simulator_get_results" "', argument " "1"" of type '" "sim::Simulator *""'"); 
  }
  arg1 = reinterpret_cast< sim::Simulator * >(argp1);
  result = (sim::Simulator::results_type *) &(arg1)->get_results();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__unordered_mapT_std__string_std__shared_ptrT_Serie_t_t_t, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Simulator(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Simulator(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Simulator(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_Simulator(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_Simulator(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            sim::Simulator * arg1 = (sim::Simulator *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_qs__CouponCashFlowTo_p_qs__CashFlow(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qs::CashFlow *)  ((qs::CouponCashFlow *) x));
}
static void *_p_qs__StartCashFlowTo_p_qs__CashFlow(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qs::CashFlow *)  ((qs::StartCashFlow *) x));
}
static void *_p_qs__EndCashFlowTo_p_qs__CashFlow(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qs::CashFlow *)  ((qs::EndCashFlow *) x));
}
static void *_p_qs__CustomCashFlowTo_p_qs__CashFlow(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qs::CashFlow *)  ((qs::CustomCashFlow *) x));
}
static void *_p_pf__ClosedDealTo_p_pf__Deal(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pf::Deal *)  ((pf::ClosedDeal *) x));
}
static void *_p_pf__OpenDealTo_p_pf__Deal(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pf::Deal *)  ((pf::OpenDeal *) x));
}
static void *_p_qs__ZeroPeriodTo_p_qs__ForwardPeriod(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((qs::ForwardPeriod *)  ((qs::ZeroPeriod *) x));
}
static swig_type_info _swigt__p_Buffer = {"_p_Buffer", "Buffer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NoneType = {"_p_NoneType", "std::vector< NoneType >::value_type *|NoneType *|p_NoneType", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Serie = {"_p_Serie", "rp::column *|Serie *|p_Serie", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_date__year_month_day = {"_p_date__year_month_day", "date::year_month_day *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_q_const__char__void = {"_p_f_int_p_q_const__char__void", "void (*)(int,char const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_nc__NdArrayT_double_t = {"_p_nc__NdArrayT_double_t", "rp::internal_array *|Serie::Buffer *|nc::NdArray< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pf__BlockChain = {"_p_pf__BlockChain", "pf::BlockChain *|p_pf__BlockChain", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pf__ClosedDeal = {"_p_pf__ClosedDeal", "p_pf__ClosedDeal|pf::ClosedDeal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pf__Deal = {"_p_pf__Deal", "p_pf__Deal|pf::Deal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pf__FakeTrader = {"_p_pf__FakeTrader", "p_pf__FakeTrader", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pf__OpenDeal = {"_p_pf__OpenDeal", "pf::OpenDeal *|p_pf__OpenDeal", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pf__SymbolInfoTick = {"_p_pf__SymbolInfoTick", "p_pf__SymbolInfoTick|pf::SymbolInfoTick *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pf__Transaction = {"_p_pf__Transaction", "pf::Transaction *|p_pf__Transaction", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pf__TxFrom = {"_p_pf__TxFrom", "p_pf__TxFrom|pf::TxFrom *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pf__TxTo = {"_p_pf__TxTo", "p_pf__TxTo|pf::TxTo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pf__amount_info = {"_p_pf__amount_info", "pf::amount_info *|p_pf__amount_info", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pf__tuple_hash = {"_p_pf__tuple_hash", "p_pf__tuple_hash", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qs__Calendar = {"_p_qs__Calendar", "p_qs__Calendar", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qs__CashFlow = {"_p_qs__CashFlow", "p_qs__CashFlow|qs::CashFlow *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qs__CouponCashFlow = {"_p_qs__CouponCashFlow", "p_qs__CouponCashFlow|qs::CouponCashFlow *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qs__CustomCashFlow = {"_p_qs__CustomCashFlow", "p_qs__CustomCashFlow|qs::CustomCashFlow *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qs__DiscountFactor = {"_p_qs__DiscountFactor", "p_qs__DiscountFactor|qs::DiscountFactor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qs__EndCashFlow = {"_p_qs__EndCashFlow", "p_qs__EndCashFlow|qs::EndCashFlow *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qs__ForwardPeriod = {"_p_qs__ForwardPeriod", "p_qs__ForwardPeriod|qs::ForwardPeriod *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qs__InterestRate = {"_p_qs__InterestRate", "qs::InterestRate *|p_qs__InterestRate", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qs__Leg = {"_p_qs__Leg", "qs::Leg *|p_qs__Leg", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qs__LegGenerator = {"_p_qs__LegGenerator", "p_qs__LegGenerator", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qs__Maturity = {"_p_qs__Maturity", "p_qs__Maturity|qs::Maturity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qs__Product = {"_p_qs__Product", "qs::Product *|p_qs__Product", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qs__ProductGenerator = {"_p_qs__ProductGenerator", "p_qs__ProductGenerator", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qs__Schedule = {"_p_qs__Schedule", "qs::Schedule *|p_qs__Schedule", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qs__StartCashFlow = {"_p_qs__StartCashFlow", "p_qs__StartCashFlow|qs::StartCashFlow *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qs__TermStructure = {"_p_qs__TermStructure", "qs::TermStructure *|p_qs__TermStructure", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_qs__ZeroPeriod = {"_p_qs__ZeroPeriod", "p_qs__ZeroPeriod", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_results_type = {"_p_results_type", "results_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_rp__CalculationT_Serie_t = {"_p_rp__CalculationT_Serie_t", "rp::Calculation< Serie > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_rp__CalculationT_Serie_t__result_type = {"_p_rp__CalculationT_Serie_t__result_type", "rp::Calculation< Serie >::result_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_rp__Serie2d = {"_p_rp__Serie2d", "p_rp__Serie2d|rp::Serie2d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_shared_ptrT_Serie_t = {"_p_shared_ptrT_Serie_t", "shared_ptr< Serie > *|std::vector< shared_ptr< Serie > >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sim__Simulator = {"_p_sim__Simulator", "sim::Simulator *|p_sim__Simulator", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_std__shared_ptrT_Serie_t_fstd__shared_ptrT_Serie_t_const_RF_t = {"_p_std__functionT_std__shared_ptrT_Serie_t_fstd__shared_ptrT_Serie_t_const_RF_t", "rp::transformer_ptr *|std::function< std::shared_ptr< Serie > (std::shared_ptr< Serie > const &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_std__shared_ptrT_Serie_t_fstd__shared_ptrT_Serie_t_const_R_std__shared_ptrT_Serie_t_const_RF_t = {"_p_std__functionT_std__shared_ptrT_Serie_t_fstd__shared_ptrT_Serie_t_const_R_std__shared_ptrT_Serie_t_const_RF_t", "rp::function_ptr *|std::function< std::shared_ptr< Serie > (std::shared_ptr< Serie > const &,std::shared_ptr< Serie > const &) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__initializer_listT_double_t = {"_p_std__initializer_listT_double_t", "std::initializer_list< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_Serie_t = {"_p_std__shared_ptrT_Serie_t", "std::shared_ptr< Serie > *|rp::column_ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__unordered_mapT_std__shared_ptrT_Serie_t_std__shared_ptrT_Serie_t_t = {"_p_std__unordered_mapT_std__shared_ptrT_Serie_t_std__shared_ptrT_Serie_t_t", "std::unordered_map< std::shared_ptr< Serie >,std::shared_ptr< Serie > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__unordered_mapT_std__string_double_t = {"_p_std__unordered_mapT_std__string_double_t", "std::unordered_map< std::string,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__unordered_mapT_std__string_std__shared_ptrT_Serie_t_t = {"_p_std__unordered_mapT_std__string_std__shared_ptrT_Serie_t_t", "std::unordered_map< std::string,std::shared_ptr< Serie > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__unordered_mapT_std__tupleT_long_long_t_std__tupleT_pf__Transaction_pf__TxTo_t_pf__tuple_hash_t = {"_p_std__unordered_mapT_std__tupleT_long_long_t_std__tupleT_pf__Transaction_pf__TxTo_t_pf__tuple_hash_t", "std::unordered_map< std::tuple< long,long >,std::tuple< pf::Transaction,pf::TxTo >,pf::tuple_hash > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__unordered_setT_std__shared_ptrT_Serie_t_t = {"_p_std__unordered_setT_std__shared_ptrT_Serie_t_t", "std::unordered_set< std::shared_ptr< Serie > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_NoneType_t = {"_p_std__vectorT_NoneType_t", "p_std__vectorT_NoneType_t|std::vector< NoneType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "p_std__vectorT_double_t|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_long_t = {"_p_std__vectorT_long_t", "std::vector< long > *|p_std__vectorT_long_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_pf__Transaction_t = {"_p_std__vectorT_pf__Transaction_t", "std::vector< pf::Transaction > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_pf__TxFrom_t = {"_p_std__vectorT_pf__TxFrom_t", "std::vector< pf::TxFrom > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_pf__TxTo_t = {"_p_std__vectorT_pf__TxTo_t", "std::vector< pf::TxTo > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_pf__amount_info_t = {"_p_std__vectorT_pf__amount_info_t", "std::vector< pf::amount_info > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_qs__DiscountFactor_t = {"_p_std__vectorT_qs__DiscountFactor_t", "std::vector< qs::DiscountFactor > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_qs__ForwardPeriod_t = {"_p_std__vectorT_qs__ForwardPeriod_t", "std::vector< qs::ForwardPeriod > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_qs__InterestRate_t = {"_p_std__vectorT_qs__InterestRate_t", "std::vector< qs::InterestRate > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_qs__Leg_t = {"_p_std__vectorT_qs__Leg_t", "std::vector< qs::Leg > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_qs__Maturity_t = {"_p_std__vectorT_qs__Maturity_t", "std::vector< qs::Maturity > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_qs__ZeroPeriod_t = {"_p_std__vectorT_qs__ZeroPeriod_t", "std::vector< qs::ZeroPeriod > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_shared_ptrT_Serie_t_t = {"_p_std__vectorT_shared_ptrT_Serie_t_t", "p_std__vectorT_shared_ptrT_Serie_t_t|std::vector< shared_ptr< Serie > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__reference_wrapperT_qs__CashFlow_const_t_t = {"_p_std__vectorT_std__reference_wrapperT_qs__CashFlow_const_t_t", "std::vector< std::reference_wrapper< qs::CashFlow const > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__shared_ptrT_Serie_t_t = {"_p_std__vectorT_std__shared_ptrT_Serie_t_t", "std::vector< std::shared_ptr< Serie > > *|rp::dataframe *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "p_std__vectorT_std__string_t|std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__tupleT_pf__Transaction_pf__TxTo_size_t_t_t = {"_p_std__vectorT_std__tupleT_pf__Transaction_pf__TxTo_size_t_t_t", "std::vector< std::tuple< pf::Transaction,pf::TxTo,size_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__unordered_mapT_std__shared_ptrT_Serie_t_std__shared_ptrT_Serie_t_t_t = {"_p_std__vectorT_std__unordered_mapT_std__shared_ptrT_Serie_t_std__shared_ptrT_Serie_t_t_t", "std::vector< std::unordered_map< std::shared_ptr< Serie >,std::shared_ptr< Serie > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__unordered_mapT_std__string_std__shared_ptrT_Serie_t_t_t = {"_p_std__vectorT_std__unordered_mapT_std__string_std__shared_ptrT_Serie_t_t_t", "sim::Simulator::results_type *|std::vector< std::unordered_map< std::string,std::shared_ptr< Serie > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__unordered_setT_std__shared_ptrT_Serie_t_t_t = {"_p_std__vectorT_std__unordered_setT_std__shared_ptrT_Serie_t_t_t", "std::vector< std::unordered_set< std::shared_ptr< Serie > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t = {"_p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t", "p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t|std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unordered_mapT_std__string_Serie_t_t = {"_p_std__vectorT_unordered_mapT_std__string_Serie_t_t", "p_std__vectorT_unordered_mapT_std__string_Serie_t_t|std::vector< unordered_map< std::string,Serie > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t = {"_p_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t", "std::vector< unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > >::value_type *|unordered_map< shared_ptr< Serie >,shared_ptr< Serie > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unordered_mapT_std__string_Serie_t = {"_p_unordered_mapT_std__string_Serie_t", "unordered_map< std::string,Serie > *|std::vector< unordered_map< std::string,Serie > >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Buffer,
  &_swigt__p_NoneType,
  &_swigt__p_Serie,
  &_swigt__p_char,
  &_swigt__p_date__year_month_day,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_f_int_p_q_const__char__void,
  &_swigt__p_nc__NdArrayT_double_t,
  &_swigt__p_pf__BlockChain,
  &_swigt__p_pf__ClosedDeal,
  &_swigt__p_pf__Deal,
  &_swigt__p_pf__FakeTrader,
  &_swigt__p_pf__OpenDeal,
  &_swigt__p_pf__SymbolInfoTick,
  &_swigt__p_pf__Transaction,
  &_swigt__p_pf__TxFrom,
  &_swigt__p_pf__TxTo,
  &_swigt__p_pf__amount_info,
  &_swigt__p_pf__tuple_hash,
  &_swigt__p_qs__Calendar,
  &_swigt__p_qs__CashFlow,
  &_swigt__p_qs__CouponCashFlow,
  &_swigt__p_qs__CustomCashFlow,
  &_swigt__p_qs__DiscountFactor,
  &_swigt__p_qs__EndCashFlow,
  &_swigt__p_qs__ForwardPeriod,
  &_swigt__p_qs__InterestRate,
  &_swigt__p_qs__Leg,
  &_swigt__p_qs__LegGenerator,
  &_swigt__p_qs__Maturity,
  &_swigt__p_qs__Product,
  &_swigt__p_qs__ProductGenerator,
  &_swigt__p_qs__Schedule,
  &_swigt__p_qs__StartCashFlow,
  &_swigt__p_qs__TermStructure,
  &_swigt__p_qs__ZeroPeriod,
  &_swigt__p_results_type,
  &_swigt__p_rp__CalculationT_Serie_t,
  &_swigt__p_rp__CalculationT_Serie_t__result_type,
  &_swigt__p_rp__Serie2d,
  &_swigt__p_shared_ptrT_Serie_t,
  &_swigt__p_sim__Simulator,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_std__functionT_std__shared_ptrT_Serie_t_fstd__shared_ptrT_Serie_t_const_RF_t,
  &_swigt__p_std__functionT_std__shared_ptrT_Serie_t_fstd__shared_ptrT_Serie_t_const_R_std__shared_ptrT_Serie_t_const_RF_t,
  &_swigt__p_std__initializer_listT_double_t,
  &_swigt__p_std__shared_ptrT_Serie_t,
  &_swigt__p_std__unordered_mapT_std__shared_ptrT_Serie_t_std__shared_ptrT_Serie_t_t,
  &_swigt__p_std__unordered_mapT_std__string_double_t,
  &_swigt__p_std__unordered_mapT_std__string_std__shared_ptrT_Serie_t_t,
  &_swigt__p_std__unordered_mapT_std__tupleT_long_long_t_std__tupleT_pf__Transaction_pf__TxTo_t_pf__tuple_hash_t,
  &_swigt__p_std__unordered_setT_std__shared_ptrT_Serie_t_t,
  &_swigt__p_std__vectorT_NoneType_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_long_t,
  &_swigt__p_std__vectorT_pf__Transaction_t,
  &_swigt__p_std__vectorT_pf__TxFrom_t,
  &_swigt__p_std__vectorT_pf__TxTo_t,
  &_swigt__p_std__vectorT_pf__amount_info_t,
  &_swigt__p_std__vectorT_qs__DiscountFactor_t,
  &_swigt__p_std__vectorT_qs__ForwardPeriod_t,
  &_swigt__p_std__vectorT_qs__InterestRate_t,
  &_swigt__p_std__vectorT_qs__Leg_t,
  &_swigt__p_std__vectorT_qs__Maturity_t,
  &_swigt__p_std__vectorT_qs__ZeroPeriod_t,
  &_swigt__p_std__vectorT_shared_ptrT_Serie_t_t,
  &_swigt__p_std__vectorT_std__reference_wrapperT_qs__CashFlow_const_t_t,
  &_swigt__p_std__vectorT_std__shared_ptrT_Serie_t_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__vectorT_std__tupleT_pf__Transaction_pf__TxTo_size_t_t_t,
  &_swigt__p_std__vectorT_std__unordered_mapT_std__shared_ptrT_Serie_t_std__shared_ptrT_Serie_t_t_t,
  &_swigt__p_std__vectorT_std__unordered_mapT_std__string_std__shared_ptrT_Serie_t_t_t,
  &_swigt__p_std__vectorT_std__unordered_setT_std__shared_ptrT_Serie_t_t_t,
  &_swigt__p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t,
  &_swigt__p_std__vectorT_unordered_mapT_std__string_Serie_t_t,
  &_swigt__p_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t,
  &_swigt__p_unordered_mapT_std__string_Serie_t,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_Buffer[] = {  {&_swigt__p_Buffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NoneType[] = {  {&_swigt__p_NoneType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Serie[] = {  {&_swigt__p_Serie, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_date__year_month_day[] = {  {&_swigt__p_date__year_month_day, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_q_const__char__void[] = {  {&_swigt__p_f_int_p_q_const__char__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nc__NdArrayT_double_t[] = {  {&_swigt__p_nc__NdArrayT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pf__BlockChain[] = {  {&_swigt__p_pf__BlockChain, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pf__ClosedDeal[] = {  {&_swigt__p_pf__ClosedDeal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pf__Deal[] = {  {&_swigt__p_pf__ClosedDeal, _p_pf__ClosedDealTo_p_pf__Deal, 0, 0},  {&_swigt__p_pf__Deal, 0, 0, 0},  {&_swigt__p_pf__OpenDeal, _p_pf__OpenDealTo_p_pf__Deal, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pf__FakeTrader[] = {  {&_swigt__p_pf__FakeTrader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pf__OpenDeal[] = {  {&_swigt__p_pf__OpenDeal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pf__SymbolInfoTick[] = {  {&_swigt__p_pf__SymbolInfoTick, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pf__Transaction[] = {  {&_swigt__p_pf__Transaction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pf__TxFrom[] = {  {&_swigt__p_pf__TxFrom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pf__TxTo[] = {  {&_swigt__p_pf__TxTo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pf__amount_info[] = {  {&_swigt__p_pf__amount_info, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pf__tuple_hash[] = {  {&_swigt__p_pf__tuple_hash, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qs__Calendar[] = {  {&_swigt__p_qs__Calendar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qs__CashFlow[] = {  {&_swigt__p_qs__CashFlow, 0, 0, 0},  {&_swigt__p_qs__CouponCashFlow, _p_qs__CouponCashFlowTo_p_qs__CashFlow, 0, 0},  {&_swigt__p_qs__StartCashFlow, _p_qs__StartCashFlowTo_p_qs__CashFlow, 0, 0},  {&_swigt__p_qs__EndCashFlow, _p_qs__EndCashFlowTo_p_qs__CashFlow, 0, 0},  {&_swigt__p_qs__CustomCashFlow, _p_qs__CustomCashFlowTo_p_qs__CashFlow, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qs__CouponCashFlow[] = {  {&_swigt__p_qs__CouponCashFlow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qs__CustomCashFlow[] = {  {&_swigt__p_qs__CustomCashFlow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qs__DiscountFactor[] = {  {&_swigt__p_qs__DiscountFactor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qs__EndCashFlow[] = {  {&_swigt__p_qs__EndCashFlow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qs__ForwardPeriod[] = {  {&_swigt__p_qs__ForwardPeriod, 0, 0, 0},  {&_swigt__p_qs__ZeroPeriod, _p_qs__ZeroPeriodTo_p_qs__ForwardPeriod, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qs__InterestRate[] = {  {&_swigt__p_qs__InterestRate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qs__Leg[] = {  {&_swigt__p_qs__Leg, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qs__LegGenerator[] = {  {&_swigt__p_qs__LegGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qs__Maturity[] = {  {&_swigt__p_qs__Maturity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qs__Product[] = {  {&_swigt__p_qs__Product, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qs__ProductGenerator[] = {  {&_swigt__p_qs__ProductGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qs__Schedule[] = {  {&_swigt__p_qs__Schedule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qs__StartCashFlow[] = {  {&_swigt__p_qs__StartCashFlow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qs__TermStructure[] = {  {&_swigt__p_qs__TermStructure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_qs__ZeroPeriod[] = {  {&_swigt__p_qs__ZeroPeriod, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_results_type[] = {  {&_swigt__p_results_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rp__CalculationT_Serie_t[] = {  {&_swigt__p_rp__CalculationT_Serie_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rp__CalculationT_Serie_t__result_type[] = {  {&_swigt__p_rp__CalculationT_Serie_t__result_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rp__Serie2d[] = {  {&_swigt__p_rp__Serie2d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_shared_ptrT_Serie_t[] = {  {&_swigt__p_shared_ptrT_Serie_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sim__Simulator[] = {  {&_swigt__p_sim__Simulator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_std__shared_ptrT_Serie_t_fstd__shared_ptrT_Serie_t_const_RF_t[] = {  {&_swigt__p_std__functionT_std__shared_ptrT_Serie_t_fstd__shared_ptrT_Serie_t_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_std__shared_ptrT_Serie_t_fstd__shared_ptrT_Serie_t_const_R_std__shared_ptrT_Serie_t_const_RF_t[] = {  {&_swigt__p_std__functionT_std__shared_ptrT_Serie_t_fstd__shared_ptrT_Serie_t_const_R_std__shared_ptrT_Serie_t_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__initializer_listT_double_t[] = {  {&_swigt__p_std__initializer_listT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_Serie_t[] = {  {&_swigt__p_std__shared_ptrT_Serie_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__unordered_mapT_std__shared_ptrT_Serie_t_std__shared_ptrT_Serie_t_t[] = {  {&_swigt__p_std__unordered_mapT_std__shared_ptrT_Serie_t_std__shared_ptrT_Serie_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__unordered_mapT_std__string_double_t[] = {  {&_swigt__p_std__unordered_mapT_std__string_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__unordered_mapT_std__string_std__shared_ptrT_Serie_t_t[] = {  {&_swigt__p_std__unordered_mapT_std__string_std__shared_ptrT_Serie_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__unordered_mapT_std__tupleT_long_long_t_std__tupleT_pf__Transaction_pf__TxTo_t_pf__tuple_hash_t[] = {  {&_swigt__p_std__unordered_mapT_std__tupleT_long_long_t_std__tupleT_pf__Transaction_pf__TxTo_t_pf__tuple_hash_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__unordered_setT_std__shared_ptrT_Serie_t_t[] = {  {&_swigt__p_std__unordered_setT_std__shared_ptrT_Serie_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_NoneType_t[] = {  {&_swigt__p_std__vectorT_NoneType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_t[] = {  {&_swigt__p_std__vectorT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_pf__Transaction_t[] = {  {&_swigt__p_std__vectorT_pf__Transaction_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_pf__TxFrom_t[] = {  {&_swigt__p_std__vectorT_pf__TxFrom_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_pf__TxTo_t[] = {  {&_swigt__p_std__vectorT_pf__TxTo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_pf__amount_info_t[] = {  {&_swigt__p_std__vectorT_pf__amount_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_qs__DiscountFactor_t[] = {  {&_swigt__p_std__vectorT_qs__DiscountFactor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_qs__ForwardPeriod_t[] = {  {&_swigt__p_std__vectorT_qs__ForwardPeriod_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_qs__InterestRate_t[] = {  {&_swigt__p_std__vectorT_qs__InterestRate_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_qs__Leg_t[] = {  {&_swigt__p_std__vectorT_qs__Leg_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_qs__Maturity_t[] = {  {&_swigt__p_std__vectorT_qs__Maturity_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_qs__ZeroPeriod_t[] = {  {&_swigt__p_std__vectorT_qs__ZeroPeriod_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_shared_ptrT_Serie_t_t[] = {  {&_swigt__p_std__vectorT_shared_ptrT_Serie_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__reference_wrapperT_qs__CashFlow_const_t_t[] = {  {&_swigt__p_std__vectorT_std__reference_wrapperT_qs__CashFlow_const_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__shared_ptrT_Serie_t_t[] = {  {&_swigt__p_std__vectorT_std__shared_ptrT_Serie_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__tupleT_pf__Transaction_pf__TxTo_size_t_t_t[] = {  {&_swigt__p_std__vectorT_std__tupleT_pf__Transaction_pf__TxTo_size_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__unordered_mapT_std__shared_ptrT_Serie_t_std__shared_ptrT_Serie_t_t_t[] = {  {&_swigt__p_std__vectorT_std__unordered_mapT_std__shared_ptrT_Serie_t_std__shared_ptrT_Serie_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__unordered_mapT_std__string_std__shared_ptrT_Serie_t_t_t[] = {  {&_swigt__p_std__vectorT_std__unordered_mapT_std__string_std__shared_ptrT_Serie_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__unordered_setT_std__shared_ptrT_Serie_t_t_t[] = {  {&_swigt__p_std__vectorT_std__unordered_setT_std__shared_ptrT_Serie_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t[] = {  {&_swigt__p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unordered_mapT_std__string_Serie_t_t[] = {  {&_swigt__p_std__vectorT_unordered_mapT_std__string_Serie_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t[] = {  {&_swigt__p_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unordered_mapT_std__string_Serie_t[] = {  {&_swigt__p_unordered_mapT_std__string_Serie_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Buffer,
  _swigc__p_NoneType,
  _swigc__p_Serie,
  _swigc__p_char,
  _swigc__p_date__year_month_day,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_f_int_p_q_const__char__void,
  _swigc__p_nc__NdArrayT_double_t,
  _swigc__p_pf__BlockChain,
  _swigc__p_pf__ClosedDeal,
  _swigc__p_pf__Deal,
  _swigc__p_pf__FakeTrader,
  _swigc__p_pf__OpenDeal,
  _swigc__p_pf__SymbolInfoTick,
  _swigc__p_pf__Transaction,
  _swigc__p_pf__TxFrom,
  _swigc__p_pf__TxTo,
  _swigc__p_pf__amount_info,
  _swigc__p_pf__tuple_hash,
  _swigc__p_qs__Calendar,
  _swigc__p_qs__CashFlow,
  _swigc__p_qs__CouponCashFlow,
  _swigc__p_qs__CustomCashFlow,
  _swigc__p_qs__DiscountFactor,
  _swigc__p_qs__EndCashFlow,
  _swigc__p_qs__ForwardPeriod,
  _swigc__p_qs__InterestRate,
  _swigc__p_qs__Leg,
  _swigc__p_qs__LegGenerator,
  _swigc__p_qs__Maturity,
  _swigc__p_qs__Product,
  _swigc__p_qs__ProductGenerator,
  _swigc__p_qs__Schedule,
  _swigc__p_qs__StartCashFlow,
  _swigc__p_qs__TermStructure,
  _swigc__p_qs__ZeroPeriod,
  _swigc__p_results_type,
  _swigc__p_rp__CalculationT_Serie_t,
  _swigc__p_rp__CalculationT_Serie_t__result_type,
  _swigc__p_rp__Serie2d,
  _swigc__p_shared_ptrT_Serie_t,
  _swigc__p_sim__Simulator,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_std__functionT_std__shared_ptrT_Serie_t_fstd__shared_ptrT_Serie_t_const_RF_t,
  _swigc__p_std__functionT_std__shared_ptrT_Serie_t_fstd__shared_ptrT_Serie_t_const_R_std__shared_ptrT_Serie_t_const_RF_t,
  _swigc__p_std__initializer_listT_double_t,
  _swigc__p_std__shared_ptrT_Serie_t,
  _swigc__p_std__unordered_mapT_std__shared_ptrT_Serie_t_std__shared_ptrT_Serie_t_t,
  _swigc__p_std__unordered_mapT_std__string_double_t,
  _swigc__p_std__unordered_mapT_std__string_std__shared_ptrT_Serie_t_t,
  _swigc__p_std__unordered_mapT_std__tupleT_long_long_t_std__tupleT_pf__Transaction_pf__TxTo_t_pf__tuple_hash_t,
  _swigc__p_std__unordered_setT_std__shared_ptrT_Serie_t_t,
  _swigc__p_std__vectorT_NoneType_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_long_t,
  _swigc__p_std__vectorT_pf__Transaction_t,
  _swigc__p_std__vectorT_pf__TxFrom_t,
  _swigc__p_std__vectorT_pf__TxTo_t,
  _swigc__p_std__vectorT_pf__amount_info_t,
  _swigc__p_std__vectorT_qs__DiscountFactor_t,
  _swigc__p_std__vectorT_qs__ForwardPeriod_t,
  _swigc__p_std__vectorT_qs__InterestRate_t,
  _swigc__p_std__vectorT_qs__Leg_t,
  _swigc__p_std__vectorT_qs__Maturity_t,
  _swigc__p_std__vectorT_qs__ZeroPeriod_t,
  _swigc__p_std__vectorT_shared_ptrT_Serie_t_t,
  _swigc__p_std__vectorT_std__reference_wrapperT_qs__CashFlow_const_t_t,
  _swigc__p_std__vectorT_std__shared_ptrT_Serie_t_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__vectorT_std__tupleT_pf__Transaction_pf__TxTo_size_t_t_t,
  _swigc__p_std__vectorT_std__unordered_mapT_std__shared_ptrT_Serie_t_std__shared_ptrT_Serie_t_t_t,
  _swigc__p_std__vectorT_std__unordered_mapT_std__string_std__shared_ptrT_Serie_t_t_t,
  _swigc__p_std__vectorT_std__unordered_setT_std__shared_ptrT_Serie_t_t_t,
  _swigc__p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t,
  _swigc__p_std__vectorT_unordered_mapT_std__string_Serie_t_t,
  _swigc__p_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t,
  _swigc__p_unordered_mapT_std__string_Serie_t,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */




SWIGRUNTIME void
SWIG_V8_SetModule(void *, swig_module_info *swig_module) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
  v8::Local<v8::External> mod = SWIGV8_EXTERNAL_NEW(swig_module);
  assert(!mod.IsEmpty());
#if (V8_MAJOR_VERSION-0) < 5
  global_obj->SetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"), mod);
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(v8::Isolate::GetCurrent(), SWIGV8_STRING_NEW("swig_module_info_data"));
  global_obj->SetPrivate(SWIGV8_CURRENT_CONTEXT(), privateKey, mod);
#endif
}

SWIGRUNTIME swig_module_info *
SWIG_V8_GetModule(void *) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
#if (V8_MAJOR_VERSION-0) < 5
  v8::Local<v8::Value> moduleinfo = global_obj->GetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"));
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(v8::Isolate::GetCurrent(), SWIGV8_STRING_NEW("swig_module_info_data"));
  v8::Local<v8::Value> moduleinfo;
  if (!global_obj->GetPrivate(SWIGV8_CURRENT_CONTEXT(), privateKey).ToLocal(&moduleinfo))
    return 0;
#endif

  if (moduleinfo.IsEmpty() || moduleinfo->IsNull() || moduleinfo->IsUndefined())
  {
    // It's not yet loaded
    return 0;
  }

  v8::Local<v8::External> moduleinfo_extern = v8::Local<v8::External>::Cast(moduleinfo);

  if (moduleinfo_extern.IsEmpty() || moduleinfo_extern->IsNull() || moduleinfo_extern->IsUndefined())
  {
    // Something's not right
    return 0;
  }

  void *ptr = moduleinfo_extern->Value();
  assert(ptr);
  swig_module_info *retptr = static_cast<swig_module_info *>(ptr);
  assert(retptr);
  return retptr;
}

#define SWIG_GetModule(clientdata)                SWIG_V8_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_V8_SetModule(clientdata, pointer)


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


// Note: 'extern "C"'' disables name mangling which makes it easier to load the symbol manually
// TODO: is it ok to do that?
extern "C"
#if (NODE_MODULE_VERSION < 0x000C)
void SWIGV8_INIT (v8::Handle<v8::Object> exports)
#else
void SWIGV8_INIT (v8::Handle<v8::Object> exports, v8::Handle<v8::Object> /*module*/)
#endif
{
  SWIG_InitializeModule(static_cast<void *>(&exports));

  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> exports_obj = exports;


import_array();


  // a class template for creating proxies of undefined types
  SWIGV8_SET_CLASS_TEMPL(SWIGV8_SWIGTYPE_Proxy_class_templ, SWIGV8_CreateClassTemplate("SwigProxy"));

  /* create objects for namespaces */
  

  /* create class templates */
  /* Name: _exports_vectors, Type: p_std__vectorT_std__string_t, Dtor: _wrap_delete_vectors */
v8::Handle<v8::FunctionTemplate> _exports_vectors_class = SWIGV8_CreateClassTemplate("_exports_vectors");
SWIGV8_SET_CLASS_TEMPL(_exports_vectors_clientData.class_templ, _exports_vectors_class);
_exports_vectors_clientData.dtor = _wrap_delete_vectors;
if (SWIGTYPE_p_std__vectorT_std__string_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_std__string_t->clientdata = &_exports_vectors_clientData;
}
/* Name: _exports_vectorn, Type: p_std__vectorT_NoneType_t, Dtor: _wrap_delete_vectorn */
v8::Handle<v8::FunctionTemplate> _exports_vectorn_class = SWIGV8_CreateClassTemplate("_exports_vectorn");
SWIGV8_SET_CLASS_TEMPL(_exports_vectorn_clientData.class_templ, _exports_vectorn_class);
_exports_vectorn_clientData.dtor = _wrap_delete_vectorn;
if (SWIGTYPE_p_std__vectorT_NoneType_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_NoneType_t->clientdata = &_exports_vectorn_clientData;
}
/* Name: _exports_vectord, Type: p_std__vectorT_double_t, Dtor: _wrap_delete_vectord */
v8::Handle<v8::FunctionTemplate> _exports_vectord_class = SWIGV8_CreateClassTemplate("_exports_vectord");
SWIGV8_SET_CLASS_TEMPL(_exports_vectord_clientData.class_templ, _exports_vectord_class);
_exports_vectord_clientData.dtor = _wrap_delete_vectord;
if (SWIGTYPE_p_std__vectorT_double_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_double_t->clientdata = &_exports_vectord_clientData;
}
/* Name: _exports_vectorl, Type: p_std__vectorT_long_t, Dtor: _wrap_delete_vectorl */
v8::Handle<v8::FunctionTemplate> _exports_vectorl_class = SWIGV8_CreateClassTemplate("_exports_vectorl");
SWIGV8_SET_CLASS_TEMPL(_exports_vectorl_clientData.class_templ, _exports_vectorl_class);
_exports_vectorl_clientData.dtor = _wrap_delete_vectorl;
if (SWIGTYPE_p_std__vectorT_long_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_long_t->clientdata = &_exports_vectorl_clientData;
}
/* Name: _exports_vectorser, Type: p_std__vectorT_shared_ptrT_Serie_t_t, Dtor: _wrap_delete_vectorser */
v8::Handle<v8::FunctionTemplate> _exports_vectorser_class = SWIGV8_CreateClassTemplate("_exports_vectorser");
SWIGV8_SET_CLASS_TEMPL(_exports_vectorser_clientData.class_templ, _exports_vectorser_class);
_exports_vectorser_clientData.dtor = _wrap_delete_vectorser;
if (SWIGTYPE_p_std__vectorT_shared_ptrT_Serie_t_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_shared_ptrT_Serie_t_t->clientdata = &_exports_vectorser_clientData;
}
/* Name: _exports_vectorm, Type: p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t, Dtor: _wrap_delete_vectorm */
v8::Handle<v8::FunctionTemplate> _exports_vectorm_class = SWIGV8_CreateClassTemplate("_exports_vectorm");
SWIGV8_SET_CLASS_TEMPL(_exports_vectorm_clientData.class_templ, _exports_vectorm_class);
_exports_vectorm_clientData.dtor = _wrap_delete_vectorm;
if (SWIGTYPE_p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_unordered_mapT_shared_ptrT_Serie_t_shared_ptrT_Serie_t_t_t->clientdata = &_exports_vectorm_clientData;
}
/* Name: _exports_vector_results, Type: p_std__vectorT_unordered_mapT_std__string_Serie_t_t, Dtor: _wrap_delete_vector_results */
v8::Handle<v8::FunctionTemplate> _exports_vector_results_class = SWIGV8_CreateClassTemplate("_exports_vector_results");
SWIGV8_SET_CLASS_TEMPL(_exports_vector_results_clientData.class_templ, _exports_vector_results_class);
_exports_vector_results_clientData.dtor = _wrap_delete_vector_results;
if (SWIGTYPE_p_std__vectorT_unordered_mapT_std__string_Serie_t_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_unordered_mapT_std__string_Serie_t_t->clientdata = &_exports_vector_results_clientData;
}
/* Name: _exports_NoneType, Type: p_NoneType, Dtor: _wrap_delete_NoneType */
v8::Handle<v8::FunctionTemplate> _exports_NoneType_class = SWIGV8_CreateClassTemplate("_exports_NoneType");
SWIGV8_SET_CLASS_TEMPL(_exports_NoneType_clientData.class_templ, _exports_NoneType_class);
_exports_NoneType_clientData.dtor = _wrap_delete_NoneType;
if (SWIGTYPE_p_NoneType->clientdata == 0) {
  SWIGTYPE_p_NoneType->clientdata = &_exports_NoneType_clientData;
}
/* Name: _exports_Serie, Type: p_Serie, Dtor: _wrap_delete_Serie */
v8::Handle<v8::FunctionTemplate> _exports_Serie_class = SWIGV8_CreateClassTemplate("_exports_Serie");
SWIGV8_SET_CLASS_TEMPL(_exports_Serie_clientData.class_templ, _exports_Serie_class);
_exports_Serie_clientData.dtor = _wrap_delete_Serie;
if (SWIGTYPE_p_Serie->clientdata == 0) {
  SWIGTYPE_p_Serie->clientdata = &_exports_Serie_clientData;
}
/* Name: _exports_Serie2d, Type: p_rp__Serie2d, Dtor: _wrap_delete_Serie2d */
v8::Handle<v8::FunctionTemplate> _exports_Serie2d_class = SWIGV8_CreateClassTemplate("_exports_Serie2d");
SWIGV8_SET_CLASS_TEMPL(_exports_Serie2d_clientData.class_templ, _exports_Serie2d_class);
_exports_Serie2d_clientData.dtor = _wrap_delete_Serie2d;
if (SWIGTYPE_p_rp__Serie2d->clientdata == 0) {
  SWIGTYPE_p_rp__Serie2d->clientdata = &_exports_Serie2d_clientData;
}
/* Name: _exports_Maturity, Type: p_qs__Maturity, Dtor: _wrap_delete_Maturity */
v8::Handle<v8::FunctionTemplate> _exports_Maturity_class = SWIGV8_CreateClassTemplate("_exports_Maturity");
SWIGV8_SET_CLASS_TEMPL(_exports_Maturity_clientData.class_templ, _exports_Maturity_class);
_exports_Maturity_clientData.dtor = _wrap_delete_Maturity;
if (SWIGTYPE_p_qs__Maturity->clientdata == 0) {
  SWIGTYPE_p_qs__Maturity->clientdata = &_exports_Maturity_clientData;
}
/* Name: _exports_ForwardPeriod, Type: p_qs__ForwardPeriod, Dtor: _wrap_delete_ForwardPeriod */
v8::Handle<v8::FunctionTemplate> _exports_ForwardPeriod_class = SWIGV8_CreateClassTemplate("_exports_ForwardPeriod");
SWIGV8_SET_CLASS_TEMPL(_exports_ForwardPeriod_clientData.class_templ, _exports_ForwardPeriod_class);
_exports_ForwardPeriod_clientData.dtor = _wrap_delete_ForwardPeriod;
if (SWIGTYPE_p_qs__ForwardPeriod->clientdata == 0) {
  SWIGTYPE_p_qs__ForwardPeriod->clientdata = &_exports_ForwardPeriod_clientData;
}
/* Name: _exports_ZeroPeriod, Type: p_qs__ZeroPeriod, Dtor: _wrap_delete_ZeroPeriod */
v8::Handle<v8::FunctionTemplate> _exports_ZeroPeriod_class = SWIGV8_CreateClassTemplate("_exports_ZeroPeriod");
SWIGV8_SET_CLASS_TEMPL(_exports_ZeroPeriod_clientData.class_templ, _exports_ZeroPeriod_class);
_exports_ZeroPeriod_clientData.dtor = _wrap_delete_ZeroPeriod;
if (SWIGTYPE_p_qs__ZeroPeriod->clientdata == 0) {
  SWIGTYPE_p_qs__ZeroPeriod->clientdata = &_exports_ZeroPeriod_clientData;
}
/* Name: _exports_Calendar, Type: p_qs__Calendar, Dtor: _wrap_delete_Calendar */
v8::Handle<v8::FunctionTemplate> _exports_Calendar_class = SWIGV8_CreateClassTemplate("_exports_Calendar");
SWIGV8_SET_CLASS_TEMPL(_exports_Calendar_clientData.class_templ, _exports_Calendar_class);
_exports_Calendar_clientData.dtor = _wrap_delete_Calendar;
if (SWIGTYPE_p_qs__Calendar->clientdata == 0) {
  SWIGTYPE_p_qs__Calendar->clientdata = &_exports_Calendar_clientData;
}
/* Name: _exports_Schedule, Type: p_qs__Schedule, Dtor: _wrap_delete_Schedule */
v8::Handle<v8::FunctionTemplate> _exports_Schedule_class = SWIGV8_CreateClassTemplate("_exports_Schedule");
SWIGV8_SET_CLASS_TEMPL(_exports_Schedule_clientData.class_templ, _exports_Schedule_class);
_exports_Schedule_clientData.dtor = _wrap_delete_Schedule;
if (SWIGTYPE_p_qs__Schedule->clientdata == 0) {
  SWIGTYPE_p_qs__Schedule->clientdata = &_exports_Schedule_clientData;
}
/* Name: _exports_DiscountFactor, Type: p_qs__DiscountFactor, Dtor: _wrap_delete_DiscountFactor */
v8::Handle<v8::FunctionTemplate> _exports_DiscountFactor_class = SWIGV8_CreateClassTemplate("_exports_DiscountFactor");
SWIGV8_SET_CLASS_TEMPL(_exports_DiscountFactor_clientData.class_templ, _exports_DiscountFactor_class);
_exports_DiscountFactor_clientData.dtor = _wrap_delete_DiscountFactor;
if (SWIGTYPE_p_qs__DiscountFactor->clientdata == 0) {
  SWIGTYPE_p_qs__DiscountFactor->clientdata = &_exports_DiscountFactor_clientData;
}
/* Name: _exports_InterestRate, Type: p_qs__InterestRate, Dtor: _wrap_delete_InterestRate */
v8::Handle<v8::FunctionTemplate> _exports_InterestRate_class = SWIGV8_CreateClassTemplate("_exports_InterestRate");
SWIGV8_SET_CLASS_TEMPL(_exports_InterestRate_clientData.class_templ, _exports_InterestRate_class);
_exports_InterestRate_clientData.dtor = _wrap_delete_InterestRate;
if (SWIGTYPE_p_qs__InterestRate->clientdata == 0) {
  SWIGTYPE_p_qs__InterestRate->clientdata = &_exports_InterestRate_clientData;
}
/* Name: _exports_LegGenerator, Type: p_qs__LegGenerator, Dtor: _wrap_delete_LegGenerator */
v8::Handle<v8::FunctionTemplate> _exports_LegGenerator_class = SWIGV8_CreateClassTemplate("_exports_LegGenerator");
SWIGV8_SET_CLASS_TEMPL(_exports_LegGenerator_clientData.class_templ, _exports_LegGenerator_class);
_exports_LegGenerator_clientData.dtor = _wrap_delete_LegGenerator;
if (SWIGTYPE_p_qs__LegGenerator->clientdata == 0) {
  SWIGTYPE_p_qs__LegGenerator->clientdata = &_exports_LegGenerator_clientData;
}
/* Name: _exports_ProductGenerator, Type: p_qs__ProductGenerator, Dtor: _wrap_delete_ProductGenerator */
v8::Handle<v8::FunctionTemplate> _exports_ProductGenerator_class = SWIGV8_CreateClassTemplate("_exports_ProductGenerator");
SWIGV8_SET_CLASS_TEMPL(_exports_ProductGenerator_clientData.class_templ, _exports_ProductGenerator_class);
_exports_ProductGenerator_clientData.dtor = _wrap_delete_ProductGenerator;
if (SWIGTYPE_p_qs__ProductGenerator->clientdata == 0) {
  SWIGTYPE_p_qs__ProductGenerator->clientdata = &_exports_ProductGenerator_clientData;
}
/* Name: _exports_Leg, Type: p_qs__Leg, Dtor: _wrap_delete_Leg */
v8::Handle<v8::FunctionTemplate> _exports_Leg_class = SWIGV8_CreateClassTemplate("_exports_Leg");
SWIGV8_SET_CLASS_TEMPL(_exports_Leg_clientData.class_templ, _exports_Leg_class);
_exports_Leg_clientData.dtor = _wrap_delete_Leg;
if (SWIGTYPE_p_qs__Leg->clientdata == 0) {
  SWIGTYPE_p_qs__Leg->clientdata = &_exports_Leg_clientData;
}
/* Name: _exports_Product, Type: p_qs__Product, Dtor: _wrap_delete_Product */
v8::Handle<v8::FunctionTemplate> _exports_Product_class = SWIGV8_CreateClassTemplate("_exports_Product");
SWIGV8_SET_CLASS_TEMPL(_exports_Product_clientData.class_templ, _exports_Product_class);
_exports_Product_clientData.dtor = _wrap_delete_Product;
if (SWIGTYPE_p_qs__Product->clientdata == 0) {
  SWIGTYPE_p_qs__Product->clientdata = &_exports_Product_clientData;
}
/* Name: _exports_TermStructure, Type: p_qs__TermStructure, Dtor: _wrap_delete_TermStructure */
v8::Handle<v8::FunctionTemplate> _exports_TermStructure_class = SWIGV8_CreateClassTemplate("_exports_TermStructure");
SWIGV8_SET_CLASS_TEMPL(_exports_TermStructure_clientData.class_templ, _exports_TermStructure_class);
_exports_TermStructure_clientData.dtor = _wrap_delete_TermStructure;
if (SWIGTYPE_p_qs__TermStructure->clientdata == 0) {
  SWIGTYPE_p_qs__TermStructure->clientdata = &_exports_TermStructure_clientData;
}
/* Name: _exports_CashFlow, Type: p_qs__CashFlow, Dtor: _wrap_delete_CashFlow */
v8::Handle<v8::FunctionTemplate> _exports_CashFlow_class = SWIGV8_CreateClassTemplate("_exports_CashFlow");
SWIGV8_SET_CLASS_TEMPL(_exports_CashFlow_clientData.class_templ, _exports_CashFlow_class);
_exports_CashFlow_clientData.dtor = _wrap_delete_CashFlow;
if (SWIGTYPE_p_qs__CashFlow->clientdata == 0) {
  SWIGTYPE_p_qs__CashFlow->clientdata = &_exports_CashFlow_clientData;
}
/* Name: _exports_CouponCashFlow, Type: p_qs__CouponCashFlow, Dtor: _wrap_delete_CouponCashFlow */
v8::Handle<v8::FunctionTemplate> _exports_CouponCashFlow_class = SWIGV8_CreateClassTemplate("_exports_CouponCashFlow");
SWIGV8_SET_CLASS_TEMPL(_exports_CouponCashFlow_clientData.class_templ, _exports_CouponCashFlow_class);
_exports_CouponCashFlow_clientData.dtor = _wrap_delete_CouponCashFlow;
if (SWIGTYPE_p_qs__CouponCashFlow->clientdata == 0) {
  SWIGTYPE_p_qs__CouponCashFlow->clientdata = &_exports_CouponCashFlow_clientData;
}
/* Name: _exports_StartCashFlow, Type: p_qs__StartCashFlow, Dtor: _wrap_delete_StartCashFlow */
v8::Handle<v8::FunctionTemplate> _exports_StartCashFlow_class = SWIGV8_CreateClassTemplate("_exports_StartCashFlow");
SWIGV8_SET_CLASS_TEMPL(_exports_StartCashFlow_clientData.class_templ, _exports_StartCashFlow_class);
_exports_StartCashFlow_clientData.dtor = _wrap_delete_StartCashFlow;
if (SWIGTYPE_p_qs__StartCashFlow->clientdata == 0) {
  SWIGTYPE_p_qs__StartCashFlow->clientdata = &_exports_StartCashFlow_clientData;
}
/* Name: _exports_EndCashFlow, Type: p_qs__EndCashFlow, Dtor: _wrap_delete_EndCashFlow */
v8::Handle<v8::FunctionTemplate> _exports_EndCashFlow_class = SWIGV8_CreateClassTemplate("_exports_EndCashFlow");
SWIGV8_SET_CLASS_TEMPL(_exports_EndCashFlow_clientData.class_templ, _exports_EndCashFlow_class);
_exports_EndCashFlow_clientData.dtor = _wrap_delete_EndCashFlow;
if (SWIGTYPE_p_qs__EndCashFlow->clientdata == 0) {
  SWIGTYPE_p_qs__EndCashFlow->clientdata = &_exports_EndCashFlow_clientData;
}
/* Name: _exports_CustomCashFlow, Type: p_qs__CustomCashFlow, Dtor: _wrap_delete_CustomCashFlow */
v8::Handle<v8::FunctionTemplate> _exports_CustomCashFlow_class = SWIGV8_CreateClassTemplate("_exports_CustomCashFlow");
SWIGV8_SET_CLASS_TEMPL(_exports_CustomCashFlow_clientData.class_templ, _exports_CustomCashFlow_class);
_exports_CustomCashFlow_clientData.dtor = _wrap_delete_CustomCashFlow;
if (SWIGTYPE_p_qs__CustomCashFlow->clientdata == 0) {
  SWIGTYPE_p_qs__CustomCashFlow->clientdata = &_exports_CustomCashFlow_clientData;
}
/* Name: _exports_TxFrom, Type: p_pf__TxFrom, Dtor: _wrap_delete_TxFrom */
v8::Handle<v8::FunctionTemplate> _exports_TxFrom_class = SWIGV8_CreateClassTemplate("_exports_TxFrom");
SWIGV8_SET_CLASS_TEMPL(_exports_TxFrom_clientData.class_templ, _exports_TxFrom_class);
_exports_TxFrom_clientData.dtor = _wrap_delete_TxFrom;
if (SWIGTYPE_p_pf__TxFrom->clientdata == 0) {
  SWIGTYPE_p_pf__TxFrom->clientdata = &_exports_TxFrom_clientData;
}
/* Name: _exports_TxTo, Type: p_pf__TxTo, Dtor: _wrap_delete_TxTo */
v8::Handle<v8::FunctionTemplate> _exports_TxTo_class = SWIGV8_CreateClassTemplate("_exports_TxTo");
SWIGV8_SET_CLASS_TEMPL(_exports_TxTo_clientData.class_templ, _exports_TxTo_class);
_exports_TxTo_clientData.dtor = _wrap_delete_TxTo;
if (SWIGTYPE_p_pf__TxTo->clientdata == 0) {
  SWIGTYPE_p_pf__TxTo->clientdata = &_exports_TxTo_clientData;
}
/* Name: _exports_amount_info, Type: p_pf__amount_info, Dtor: _wrap_delete_amount_info */
v8::Handle<v8::FunctionTemplate> _exports_amount_info_class = SWIGV8_CreateClassTemplate("_exports_amount_info");
SWIGV8_SET_CLASS_TEMPL(_exports_amount_info_clientData.class_templ, _exports_amount_info_class);
_exports_amount_info_clientData.dtor = _wrap_delete_amount_info;
if (SWIGTYPE_p_pf__amount_info->clientdata == 0) {
  SWIGTYPE_p_pf__amount_info->clientdata = &_exports_amount_info_clientData;
}
/* Name: _exports_Transaction, Type: p_pf__Transaction, Dtor: _wrap_delete_Transaction */
v8::Handle<v8::FunctionTemplate> _exports_Transaction_class = SWIGV8_CreateClassTemplate("_exports_Transaction");
SWIGV8_SET_CLASS_TEMPL(_exports_Transaction_clientData.class_templ, _exports_Transaction_class);
_exports_Transaction_clientData.dtor = _wrap_delete_Transaction;
if (SWIGTYPE_p_pf__Transaction->clientdata == 0) {
  SWIGTYPE_p_pf__Transaction->clientdata = &_exports_Transaction_clientData;
}
/* Name: _exports_tuple_hash, Type: p_pf__tuple_hash, Dtor: _wrap_delete_tuple_hash */
v8::Handle<v8::FunctionTemplate> _exports_tuple_hash_class = SWIGV8_CreateClassTemplate("_exports_tuple_hash");
SWIGV8_SET_CLASS_TEMPL(_exports_tuple_hash_clientData.class_templ, _exports_tuple_hash_class);
_exports_tuple_hash_clientData.dtor = _wrap_delete_tuple_hash;
if (SWIGTYPE_p_pf__tuple_hash->clientdata == 0) {
  SWIGTYPE_p_pf__tuple_hash->clientdata = &_exports_tuple_hash_clientData;
}
/* Name: _exports_BlockChain, Type: p_pf__BlockChain, Dtor: _wrap_delete_BlockChain */
v8::Handle<v8::FunctionTemplate> _exports_BlockChain_class = SWIGV8_CreateClassTemplate("_exports_BlockChain");
SWIGV8_SET_CLASS_TEMPL(_exports_BlockChain_clientData.class_templ, _exports_BlockChain_class);
_exports_BlockChain_clientData.dtor = _wrap_delete_BlockChain;
if (SWIGTYPE_p_pf__BlockChain->clientdata == 0) {
  SWIGTYPE_p_pf__BlockChain->clientdata = &_exports_BlockChain_clientData;
}
/* Name: _exports_Deal, Type: p_pf__Deal, Dtor: _wrap_delete_Deal */
v8::Handle<v8::FunctionTemplate> _exports_Deal_class = SWIGV8_CreateClassTemplate("_exports_Deal");
SWIGV8_SET_CLASS_TEMPL(_exports_Deal_clientData.class_templ, _exports_Deal_class);
_exports_Deal_clientData.dtor = _wrap_delete_Deal;
if (SWIGTYPE_p_pf__Deal->clientdata == 0) {
  SWIGTYPE_p_pf__Deal->clientdata = &_exports_Deal_clientData;
}
/* Name: _exports_OpenDeal, Type: p_pf__OpenDeal, Dtor: _wrap_delete_OpenDeal */
v8::Handle<v8::FunctionTemplate> _exports_OpenDeal_class = SWIGV8_CreateClassTemplate("_exports_OpenDeal");
SWIGV8_SET_CLASS_TEMPL(_exports_OpenDeal_clientData.class_templ, _exports_OpenDeal_class);
_exports_OpenDeal_clientData.dtor = _wrap_delete_OpenDeal;
if (SWIGTYPE_p_pf__OpenDeal->clientdata == 0) {
  SWIGTYPE_p_pf__OpenDeal->clientdata = &_exports_OpenDeal_clientData;
}
/* Name: _exports_ClosedDeal, Type: p_pf__ClosedDeal, Dtor: _wrap_delete_ClosedDeal */
v8::Handle<v8::FunctionTemplate> _exports_ClosedDeal_class = SWIGV8_CreateClassTemplate("_exports_ClosedDeal");
SWIGV8_SET_CLASS_TEMPL(_exports_ClosedDeal_clientData.class_templ, _exports_ClosedDeal_class);
_exports_ClosedDeal_clientData.dtor = _wrap_delete_ClosedDeal;
if (SWIGTYPE_p_pf__ClosedDeal->clientdata == 0) {
  SWIGTYPE_p_pf__ClosedDeal->clientdata = &_exports_ClosedDeal_clientData;
}
/* Name: _exports_SymbolInfoTick, Type: p_pf__SymbolInfoTick, Dtor: _wrap_delete_SymbolInfoTick */
v8::Handle<v8::FunctionTemplate> _exports_SymbolInfoTick_class = SWIGV8_CreateClassTemplate("_exports_SymbolInfoTick");
SWIGV8_SET_CLASS_TEMPL(_exports_SymbolInfoTick_clientData.class_templ, _exports_SymbolInfoTick_class);
_exports_SymbolInfoTick_clientData.dtor = _wrap_delete_SymbolInfoTick;
if (SWIGTYPE_p_pf__SymbolInfoTick->clientdata == 0) {
  SWIGTYPE_p_pf__SymbolInfoTick->clientdata = &_exports_SymbolInfoTick_clientData;
}
/* Name: _exports_FakeTrader, Type: p_pf__FakeTrader, Dtor: _wrap_delete_FakeTrader */
v8::Handle<v8::FunctionTemplate> _exports_FakeTrader_class = SWIGV8_CreateClassTemplate("_exports_FakeTrader");
SWIGV8_SET_CLASS_TEMPL(_exports_FakeTrader_clientData.class_templ, _exports_FakeTrader_class);
_exports_FakeTrader_clientData.dtor = _wrap_delete_FakeTrader;
if (SWIGTYPE_p_pf__FakeTrader->clientdata == 0) {
  SWIGTYPE_p_pf__FakeTrader->clientdata = &_exports_FakeTrader_clientData;
}
/* Name: _exports_Simulator, Type: p_sim__Simulator, Dtor: _wrap_delete_Simulator */
v8::Handle<v8::FunctionTemplate> _exports_Simulator_class = SWIGV8_CreateClassTemplate("_exports_Simulator");
SWIGV8_SET_CLASS_TEMPL(_exports_Simulator_clientData.class_templ, _exports_Simulator_class);
_exports_Simulator_clientData.dtor = _wrap_delete_Simulator;
if (SWIGTYPE_p_sim__Simulator->clientdata == 0) {
  SWIGTYPE_p_sim__Simulator->clientdata = &_exports_Simulator_clientData;
}


  /* register wrapper functions */
  SWIGV8_AddMemberFunction(_exports_vectors_class, "size", _wrap_vectors_size);
SWIGV8_AddMemberFunction(_exports_vectors_class, "capacity", _wrap_vectors_capacity);
SWIGV8_AddMemberFunction(_exports_vectors_class, "reserve", _wrap_vectors_reserve);
SWIGV8_AddMemberFunction(_exports_vectors_class, "isEmpty", _wrap_vectors_isEmpty);
SWIGV8_AddMemberFunction(_exports_vectors_class, "clear", _wrap_vectors_clear);
SWIGV8_AddMemberFunction(_exports_vectors_class, "add", _wrap_vectors_add);
SWIGV8_AddMemberFunction(_exports_vectors_class, "get", _wrap_vectors_get);
SWIGV8_AddMemberFunction(_exports_vectors_class, "set", _wrap_vectors_set);
SWIGV8_AddMemberFunction(_exports_vectorn_class, "size", _wrap_vectorn_size);
SWIGV8_AddMemberFunction(_exports_vectorn_class, "capacity", _wrap_vectorn_capacity);
SWIGV8_AddMemberFunction(_exports_vectorn_class, "reserve", _wrap_vectorn_reserve);
SWIGV8_AddMemberFunction(_exports_vectorn_class, "isEmpty", _wrap_vectorn_isEmpty);
SWIGV8_AddMemberFunction(_exports_vectorn_class, "clear", _wrap_vectorn_clear);
SWIGV8_AddMemberFunction(_exports_vectorn_class, "add", _wrap_vectorn_add);
SWIGV8_AddMemberFunction(_exports_vectorn_class, "get", _wrap_vectorn_get);
SWIGV8_AddMemberFunction(_exports_vectorn_class, "set", _wrap_vectorn_set);
SWIGV8_AddMemberFunction(_exports_vectord_class, "size", _wrap_vectord_size);
SWIGV8_AddMemberFunction(_exports_vectord_class, "capacity", _wrap_vectord_capacity);
SWIGV8_AddMemberFunction(_exports_vectord_class, "reserve", _wrap_vectord_reserve);
SWIGV8_AddMemberFunction(_exports_vectord_class, "isEmpty", _wrap_vectord_isEmpty);
SWIGV8_AddMemberFunction(_exports_vectord_class, "clear", _wrap_vectord_clear);
SWIGV8_AddMemberFunction(_exports_vectord_class, "add", _wrap_vectord_add);
SWIGV8_AddMemberFunction(_exports_vectord_class, "get", _wrap_vectord_get);
SWIGV8_AddMemberFunction(_exports_vectord_class, "set", _wrap_vectord_set);
SWIGV8_AddMemberFunction(_exports_vectorl_class, "size", _wrap_vectorl_size);
SWIGV8_AddMemberFunction(_exports_vectorl_class, "capacity", _wrap_vectorl_capacity);
SWIGV8_AddMemberFunction(_exports_vectorl_class, "reserve", _wrap_vectorl_reserve);
SWIGV8_AddMemberFunction(_exports_vectorl_class, "isEmpty", _wrap_vectorl_isEmpty);
SWIGV8_AddMemberFunction(_exports_vectorl_class, "clear", _wrap_vectorl_clear);
SWIGV8_AddMemberFunction(_exports_vectorl_class, "add", _wrap_vectorl_add);
SWIGV8_AddMemberFunction(_exports_vectorl_class, "get", _wrap_vectorl_get);
SWIGV8_AddMemberFunction(_exports_vectorl_class, "set", _wrap_vectorl_set);
SWIGV8_AddMemberFunction(_exports_vectorser_class, "size", _wrap_vectorser_size);
SWIGV8_AddMemberFunction(_exports_vectorser_class, "capacity", _wrap_vectorser_capacity);
SWIGV8_AddMemberFunction(_exports_vectorser_class, "reserve", _wrap_vectorser_reserve);
SWIGV8_AddMemberFunction(_exports_vectorser_class, "isEmpty", _wrap_vectorser_isEmpty);
SWIGV8_AddMemberFunction(_exports_vectorser_class, "clear", _wrap_vectorser_clear);
SWIGV8_AddMemberFunction(_exports_vectorser_class, "add", _wrap_vectorser_add);
SWIGV8_AddMemberFunction(_exports_vectorser_class, "get", _wrap_vectorser_get);
SWIGV8_AddMemberFunction(_exports_vectorser_class, "set", _wrap_vectorser_set);
SWIGV8_AddMemberFunction(_exports_vectorm_class, "size", _wrap_vectorm_size);
SWIGV8_AddMemberFunction(_exports_vectorm_class, "capacity", _wrap_vectorm_capacity);
SWIGV8_AddMemberFunction(_exports_vectorm_class, "reserve", _wrap_vectorm_reserve);
SWIGV8_AddMemberFunction(_exports_vectorm_class, "isEmpty", _wrap_vectorm_isEmpty);
SWIGV8_AddMemberFunction(_exports_vectorm_class, "clear", _wrap_vectorm_clear);
SWIGV8_AddMemberFunction(_exports_vectorm_class, "add", _wrap_vectorm_add);
SWIGV8_AddMemberFunction(_exports_vectorm_class, "get", _wrap_vectorm_get);
SWIGV8_AddMemberFunction(_exports_vectorm_class, "set", _wrap_vectorm_set);
SWIGV8_AddMemberFunction(_exports_vector_results_class, "size", _wrap_vector_results_size);
SWIGV8_AddMemberFunction(_exports_vector_results_class, "capacity", _wrap_vector_results_capacity);
SWIGV8_AddMemberFunction(_exports_vector_results_class, "reserve", _wrap_vector_results_reserve);
SWIGV8_AddMemberFunction(_exports_vector_results_class, "isEmpty", _wrap_vector_results_isEmpty);
SWIGV8_AddMemberFunction(_exports_vector_results_class, "clear", _wrap_vector_results_clear);
SWIGV8_AddMemberFunction(_exports_vector_results_class, "add", _wrap_vector_results_add);
SWIGV8_AddMemberFunction(_exports_vector_results_class, "get", _wrap_vector_results_get);
SWIGV8_AddMemberFunction(_exports_vector_results_class, "set", _wrap_vector_results_set);
SWIGV8_AddStaticVariable(exports_obj, "unknown_type", _wrap_unknown_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "basic_none_type", _wrap_basic_none_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "string_type", _wrap_string_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "basic_numpy_type", _wrap_basic_numpy_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "map_string_serie_type", _wrap_map_string_serie_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "map_serie_serie_type", _wrap_map_serie_serie_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "set_serie_type", _wrap_set_serie_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "vector_none_type", _wrap_vector_none_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "vector_string_type", _wrap_vector_string_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "vector_map_string_serie_type", _wrap_vector_map_string_serie_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "vector_map_serie_serie_type", _wrap_vector_map_serie_serie_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "vector_set_serie_type", _wrap_vector_set_serie_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "vector_serie_type", _wrap_vector_serie_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "calculation_type", _wrap_calculation_type, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "total_types", _wrap_total_types, JS_veto_set_variable);
SWIGV8_AddMemberFunction(_exports_Serie_class, "__str__", _wrap_Serie___str__);
SWIGV8_AddMemberFunction(_exports_Serie_class, "get_calc", _wrap_Serie_get_calc);
SWIGV8_AddMemberFunction(_exports_Serie_class, "data", _wrap_Serie_data);
SWIGV8_AddMemberFunction(_exports_Serie_class, "raw_data", _wrap_Serie__wrap_Serie_raw_data);
SWIGV8_AddMemberFunction(_exports_Serie_class, "sub", _wrap_Serie__wrap_Serie_sub);
SWIGV8_AddMemberFunction(_exports_Serie_class, "size", _wrap_Serie_size);
SWIGV8_AddMemberFunction(_exports_Serie_class, "wait", _wrap_Serie__wrap_Serie_wait);
SWIGV8_AddMemberFunction(_exports_Serie_class, "is_calculated", _wrap_Serie_is_calculated);
SWIGV8_AddMemberFunction(_exports_Serie_class, "get_basic_string", _wrap_Serie_get_basic_string);
SWIGV8_AddMemberFunction(_exports_Serie_class, "get_map_string_serie", _wrap_Serie_get_map_string_serie);
SWIGV8_AddMemberFunction(_exports_Serie_class, "get_map_serie_serie", _wrap_Serie_get_map_serie_serie);
SWIGV8_AddMemberFunction(_exports_Serie_class, "get_vector_none", _wrap_Serie_get_vector_none);
SWIGV8_AddMemberFunction(_exports_Serie_class, "get_vector_string", _wrap_Serie_get_vector_string);
SWIGV8_AddMemberFunction(_exports_Serie_class, "get_vector_serie", _wrap_Serie_get_vector_serie);
SWIGV8_AddMemberFunction(_exports_Serie_class, "get_vector_map_string_serie", _wrap_Serie_get_vector_map_string_serie);
SWIGV8_AddMemberFunction(_exports_Serie_class, "get_vector_map_serie_serie", _wrap_Serie_get_vector_map_serie_serie);
SWIGV8_AddMemberFunction(_exports_Serie_class, "get_basic_numpy", _wrap_Serie_get_basic_numpy);
SWIGV8_AddMemberFunction(_exports_Serie_class, "to_vector", _wrap_Serie_to_vector);
SWIGV8_AddMemberFunction(_exports_Serie_class, "get_set_serie", _wrap_Serie_get_set_serie);
SWIGV8_AddMemberFunction(_exports_Serie_class, "get_vector_set_serie", _wrap_Serie_get_vector_set_serie);
SWIGV8_AddMemberFunction(_exports_Serie_class, "set_basic_string", _wrap_Serie_set_basic_string);
SWIGV8_AddMemberFunction(_exports_Serie_class, "set_basic_none", _wrap_Serie_set_basic_none);
SWIGV8_AddMemberFunction(_exports_Serie_class, "set_basic_numpy", _wrap_Serie__wrap_Serie_set_basic_numpy);
SWIGV8_AddMemberFunction(_exports_Serie_class, "set_vector_string", _wrap_Serie_set_vector_string);
SWIGV8_AddMemberVariable(_exports_Serie_class, "type", _wrap_Serie_type_get, _wrap_Serie_type_set);
SWIGV8_AddStaticVariable(exports_obj, "ZERO", _wrap_ZERO_get, _wrap_ZERO_set);
SWIGV8_AddStaticVariable(exports_obj, "LINEAR", _wrap_qs_LINEAR, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "YIELD", _wrap_qs_YIELD, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "EXPONENTIAL", _wrap_qs_EXPONENTIAL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "ANNUAL", _wrap_qs_ANNUAL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SEMIANNUAL", _wrap_qs_SEMIANNUAL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "QUATERLY", _wrap_qs_QUATERLY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "MONTHLY", _wrap_qs_MONTHLY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "YEAR", _wrap_qs_YEAR, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SEMESTER", _wrap_qs_SEMESTER, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "TRIMESTER", _wrap_qs_TRIMESTER, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "MONTH", _wrap_qs_MONTH, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "ACT_ACT", _wrap_qs_ACT_ACT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "ACT_360", _wrap_qs_ACT_360, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "ACT_365", _wrap_qs_ACT_365, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "EQUALS", _wrap_qs_EQUALS, JS_veto_set_variable);
SWIGV8_AddMemberFunction(_exports_Maturity_class, "to", _wrap_Maturity_to);
SWIGV8_AddMemberFunction(_exports_Maturity_class, "get_discount_factor", _wrap_Maturity_get_discount_factor);
SWIGV8_AddMemberVariable(_exports_Maturity_class, "has_pillar", _wrap_Maturity_has_pillar_get, _wrap_Maturity_has_pillar_set);
SWIGV8_AddMemberVariable(_exports_Maturity_class, "pillar", _wrap_Maturity_pillar_get, _wrap_Maturity_pillar_set);
SWIGV8_AddMemberVariable(_exports_Maturity_class, "value", _wrap_Maturity_value_get, _wrap_Maturity_value_set);
SWIGV8_AddMemberFunction(_exports_ForwardPeriod_class, "duration", _wrap_ForwardPeriod_duration);
SWIGV8_AddMemberFunction(_exports_ForwardPeriod_class, "inside", _wrap_ForwardPeriod_inside);
SWIGV8_AddMemberFunction(_exports_ForwardPeriod_class, "discount_factor", _wrap_ForwardPeriod__wrap_ForwardPeriod_discount_factor);
SWIGV8_AddMemberFunction(_exports_ForwardPeriod_class, "forward_rate", _wrap_ForwardPeriod__wrap_ForwardPeriod_forward_rate);
SWIGV8_AddMemberFunction(_exports_ForwardPeriod_class, "next_discount_factor", _wrap_ForwardPeriod_next_discount_factor);
SWIGV8_AddMemberVariable(_exports_ForwardPeriod_class, "start", _wrap_ForwardPeriod_start_get, _wrap_ForwardPeriod_start_set);
SWIGV8_AddMemberVariable(_exports_ForwardPeriod_class, "end", _wrap_ForwardPeriod_end_get, _wrap_ForwardPeriod_end_set);
SWIGV8_AddMemberFunction(_exports_Schedule_class, "get_forward_periods", _wrap_Schedule_get_forward_periods);
SWIGV8_AddMemberFunction(_exports_Schedule_class, "get_spot_periods", _wrap_Schedule_get_spot_periods);
SWIGV8_AddMemberFunction(_exports_Schedule_class, "get_first_period", _wrap_Schedule_get_first_period);
SWIGV8_AddMemberFunction(_exports_Schedule_class, "get_last_period", _wrap_Schedule_get_last_period);
SWIGV8_AddMemberFunction(_exports_Schedule_class, "spot_to_forward", _wrap_Schedule__wrap_Schedule_spot_to_forward);
SWIGV8_AddMemberFunction(_exports_DiscountFactor_class, "to_interest_rate", _wrap_DiscountFactor__wrap_DiscountFactor_to_interest_rate);
SWIGV8_AddMemberVariable(_exports_DiscountFactor_class, "value", _wrap_DiscountFactor_value_get, _wrap_DiscountFactor_value_set);
SWIGV8_AddMemberFunction(_exports_InterestRate_class, "get_discount_factor_start", _wrap_InterestRate_get_discount_factor_start);
SWIGV8_AddMemberFunction(_exports_InterestRate_class, "get_discount_factors_end", _wrap_InterestRate_get_discount_factors_end);
SWIGV8_AddMemberFunction(_exports_InterestRate_class, "to_discount_factor", _wrap_InterestRate_to_discount_factor);
SWIGV8_AddMemberFunction(_exports_InterestRate_class, "to_other_interest_rate", _wrap_InterestRate__wrap_InterestRate_to_other_interest_rate);
SWIGV8_AddMemberVariable(_exports_InterestRate_class, "value", _wrap_InterestRate_value_get, _wrap_InterestRate_value_set);
SWIGV8_AddMemberVariable(_exports_InterestRate_class, "c", _wrap_InterestRate_c_get, _wrap_InterestRate_c_set);
SWIGV8_AddMemberVariable(_exports_InterestRate_class, "conv", _wrap_InterestRate_conv_get, _wrap_InterestRate_conv_set);
SWIGV8_AddMemberFunction(_exports_Leg_class, "npv", _wrap_Leg_npv);
SWIGV8_AddMemberVariable(_exports_Leg_class, "flows", _wrap_Leg_flows_get, _wrap_Leg_flows_set);
SWIGV8_AddMemberFunction(_exports_Product_class, "npv", _wrap_Product_npv);
SWIGV8_AddMemberVariable(_exports_Product_class, "legs", _wrap_Product_legs_get, _wrap_Product_legs_set);
SWIGV8_AddMemberFunction(_exports_TermStructure_class, "append_spot", _wrap_TermStructure__wrap_TermStructure_append_spot);
SWIGV8_AddMemberFunction(_exports_TermStructure_class, "append_forward", _wrap_TermStructure_append_forward);
SWIGV8_AddMemberFunction(_exports_TermStructure_class, "append_par", _wrap_TermStructure_append_par);
SWIGV8_AddMemberFunction(_exports_TermStructure_class, "build", _wrap_TermStructure_build);
SWIGV8_AddMemberFunction(_exports_TermStructure_class, "get_discount_factor_start", _wrap_TermStructure_get_discount_factor_start);
SWIGV8_AddMemberFunction(_exports_TermStructure_class, "get_discount_factors_end", _wrap_TermStructure_get_discount_factors_end);
SWIGV8_AddMemberFunction(_exports_TermStructure_class, "get_interpolated_interest_rate", _wrap_TermStructure_get_interpolated_interest_rate);
SWIGV8_AddMemberFunction(_exports_TermStructure_class, "make_cashflow", _wrap_TermStructure_make_cashflow);
SWIGV8_AddMemberFunction(_exports_TermStructure_class, "get_spots", _wrap_TermStructure__wrap_TermStructure_get_spots);
SWIGV8_AddMemberFunction(_exports_TermStructure_class, "get_forwards", _wrap_TermStructure__wrap_TermStructure_get_forwards);
SWIGV8_AddMemberFunction(_exports_TermStructure_class, "get_first_maturity", _wrap_TermStructure_get_first_maturity);
SWIGV8_AddMemberFunction(_exports_TermStructure_class, "get_first_interest_rate", _wrap_TermStructure_get_first_interest_rate);
SWIGV8_AddMemberFunction(_exports_TermStructure_class, "get_last_maturity", _wrap_TermStructure_get_last_maturity);
SWIGV8_AddMemberFunction(_exports_TermStructure_class, "get_last_interest_rate", _wrap_TermStructure_get_last_interest_rate);
SWIGV8_AddMemberVariable(_exports_TermStructure_class, "_convention", _wrap_TermStructure__convention_get, _wrap_TermStructure__convention_set);
SWIGV8_AddMemberVariable(_exports_TermStructure_class, "_compound_times", _wrap_TermStructure__compound_times_get, _wrap_TermStructure__compound_times_set);
SWIGV8_AddMemberFunction(_exports_CashFlow_class, "to_start_cashflow", _wrap_CashFlow_to_start_cashflow);
SWIGV8_AddMemberFunction(_exports_CashFlow_class, "to_end_cashflow", _wrap_CashFlow_to_end_cashflow);
SWIGV8_AddMemberFunction(_exports_CashFlow_class, "to_coupon", _wrap_CashFlow__wrap_CashFlow_to_coupon);
SWIGV8_AddMemberFunction(_exports_CashFlow_class, "to_custom_cashflow", _wrap_CashFlow__wrap_CashFlow_to_custom_cashflow);
SWIGV8_AddMemberVariable(_exports_CashFlow_class, "cash", _wrap_CashFlow_cash_get, _wrap_CashFlow_cash_set);
SWIGV8_AddMemberFunction(_exports_CouponCashFlow_class, "to_start_cashflow", _wrap_CouponCashFlow_to_start_cashflow);
SWIGV8_AddMemberFunction(_exports_CouponCashFlow_class, "to_end_cashflow", _wrap_CouponCashFlow_to_end_cashflow);
SWIGV8_AddMemberFunction(_exports_CouponCashFlow_class, "to_coupon", _wrap_CouponCashFlow__wrap_CouponCashFlow_to_coupon);
SWIGV8_AddMemberFunction(_exports_CouponCashFlow_class, "to_custom_cashflow", _wrap_CouponCashFlow__wrap_CouponCashFlow_to_custom_cashflow);
SWIGV8_AddMemberVariable(_exports_CouponCashFlow_class, "growth", _wrap_CouponCashFlow_growth_get, _wrap_CouponCashFlow_growth_set);
SWIGV8_AddMemberFunction(_exports_StartCashFlow_class, "to_start_cashflow", _wrap_StartCashFlow_to_start_cashflow);
SWIGV8_AddMemberFunction(_exports_StartCashFlow_class, "to_end_cashflow", _wrap_StartCashFlow_to_end_cashflow);
SWIGV8_AddMemberFunction(_exports_StartCashFlow_class, "to_coupon", _wrap_StartCashFlow__wrap_StartCashFlow_to_coupon);
SWIGV8_AddMemberFunction(_exports_StartCashFlow_class, "to_custom_cashflow", _wrap_StartCashFlow__wrap_StartCashFlow_to_custom_cashflow);
SWIGV8_AddMemberFunction(_exports_EndCashFlow_class, "to_start_cashflow", _wrap_EndCashFlow_to_start_cashflow);
SWIGV8_AddMemberFunction(_exports_EndCashFlow_class, "to_end_cashflow", _wrap_EndCashFlow_to_end_cashflow);
SWIGV8_AddMemberFunction(_exports_EndCashFlow_class, "to_coupon", _wrap_EndCashFlow__wrap_EndCashFlow_to_coupon);
SWIGV8_AddMemberFunction(_exports_EndCashFlow_class, "to_custom_cashflow", _wrap_EndCashFlow__wrap_EndCashFlow_to_custom_cashflow);
SWIGV8_AddMemberFunction(_exports_CustomCashFlow_class, "to_start_cashflow", _wrap_CustomCashFlow_to_start_cashflow);
SWIGV8_AddMemberFunction(_exports_CustomCashFlow_class, "to_end_cashflow", _wrap_CustomCashFlow_to_end_cashflow);
SWIGV8_AddMemberFunction(_exports_CustomCashFlow_class, "to_coupon", _wrap_CustomCashFlow__wrap_CustomCashFlow_to_coupon);
SWIGV8_AddMemberFunction(_exports_CustomCashFlow_class, "to_custom_cashflow", _wrap_CustomCashFlow__wrap_CustomCashFlow_to_custom_cashflow);
SWIGV8_AddMemberFunction(_exports_CustomCashFlow_class, "get_maturity", _wrap_CustomCashFlow_get_maturity);
SWIGV8_AddMemberVariable(_exports_TxFrom_class, "txid", _wrap_TxFrom_txid_get, _wrap_TxFrom_txid_set);
SWIGV8_AddMemberVariable(_exports_TxFrom_class, "vout", _wrap_TxFrom_vout_get, _wrap_TxFrom_vout_set);
SWIGV8_AddMemberVariable(_exports_TxTo_class, "amount", _wrap_TxTo_amount_get, _wrap_TxTo_amount_set);
SWIGV8_AddMemberVariable(_exports_TxTo_class, "currency", _wrap_TxTo_currency_get, _wrap_TxTo_currency_set);
SWIGV8_AddMemberVariable(_exports_TxTo_class, "wallet", _wrap_TxTo_wallet_get, _wrap_TxTo_wallet_set);
SWIGV8_AddMemberFunction(_exports_amount_info_class, "get_amount", _wrap_amount_info_get_amount);
SWIGV8_AddMemberFunction(_exports_amount_info_class, "get_currency", _wrap_amount_info_get_currency);
SWIGV8_AddMemberVariable(_exports_Transaction_class, "txid", _wrap_Transaction_txid_get, _wrap_Transaction_txid_set);
SWIGV8_AddMemberVariable(_exports_Transaction_class, "description", _wrap_Transaction_description_get, _wrap_Transaction_description_set);
SWIGV8_AddMemberVariable(_exports_Transaction_class, "group", _wrap_Transaction_group_get, _wrap_Transaction_group_set);
SWIGV8_AddMemberVariable(_exports_Transaction_class, "pay_id", _wrap_Transaction_pay_id_get, _wrap_Transaction_pay_id_set);
SWIGV8_AddMemberVariable(_exports_Transaction_class, "contract_id", _wrap_Transaction_contract_id_get, _wrap_Transaction_contract_id_set);
SWIGV8_AddMemberVariable(_exports_Transaction_class, "amounts", _wrap_Transaction_amounts_get, _wrap_Transaction_amounts_set);
SWIGV8_AddMemberVariable(_exports_Transaction_class, "froms", _wrap_Transaction_froms_get, _wrap_Transaction_froms_set);
SWIGV8_AddMemberVariable(_exports_Transaction_class, "tos", _wrap_Transaction_tos_get, _wrap_Transaction_tos_set);
SWIGV8_AddMemberFunction(_exports_Transaction_class, "get_amount", _wrap_Transaction_get_amount);
SWIGV8_AddMemberVariable(_exports_BlockChain_class, "data", _wrap_BlockChain_data_get, _wrap_BlockChain_data_set);
SWIGV8_AddMemberVariable(_exports_BlockChain_class, "lastid", _wrap_BlockChain_lastid_get, _wrap_BlockChain_lastid_set);
SWIGV8_AddMemberVariable(_exports_BlockChain_class, "cached_txtos", _wrap_BlockChain_cached_txtos_get, _wrap_BlockChain_cached_txtos_set);
SWIGV8_AddMemberFunction(_exports_BlockChain_class, "nextid", _wrap_BlockChain_nextid);
SWIGV8_AddMemberFunction(_exports_BlockChain_class, "is_utxo", _wrap_BlockChain_is_utxo);
SWIGV8_AddMemberFunction(_exports_BlockChain_class, "get_utxos", _wrap_BlockChain_get_utxos);
SWIGV8_AddMemberFunction(_exports_BlockChain_class, "add_transaction", _wrap_BlockChain__wrap_BlockChain_add_transaction);
SWIGV8_AddMemberFunction(_exports_BlockChain_class, "valid", _wrap_BlockChain_valid);
SWIGV8_AddMemberFunction(_exports_BlockChain_class, "balance", _wrap_BlockChain_balance);
SWIGV8_AddMemberFunction(_exports_Deal_class, "price", _wrap_Deal_price);
SWIGV8_AddMemberFunction(_exports_Deal_class, "current_price", _wrap_Deal_current_price);
SWIGV8_AddMemberFunction(_exports_Deal_class, "buy_value", _wrap_Deal_buy_value);
SWIGV8_AddMemberFunction(_exports_Deal_class, "comm_buy", _wrap_Deal_comm_buy);
SWIGV8_AddMemberFunction(_exports_Deal_class, "adquisition", _wrap_Deal_adquisition);
SWIGV8_AddMemberFunction(_exports_Deal_class, "sold_value", _wrap_Deal_sold_value);
SWIGV8_AddMemberFunction(_exports_Deal_class, "comm_sell", _wrap_Deal_comm_sell);
SWIGV8_AddMemberFunction(_exports_Deal_class, "transmision", _wrap_Deal_transmision);
SWIGV8_AddMemberFunction(_exports_Deal_class, "gross_profit", _wrap_Deal_gross_profit);
SWIGV8_AddMemberFunction(_exports_Deal_class, "net_profit", _wrap_Deal_net_profit);
SWIGV8_AddMemberFunction(_exports_Deal_class, "gross_performance", _wrap_Deal_gross_performance);
SWIGV8_AddMemberFunction(_exports_Deal_class, "net_performance", _wrap_Deal_net_performance);
SWIGV8_AddMemberVariable(_exports_OpenDeal_class, "buy_tx", _wrap_OpenDeal_buy_tx_get, _wrap_OpenDeal_buy_tx_set);
SWIGV8_AddMemberFunction(_exports_OpenDeal_class, "price", _wrap_OpenDeal_price);
SWIGV8_AddMemberFunction(_exports_OpenDeal_class, "current_price", _wrap_OpenDeal_current_price);
SWIGV8_AddMemberFunction(_exports_OpenDeal_class, "buy_value", _wrap_OpenDeal_buy_value);
SWIGV8_AddMemberFunction(_exports_OpenDeal_class, "comm_buy", _wrap_OpenDeal_comm_buy);
SWIGV8_AddMemberFunction(_exports_OpenDeal_class, "adquisition", _wrap_OpenDeal_adquisition);
SWIGV8_AddMemberFunction(_exports_OpenDeal_class, "sold_value", _wrap_OpenDeal_sold_value);
SWIGV8_AddMemberFunction(_exports_OpenDeal_class, "comm_sell", _wrap_OpenDeal_comm_sell);
SWIGV8_AddMemberFunction(_exports_OpenDeal_class, "transmision", _wrap_OpenDeal_transmision);
SWIGV8_AddMemberFunction(_exports_OpenDeal_class, "gross_profit", _wrap_OpenDeal_gross_profit);
SWIGV8_AddMemberFunction(_exports_OpenDeal_class, "net_profit", _wrap_OpenDeal_net_profit);
SWIGV8_AddMemberFunction(_exports_OpenDeal_class, "gross_performance", _wrap_OpenDeal_gross_performance);
SWIGV8_AddMemberFunction(_exports_OpenDeal_class, "net_performance", _wrap_OpenDeal_net_performance);
SWIGV8_AddMemberVariable(_exports_ClosedDeal_class, "open_deal", _wrap_ClosedDeal_open_deal_get, _wrap_ClosedDeal_open_deal_set);
SWIGV8_AddMemberVariable(_exports_ClosedDeal_class, "sell_tx", _wrap_ClosedDeal_sell_tx_get, _wrap_ClosedDeal_sell_tx_set);
SWIGV8_AddMemberFunction(_exports_ClosedDeal_class, "price", _wrap_ClosedDeal_price);
SWIGV8_AddMemberFunction(_exports_ClosedDeal_class, "current_price", _wrap_ClosedDeal_current_price);
SWIGV8_AddMemberFunction(_exports_ClosedDeal_class, "buy_value", _wrap_ClosedDeal_buy_value);
SWIGV8_AddMemberFunction(_exports_ClosedDeal_class, "comm_buy", _wrap_ClosedDeal_comm_buy);
SWIGV8_AddMemberFunction(_exports_ClosedDeal_class, "adquisition", _wrap_ClosedDeal_adquisition);
SWIGV8_AddMemberFunction(_exports_ClosedDeal_class, "sold_value", _wrap_ClosedDeal_sold_value);
SWIGV8_AddMemberFunction(_exports_ClosedDeal_class, "comm_sell", _wrap_ClosedDeal_comm_sell);
SWIGV8_AddMemberFunction(_exports_ClosedDeal_class, "transmision", _wrap_ClosedDeal_transmision);
SWIGV8_AddMemberFunction(_exports_ClosedDeal_class, "gross_profit", _wrap_ClosedDeal_gross_profit);
SWIGV8_AddMemberFunction(_exports_ClosedDeal_class, "net_profit", _wrap_ClosedDeal_net_profit);
SWIGV8_AddMemberFunction(_exports_ClosedDeal_class, "gross_performance", _wrap_ClosedDeal_gross_performance);
SWIGV8_AddMemberFunction(_exports_ClosedDeal_class, "net_performance", _wrap_ClosedDeal_net_performance);
SWIGV8_AddMemberVariable(_exports_SymbolInfoTick_class, "ask", _wrap_SymbolInfoTick_ask_get, _wrap_SymbolInfoTick_ask_set);
SWIGV8_AddMemberVariable(_exports_SymbolInfoTick_class, "bid", _wrap_SymbolInfoTick_bid_get, _wrap_SymbolInfoTick_bid_set);
SWIGV8_AddMemberFunction(_exports_Simulator_class, "append_path", _wrap_Simulator_append_path);
SWIGV8_AddMemberFunction(_exports_Simulator_class, "update", _wrap_Simulator_update);
SWIGV8_AddMemberFunction(_exports_Simulator_class, "get_results", _wrap_Simulator_get_results);


  /* setup inheritances */
  if (SWIGTYPE_p_qs__ForwardPeriod->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_qs__ForwardPeriod->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_ZeroPeriod_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_qs__ForwardPeriod->clientdata)->class_templ);
#else
  _exports_ZeroPeriod_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_qs__ForwardPeriod->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_ZeroPeriod _qs__ForwardPeriod\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_ZeroPeriod _qs__ForwardPeriod\n");
#endif
}
if (SWIGTYPE_p_qs__CashFlow->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_qs__CashFlow->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_CouponCashFlow_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_qs__CashFlow->clientdata)->class_templ);
#else
  _exports_CouponCashFlow_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_qs__CashFlow->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_CouponCashFlow _qs__CashFlow\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_CouponCashFlow _qs__CashFlow\n");
#endif
}
if (SWIGTYPE_p_qs__CashFlow->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_qs__CashFlow->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_StartCashFlow_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_qs__CashFlow->clientdata)->class_templ);
#else
  _exports_StartCashFlow_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_qs__CashFlow->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_StartCashFlow _qs__CashFlow\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_StartCashFlow _qs__CashFlow\n");
#endif
}
if (SWIGTYPE_p_qs__CashFlow->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_qs__CashFlow->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_EndCashFlow_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_qs__CashFlow->clientdata)->class_templ);
#else
  _exports_EndCashFlow_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_qs__CashFlow->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_EndCashFlow _qs__CashFlow\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_EndCashFlow _qs__CashFlow\n");
#endif
}
if (SWIGTYPE_p_qs__CashFlow->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_qs__CashFlow->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_CustomCashFlow_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_qs__CashFlow->clientdata)->class_templ);
#else
  _exports_CustomCashFlow_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_qs__CashFlow->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_CustomCashFlow _qs__CashFlow\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_CustomCashFlow _qs__CashFlow\n");
#endif
}
if (SWIGTYPE_p_pf__Deal->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_pf__Deal->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_OpenDeal_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_pf__Deal->clientdata)->class_templ);
#else
  _exports_OpenDeal_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_pf__Deal->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_OpenDeal _pf__Deal\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_OpenDeal _pf__Deal\n");
#endif
}
if (SWIGTYPE_p_pf__Deal->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_pf__Deal->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_ClosedDeal_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_pf__Deal->clientdata)->class_templ);
#else
  _exports_ClosedDeal_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_pf__Deal->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_ClosedDeal _pf__Deal\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_ClosedDeal _pf__Deal\n");
#endif
}


  /* class instances */
  /* Class: vectors (_exports_vectors) */
v8::Handle<v8::FunctionTemplate> _exports_vectors_class_0 = SWIGV8_CreateClassTemplate("vectors");
_exports_vectors_class_0->SetCallHandler(_wrap_new_vectors);
_exports_vectors_class_0->Inherit(_exports_vectors_class);
_exports_vectors_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_vectors_obj = _exports_vectors_class_0->GetFunction();
/* Class: vectorn (_exports_vectorn) */
v8::Handle<v8::FunctionTemplate> _exports_vectorn_class_0 = SWIGV8_CreateClassTemplate("vectorn");
_exports_vectorn_class_0->SetCallHandler(_wrap_new_vectorn);
_exports_vectorn_class_0->Inherit(_exports_vectorn_class);
_exports_vectorn_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_vectorn_obj = _exports_vectorn_class_0->GetFunction();
/* Class: vectord (_exports_vectord) */
v8::Handle<v8::FunctionTemplate> _exports_vectord_class_0 = SWIGV8_CreateClassTemplate("vectord");
_exports_vectord_class_0->SetCallHandler(_wrap_new_vectord);
_exports_vectord_class_0->Inherit(_exports_vectord_class);
_exports_vectord_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_vectord_obj = _exports_vectord_class_0->GetFunction();
/* Class: vectorl (_exports_vectorl) */
v8::Handle<v8::FunctionTemplate> _exports_vectorl_class_0 = SWIGV8_CreateClassTemplate("vectorl");
_exports_vectorl_class_0->SetCallHandler(_wrap_new_vectorl);
_exports_vectorl_class_0->Inherit(_exports_vectorl_class);
_exports_vectorl_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_vectorl_obj = _exports_vectorl_class_0->GetFunction();
/* Class: vectorser (_exports_vectorser) */
v8::Handle<v8::FunctionTemplate> _exports_vectorser_class_0 = SWIGV8_CreateClassTemplate("vectorser");
_exports_vectorser_class_0->SetCallHandler(_wrap_new_vectorser);
_exports_vectorser_class_0->Inherit(_exports_vectorser_class);
_exports_vectorser_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_vectorser_obj = _exports_vectorser_class_0->GetFunction();
/* Class: vectorm (_exports_vectorm) */
v8::Handle<v8::FunctionTemplate> _exports_vectorm_class_0 = SWIGV8_CreateClassTemplate("vectorm");
_exports_vectorm_class_0->SetCallHandler(_wrap_new_vectorm);
_exports_vectorm_class_0->Inherit(_exports_vectorm_class);
_exports_vectorm_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_vectorm_obj = _exports_vectorm_class_0->GetFunction();
/* Class: vector_results (_exports_vector_results) */
v8::Handle<v8::FunctionTemplate> _exports_vector_results_class_0 = SWIGV8_CreateClassTemplate("vector_results");
_exports_vector_results_class_0->SetCallHandler(_wrap_new_vector_results);
_exports_vector_results_class_0->Inherit(_exports_vector_results_class);
_exports_vector_results_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_vector_results_obj = _exports_vector_results_class_0->GetFunction();
/* Class: NoneType (_exports_NoneType) */
v8::Handle<v8::FunctionTemplate> _exports_NoneType_class_0 = SWIGV8_CreateClassTemplate("NoneType");
_exports_NoneType_class_0->SetCallHandler(_wrap_new_NoneType);
_exports_NoneType_class_0->Inherit(_exports_NoneType_class);
_exports_NoneType_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_NoneType_obj = _exports_NoneType_class_0->GetFunction();
/* Class: Serie (_exports_Serie) */
v8::Handle<v8::FunctionTemplate> _exports_Serie_class_0 = SWIGV8_CreateClassTemplate("Serie");
_exports_Serie_class_0->SetCallHandler(_wrap_new_Serie);
_exports_Serie_class_0->Inherit(_exports_Serie_class);
_exports_Serie_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Serie_obj = _exports_Serie_class_0->GetFunction();
/* Class: Serie2d (_exports_Serie2d) */
v8::Handle<v8::FunctionTemplate> _exports_Serie2d_class_0 = SWIGV8_CreateClassTemplate("Serie2d");
_exports_Serie2d_class_0->SetCallHandler(_wrap_new_Serie2d);
_exports_Serie2d_class_0->Inherit(_exports_Serie2d_class);
_exports_Serie2d_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Serie2d_obj = _exports_Serie2d_class_0->GetFunction();
/* Class: Maturity (_exports_Maturity) */
v8::Handle<v8::FunctionTemplate> _exports_Maturity_class_0 = SWIGV8_CreateClassTemplate("Maturity");
_exports_Maturity_class_0->SetCallHandler(_wrap_new_Maturity);
_exports_Maturity_class_0->Inherit(_exports_Maturity_class);
_exports_Maturity_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Maturity_obj = _exports_Maturity_class_0->GetFunction();
/* Class: ForwardPeriod (_exports_ForwardPeriod) */
v8::Handle<v8::FunctionTemplate> _exports_ForwardPeriod_class_0 = SWIGV8_CreateClassTemplate("ForwardPeriod");
_exports_ForwardPeriod_class_0->SetCallHandler(_wrap_new_ForwardPeriod);
_exports_ForwardPeriod_class_0->Inherit(_exports_ForwardPeriod_class);
_exports_ForwardPeriod_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ForwardPeriod_obj = _exports_ForwardPeriod_class_0->GetFunction();
/* Class: ZeroPeriod (_exports_ZeroPeriod) */
v8::Handle<v8::FunctionTemplate> _exports_ZeroPeriod_class_0 = SWIGV8_CreateClassTemplate("ZeroPeriod");
_exports_ZeroPeriod_class_0->SetCallHandler(_wrap_new_ZeroPeriod);
_exports_ZeroPeriod_class_0->Inherit(_exports_ZeroPeriod_class);
_exports_ZeroPeriod_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ZeroPeriod_obj = _exports_ZeroPeriod_class_0->GetFunction();
/* Class: Calendar (_exports_Calendar) */
v8::Handle<v8::FunctionTemplate> _exports_Calendar_class_0 = SWIGV8_CreateClassTemplate("Calendar");
_exports_Calendar_class_0->SetCallHandler(_wrap_new_Calendar);
_exports_Calendar_class_0->Inherit(_exports_Calendar_class);
_exports_Calendar_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Calendar_obj = _exports_Calendar_class_0->GetFunction();
/* Class: Schedule (_exports_Schedule) */
v8::Handle<v8::FunctionTemplate> _exports_Schedule_class_0 = SWIGV8_CreateClassTemplate("Schedule");
_exports_Schedule_class_0->SetCallHandler(_wrap_new_Schedule);
_exports_Schedule_class_0->Inherit(_exports_Schedule_class);
_exports_Schedule_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Schedule_obj = _exports_Schedule_class_0->GetFunction();
/* Class: DiscountFactor (_exports_DiscountFactor) */
v8::Handle<v8::FunctionTemplate> _exports_DiscountFactor_class_0 = SWIGV8_CreateClassTemplate("DiscountFactor");
_exports_DiscountFactor_class_0->SetCallHandler(_wrap_new_DiscountFactor);
_exports_DiscountFactor_class_0->Inherit(_exports_DiscountFactor_class);
_exports_DiscountFactor_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_DiscountFactor_obj = _exports_DiscountFactor_class_0->GetFunction();
/* Class: InterestRate (_exports_InterestRate) */
v8::Handle<v8::FunctionTemplate> _exports_InterestRate_class_0 = SWIGV8_CreateClassTemplate("InterestRate");
_exports_InterestRate_class_0->SetCallHandler(_wrap_new_InterestRate);
_exports_InterestRate_class_0->Inherit(_exports_InterestRate_class);
_exports_InterestRate_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_InterestRate_obj = _exports_InterestRate_class_0->GetFunction();
/* Class: LegGenerator (_exports_LegGenerator) */
v8::Handle<v8::FunctionTemplate> _exports_LegGenerator_class_0 = SWIGV8_CreateClassTemplate("LegGenerator");
_exports_LegGenerator_class_0->SetCallHandler(_wrap_new_LegGenerator);
_exports_LegGenerator_class_0->Inherit(_exports_LegGenerator_class);
_exports_LegGenerator_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_LegGenerator_obj = _exports_LegGenerator_class_0->GetFunction();
/* Class: ProductGenerator (_exports_ProductGenerator) */
v8::Handle<v8::FunctionTemplate> _exports_ProductGenerator_class_0 = SWIGV8_CreateClassTemplate("ProductGenerator");
_exports_ProductGenerator_class_0->SetCallHandler(_wrap_new_ProductGenerator);
_exports_ProductGenerator_class_0->Inherit(_exports_ProductGenerator_class);
_exports_ProductGenerator_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ProductGenerator_obj = _exports_ProductGenerator_class_0->GetFunction();
/* Class: Leg (_exports_Leg) */
v8::Handle<v8::FunctionTemplate> _exports_Leg_class_0 = SWIGV8_CreateClassTemplate("Leg");
_exports_Leg_class_0->SetCallHandler(_wrap_new_Leg);
_exports_Leg_class_0->Inherit(_exports_Leg_class);
_exports_Leg_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Leg_obj = _exports_Leg_class_0->GetFunction();
/* Class: Product (_exports_Product) */
v8::Handle<v8::FunctionTemplate> _exports_Product_class_0 = SWIGV8_CreateClassTemplate("Product");
_exports_Product_class_0->SetCallHandler(_wrap_new_Product);
_exports_Product_class_0->Inherit(_exports_Product_class);
_exports_Product_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Product_obj = _exports_Product_class_0->GetFunction();
/* Class: TermStructure (_exports_TermStructure) */
v8::Handle<v8::FunctionTemplate> _exports_TermStructure_class_0 = SWIGV8_CreateClassTemplate("TermStructure");
_exports_TermStructure_class_0->SetCallHandler(_wrap_new_TermStructure);
_exports_TermStructure_class_0->Inherit(_exports_TermStructure_class);
_exports_TermStructure_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TermStructure_obj = _exports_TermStructure_class_0->GetFunction();
/* Class: CashFlow (_exports_CashFlow) */
v8::Handle<v8::FunctionTemplate> _exports_CashFlow_class_0 = SWIGV8_CreateClassTemplate("CashFlow");
_exports_CashFlow_class_0->SetCallHandler(_wrap_new_veto_CashFlow);
_exports_CashFlow_class_0->Inherit(_exports_CashFlow_class);
_exports_CashFlow_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_CashFlow_obj = _exports_CashFlow_class_0->GetFunction();
/* Class: CouponCashFlow (_exports_CouponCashFlow) */
v8::Handle<v8::FunctionTemplate> _exports_CouponCashFlow_class_0 = SWIGV8_CreateClassTemplate("CouponCashFlow");
_exports_CouponCashFlow_class_0->SetCallHandler(_wrap_new_CouponCashFlow);
_exports_CouponCashFlow_class_0->Inherit(_exports_CouponCashFlow_class);
_exports_CouponCashFlow_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_CouponCashFlow_obj = _exports_CouponCashFlow_class_0->GetFunction();
/* Class: StartCashFlow (_exports_StartCashFlow) */
v8::Handle<v8::FunctionTemplate> _exports_StartCashFlow_class_0 = SWIGV8_CreateClassTemplate("StartCashFlow");
_exports_StartCashFlow_class_0->SetCallHandler(_wrap_new_StartCashFlow);
_exports_StartCashFlow_class_0->Inherit(_exports_StartCashFlow_class);
_exports_StartCashFlow_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_StartCashFlow_obj = _exports_StartCashFlow_class_0->GetFunction();
/* Class: EndCashFlow (_exports_EndCashFlow) */
v8::Handle<v8::FunctionTemplate> _exports_EndCashFlow_class_0 = SWIGV8_CreateClassTemplate("EndCashFlow");
_exports_EndCashFlow_class_0->SetCallHandler(_wrap_new_EndCashFlow);
_exports_EndCashFlow_class_0->Inherit(_exports_EndCashFlow_class);
_exports_EndCashFlow_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_EndCashFlow_obj = _exports_EndCashFlow_class_0->GetFunction();
/* Class: CustomCashFlow (_exports_CustomCashFlow) */
v8::Handle<v8::FunctionTemplate> _exports_CustomCashFlow_class_0 = SWIGV8_CreateClassTemplate("CustomCashFlow");
_exports_CustomCashFlow_class_0->SetCallHandler(_wrap_new_CustomCashFlow);
_exports_CustomCashFlow_class_0->Inherit(_exports_CustomCashFlow_class);
_exports_CustomCashFlow_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_CustomCashFlow_obj = _exports_CustomCashFlow_class_0->GetFunction();
/* Class: TxFrom (_exports_TxFrom) */
v8::Handle<v8::FunctionTemplate> _exports_TxFrom_class_0 = SWIGV8_CreateClassTemplate("TxFrom");
_exports_TxFrom_class_0->SetCallHandler(_wrap_new_TxFrom);
_exports_TxFrom_class_0->Inherit(_exports_TxFrom_class);
_exports_TxFrom_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TxFrom_obj = _exports_TxFrom_class_0->GetFunction();
/* Class: TxTo (_exports_TxTo) */
v8::Handle<v8::FunctionTemplate> _exports_TxTo_class_0 = SWIGV8_CreateClassTemplate("TxTo");
_exports_TxTo_class_0->SetCallHandler(_wrap_new_TxTo);
_exports_TxTo_class_0->Inherit(_exports_TxTo_class);
_exports_TxTo_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_TxTo_obj = _exports_TxTo_class_0->GetFunction();
/* Class: amount_info (_exports_amount_info) */
v8::Handle<v8::FunctionTemplate> _exports_amount_info_class_0 = SWIGV8_CreateClassTemplate("amount_info");
_exports_amount_info_class_0->SetCallHandler(_wrap_new_amount_info);
_exports_amount_info_class_0->Inherit(_exports_amount_info_class);
_exports_amount_info_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_amount_info_obj = _exports_amount_info_class_0->GetFunction();
/* Class: Transaction (_exports_Transaction) */
v8::Handle<v8::FunctionTemplate> _exports_Transaction_class_0 = SWIGV8_CreateClassTemplate("Transaction");
_exports_Transaction_class_0->SetCallHandler(_wrap_new_Transaction);
_exports_Transaction_class_0->Inherit(_exports_Transaction_class);
_exports_Transaction_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Transaction_obj = _exports_Transaction_class_0->GetFunction();
/* Class: tuple_hash (_exports_tuple_hash) */
v8::Handle<v8::FunctionTemplate> _exports_tuple_hash_class_0 = SWIGV8_CreateClassTemplate("tuple_hash");
_exports_tuple_hash_class_0->SetCallHandler(_wrap_new_tuple_hash);
_exports_tuple_hash_class_0->Inherit(_exports_tuple_hash_class);
_exports_tuple_hash_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_tuple_hash_obj = _exports_tuple_hash_class_0->GetFunction();
/* Class: BlockChain (_exports_BlockChain) */
v8::Handle<v8::FunctionTemplate> _exports_BlockChain_class_0 = SWIGV8_CreateClassTemplate("BlockChain");
_exports_BlockChain_class_0->SetCallHandler(_wrap_new_BlockChain);
_exports_BlockChain_class_0->Inherit(_exports_BlockChain_class);
_exports_BlockChain_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_BlockChain_obj = _exports_BlockChain_class_0->GetFunction();
/* Class: Deal (_exports_Deal) */
v8::Handle<v8::FunctionTemplate> _exports_Deal_class_0 = SWIGV8_CreateClassTemplate("Deal");
_exports_Deal_class_0->SetCallHandler(_wrap_new_veto_Deal);
_exports_Deal_class_0->Inherit(_exports_Deal_class);
_exports_Deal_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Deal_obj = _exports_Deal_class_0->GetFunction();
/* Class: OpenDeal (_exports_OpenDeal) */
v8::Handle<v8::FunctionTemplate> _exports_OpenDeal_class_0 = SWIGV8_CreateClassTemplate("OpenDeal");
_exports_OpenDeal_class_0->SetCallHandler(_wrap_new_OpenDeal);
_exports_OpenDeal_class_0->Inherit(_exports_OpenDeal_class);
_exports_OpenDeal_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_OpenDeal_obj = _exports_OpenDeal_class_0->GetFunction();
/* Class: ClosedDeal (_exports_ClosedDeal) */
v8::Handle<v8::FunctionTemplate> _exports_ClosedDeal_class_0 = SWIGV8_CreateClassTemplate("ClosedDeal");
_exports_ClosedDeal_class_0->SetCallHandler(_wrap_new_ClosedDeal);
_exports_ClosedDeal_class_0->Inherit(_exports_ClosedDeal_class);
_exports_ClosedDeal_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_ClosedDeal_obj = _exports_ClosedDeal_class_0->GetFunction();
/* Class: SymbolInfoTick (_exports_SymbolInfoTick) */
v8::Handle<v8::FunctionTemplate> _exports_SymbolInfoTick_class_0 = SWIGV8_CreateClassTemplate("SymbolInfoTick");
_exports_SymbolInfoTick_class_0->SetCallHandler(_wrap_new_SymbolInfoTick);
_exports_SymbolInfoTick_class_0->Inherit(_exports_SymbolInfoTick_class);
_exports_SymbolInfoTick_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_SymbolInfoTick_obj = _exports_SymbolInfoTick_class_0->GetFunction();
/* Class: FakeTrader (_exports_FakeTrader) */
v8::Handle<v8::FunctionTemplate> _exports_FakeTrader_class_0 = SWIGV8_CreateClassTemplate("FakeTrader");
_exports_FakeTrader_class_0->SetCallHandler(_wrap_new_FakeTrader);
_exports_FakeTrader_class_0->Inherit(_exports_FakeTrader_class);
_exports_FakeTrader_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_FakeTrader_obj = _exports_FakeTrader_class_0->GetFunction();
/* Class: Simulator (_exports_Simulator) */
v8::Handle<v8::FunctionTemplate> _exports_Simulator_class_0 = SWIGV8_CreateClassTemplate("Simulator");
_exports_Simulator_class_0->SetCallHandler(_wrap_new_Simulator);
_exports_Simulator_class_0->Inherit(_exports_Simulator_class);
_exports_Simulator_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Simulator_obj = _exports_Simulator_class_0->GetFunction();


  /* add static class functions and variables */
  SWIGV8_AddStaticFunction(exports_obj, "any_less", _wrap_rp__wrap_any_less);
SWIGV8_AddStaticFunction(exports_obj, "all_less", _wrap_rp__wrap_all_less);
SWIGV8_AddStaticFunction(exports_obj, "any_isfinite", _wrap_rp__wrap_any_isfinite);
SWIGV8_AddStaticFunction(exports_obj, "all_isfinite", _wrap_rp__wrap_all_isfinite);
SWIGV8_AddStaticFunction(exports_obj, "div2", _wrap_rp__wrap_div2);
SWIGV8_AddStaticFunction(exports_obj, "mul2", _wrap_mul2);
SWIGV8_AddStaticFunction(exports_obj, "mul2ref", _wrap_mul2ref);
SWIGV8_AddStaticFunction(exports_obj, "sub2", _wrap_sub2);
SWIGV8_AddStaticFunction(exports_obj, "sub2ref", _wrap_sub2ref);
SWIGV8_AddStaticFunction(exports_obj, "sum2", _wrap_sum2);
SWIGV8_AddStaticFunction(exports_obj, "sum2ref", _wrap_sum2ref);
SWIGV8_AddStaticFunction(exports_obj, "array", _wrap_rp__wrap_array);
SWIGV8_AddStaticFunction(exports_obj, "agg", _wrap_agg);
SWIGV8_AddStaticFunction(exports_obj, "agg_transpose", _wrap_agg_transpose);
SWIGV8_AddStaticFunction(exports_obj, "mapapply", _wrap_mapapply);
SWIGV8_AddStaticFunction(exports_obj, "mapcalculate", _wrap_mapcalculate);
SWIGV8_AddStaticFunction(exports_obj, "sum", _wrap_sum);
SWIGV8_AddStaticFunction(exports_obj, "sum_transpose", _wrap_sum_transpose);
SWIGV8_AddStaticFunction(exports_obj, "mul", _wrap_mul);
SWIGV8_AddStaticFunction(exports_obj, "mul_transpose", _wrap_mul_transpose);
SWIGV8_AddStaticFunction(exports_obj, "mean", _wrap_rp__wrap_mean);
SWIGV8_AddStaticFunction(exports_obj, "mean_transpose", _wrap_rp__wrap_mean_transpose);
SWIGV8_AddStaticFunction(exports_obj, "max", _wrap_max);
SWIGV8_AddStaticFunction(exports_obj, "max_transpose", _wrap_max_transpose);
SWIGV8_AddStaticFunction(exports_obj, "min", _wrap_min);
SWIGV8_AddStaticFunction(exports_obj, "min_transpose", _wrap_min_transpose);
SWIGV8_AddStaticFunction(exports_obj, "_var", _wrap_rp__wrap__var);
SWIGV8_AddStaticFunction(exports_obj, "var_transpose", _wrap_rp__wrap_var_transpose);
SWIGV8_AddStaticFunction(exports_obj, "std", _wrap_rp__wrap_std);
SWIGV8_AddStaticFunction(exports_obj, "std_transpose", _wrap_rp__wrap_std_transpose);
SWIGV8_AddStaticFunction(exports_obj, "window", _wrap_rp__wrap_window);
SWIGV8_AddStaticFunction(exports_obj, "transpose", _wrap_rp__wrap_transpose);
SWIGV8_AddStaticFunction(exports_obj, "get_size", _wrap_get_size);
SWIGV8_AddStaticFunction(exports_obj, "print", _wrap_rp__wrap_print);
SWIGV8_AddStaticFunction(exports_obj, "norm_nans", _wrap_norm_nans);
SWIGV8_AddStaticFunction(exports_obj, "norm_fill", _wrap_rp__wrap_norm_fill);
SWIGV8_AddStaticFunction(exports_obj, "norm_drop", _wrap_norm_drop);
SWIGV8_AddStaticFunction(exports_obj, "use_callback", _wrap_use_callback);
SWIGV8_AddStaticFunction(exports_obj, "custommain", _wrap_custommain);
SWIGV8_AddStaticFunction(exports_obj, "exp", _wrap_rp__wrap_exp);
SWIGV8_AddStaticFunction(exports_obj, "log", _wrap_rp__wrap_log);
SWIGV8_AddStaticFunction(exports_obj, "pow", _wrap_pow);
SWIGV8_AddStaticFunction(exports_obj, "powref", _wrap_powref);
SWIGV8_AddStaticFunction(exports_obj, "sqrt", _wrap_sqrt);
SWIGV8_AddStaticFunction(exports_obj, "sqrtref", _wrap_sqrtref);
SWIGV8_AddStaticFunction(exports_obj, "erf", _wrap_rp__wrap_erf);
SWIGV8_AddStaticFunction(exports_obj, "neg", _wrap_rp__wrap_neg);
SWIGV8_AddStaticFunction(exports_obj, "abs", _wrap_rp__wrap_abs);
SWIGV8_AddStaticFunction(exports_obj, "pdf", _wrap_rp__wrap_pdf);
SWIGV8_AddStaticFunction(exports_obj, "cdf", _wrap_rp__wrap_cdf);
SWIGV8_AddStaticFunction(exports_obj, "ppf", _wrap_rp__wrap_ppf);
SWIGV8_AddStaticFunction(exports_obj, "max0", _wrap_max0);
SWIGV8_AddStaticFunction(exports_obj, "max0ref", _wrap_max0ref);
SWIGV8_AddStaticFunction(exports_obj, "max2", _wrap_max2);
SWIGV8_AddStaticFunction(exports_obj, "max2ref", _wrap_max2ref);
SWIGV8_AddStaticFunction(exports_obj, "rsi", _wrap_rp__wrap_rsi);
SWIGV8_AddStaticFunction(exports_obj, "clean", _wrap_rp__wrap_clean);
SWIGV8_AddStaticFunction(exports_obj, "rand_normal", _wrap_rand_normal);
SWIGV8_AddStaticFunction(exports_obj, "year", _wrap_year);
SWIGV8_AddStaticFunction(exports_obj, "zero", _wrap_zero);
SWIGV8_AddStaticFunction(exports_obj, "one", _wrap_one);
SWIGV8_AddStaticFunction(exports_obj, "two", _wrap_two);
SWIGV8_AddStaticFunction(exports_obj, "onehundred", _wrap_onehundred);
SWIGV8_AddStaticFunction(exports_obj, "half", _wrap_half);
SWIGV8_AddStaticFunction(exports_obj, "pi", _wrap_pi);
SWIGV8_AddStaticFunction(exports_obj, "two_pi", _wrap_two_pi);
SWIGV8_AddStaticFunction(exports_obj, "constant", _wrap_constant);
SWIGV8_AddStaticFunction(exports_obj, "d1", _wrap_d1);
SWIGV8_AddStaticFunction(exports_obj, "d2", _wrap_d2);
SWIGV8_AddStaticFunction(exports_obj, "CallPrice", _wrap_rp__wrap_CallPrice);
SWIGV8_AddStaticFunction(exports_obj, "PutPrice", _wrap_rp__wrap_PutPrice);
SWIGV8_AddStaticFunction(exports_obj, "CallGreeksDelta", _wrap_CallGreeksDelta);
SWIGV8_AddStaticFunction(exports_obj, "CallGreeksGamma", _wrap_CallGreeksGamma);
SWIGV8_AddStaticFunction(exports_obj, "CallGreeksTheta", _wrap_CallGreeksTheta);
SWIGV8_AddStaticFunction(exports_obj, "CallGreeksVega", _wrap_CallGreeksVega);
SWIGV8_AddStaticFunction(exports_obj, "CallGreeksRho", _wrap_CallGreeksRho);
SWIGV8_AddStaticFunction(exports_obj, "PutGreeksDelta", _wrap_PutGreeksDelta);
SWIGV8_AddStaticFunction(exports_obj, "PutGreeksGamma", _wrap_PutGreeksGamma);
SWIGV8_AddStaticFunction(exports_obj, "PutGreeksTheta", _wrap_PutGreeksTheta);
SWIGV8_AddStaticFunction(exports_obj, "PutGreeksVega", _wrap_PutGreeksVega);
SWIGV8_AddStaticFunction(exports_obj, "PutGreeksRho", _wrap_PutGreeksRho);
SWIGV8_AddStaticFunction(exports_obj, "ImpliedVolatility", _wrap_rp__wrap_ImpliedVolatility);
SWIGV8_AddStaticFunction(exports_obj, "CallImpliedvolatility", _wrap_CallImpliedvolatility);
SWIGV8_AddStaticFunction(exports_obj, "PutImpliedvolatility", _wrap_PutImpliedvolatility);
SWIGV8_AddStaticFunction(exports_obj, "GreeksVolga", _wrap_GreeksVolga);
SWIGV8_AddStaticFunction(exports_obj, "discount2rate", _wrap_qs__wrap_discount2rate);
SWIGV8_AddStaticFunction(exports_obj, "rate2discount", _wrap_qs__wrap_rate2discount);
SWIGV8_AddStaticFunction(exports_obj, "equivalent_rate", _wrap_qs__wrap_equivalent_rate);
SWIGV8_AddStaticFunction(exports_obj, "maturity_to_zero", _wrap_maturity_to_zero);
SWIGV8_AddStaticFunction(exports_obj, "zero_to_maturity", _wrap_zero_to_maturity);
SWIGV8_AddStaticFunction(exports_obj, "maturity_to_maturity", _wrap_qs__wrap_maturity_to_maturity);
SWIGV8_AddStaticFunction(exports_obj, "to_present_value", _wrap_qs__wrap_to_present_value);
SWIGV8_AddStaticFunction(exports_obj, "to_future_value", _wrap_qs__wrap_to_future_value);
SWIGV8_AddStaticFunction(exports_obj, "npv_from_coupon", _wrap_npv_from_coupon);
SWIGV8_AddStaticFunction(exports_obj, "coupon_from_npv", _wrap_qs__wrap_coupon_from_npv);
SWIGV8_AddStaticFunction(exports_obj, "coupon_from_fv", _wrap_qs__wrap_coupon_from_fv);
SWIGV8_AddStaticFunction(exports_obj, "fv_from_coupon", _wrap_fv_from_coupon);
SWIGV8_AddStaticFunction(exports_obj, "npv_from_growth_coupon", _wrap_qs__wrap_npv_from_growth_coupon);
SWIGV8_AddStaticFunction(exports_obj, "fv_from_growth_coupon", _wrap_qs__wrap_fv_from_growth_coupon);
SWIGV8_AddStaticFunction(exports_obj, "coupon_from_growth_coupon", _wrap_qs__wrap_coupon_from_growth_coupon);
SWIGV8_AddStaticFunction(exports_obj, "compute_irr", _wrap_qs__wrap_compute_irr);
SWIGV8_AddStaticFunction(exports_obj, "classic_npv", _wrap_classic_npv);
SWIGV8_AddStaticFunction(exports_obj, "bond_npv", _wrap_qs__wrap_bond_npv);
SWIGV8_AddStaticFunction(exports_obj, "stock_npv", _wrap_stock_npv);
SWIGV8_AddStaticFunction(exports_obj, "inverse_lerp", _wrap_inverse_lerp);
SWIGV8_AddStaticFunction(exports_obj, "lerp", _wrap_lerp);
SWIGV8_AddStaticVariable(_exports_Maturity_obj, "ZERO", _wrap_Maturity_ZERO_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_Maturity_obj, "ONE", _wrap_Maturity_ONE_get, JS_veto_set_variable);
SWIGV8_AddStaticFunction(exports_obj, "on_capital", _wrap_qs__wrap_on_capital);
SWIGV8_AddStaticVariable(_exports_InterestRate_obj, "ZERO", _wrap_InterestRate_ZERO_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_FakeTrader_obj, "ORDER_TYPE_BUY", _wrap_pf_FakeTrader_ORDER_TYPE_BUY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_FakeTrader_obj, "ORDER_TYPE_SELL", _wrap_pf_FakeTrader_ORDER_TYPE_SELL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_Simulator_obj, "PRICE_VOLATILITY", _wrap_sim_Simulator_PRICE_VOLATILITY, JS_veto_set_variable);
SWIGV8_AddStaticVariable(_exports_Simulator_obj, "BACKTESTING", _wrap_sim_Simulator_BACKTESTING, JS_veto_set_variable);


  /* register classes */
  exports_obj->Set(SWIGV8_SYMBOL_NEW("vectors"), _exports_vectors_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("vectorn"), _exports_vectorn_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("vectord"), _exports_vectord_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("vectorl"), _exports_vectorl_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("vectorser"), _exports_vectorser_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("vectorm"), _exports_vectorm_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("vector_results"), _exports_vector_results_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("NoneType"), _exports_NoneType_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Serie"), _exports_Serie_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Serie2d"), _exports_Serie2d_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Maturity"), _exports_Maturity_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("ForwardPeriod"), _exports_ForwardPeriod_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("ZeroPeriod"), _exports_ZeroPeriod_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Calendar"), _exports_Calendar_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Schedule"), _exports_Schedule_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("DiscountFactor"), _exports_DiscountFactor_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("InterestRate"), _exports_InterestRate_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("LegGenerator"), _exports_LegGenerator_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("ProductGenerator"), _exports_ProductGenerator_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Leg"), _exports_Leg_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Product"), _exports_Product_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TermStructure"), _exports_TermStructure_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("CashFlow"), _exports_CashFlow_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("CouponCashFlow"), _exports_CouponCashFlow_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("StartCashFlow"), _exports_StartCashFlow_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("EndCashFlow"), _exports_EndCashFlow_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("CustomCashFlow"), _exports_CustomCashFlow_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TxFrom"), _exports_TxFrom_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("TxTo"), _exports_TxTo_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("amount_info"), _exports_amount_info_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Transaction"), _exports_Transaction_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("tuple_hash"), _exports_tuple_hash_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("BlockChain"), _exports_BlockChain_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Deal"), _exports_Deal_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("OpenDeal"), _exports_OpenDeal_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("ClosedDeal"), _exports_ClosedDeal_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("SymbolInfoTick"), _exports_SymbolInfoTick_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("FakeTrader"), _exports_FakeTrader_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Simulator"), _exports_Simulator_obj);


  /* create and register namespace objects */
  
}

#if defined(BUILDING_NODE_EXTENSION)
NODE_MODULE(red_pandas, red_pandas_initialize)
#endif
