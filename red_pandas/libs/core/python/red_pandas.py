# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _red_pandas
else:
    import _red_pandas

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _red_pandas.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _red_pandas.delete_SwigPyIterator

    def value(self):
        return _red_pandas.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _red_pandas.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _red_pandas.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _red_pandas.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _red_pandas.SwigPyIterator_equal(self, x)

    def copy(self):
        return _red_pandas.SwigPyIterator_copy(self)

    def next(self):
        return _red_pandas.SwigPyIterator_next(self)

    def __next__(self):
        return _red_pandas.SwigPyIterator___next__(self)

    def previous(self):
        return _red_pandas.SwigPyIterator_previous(self)

    def advance(self, n):
        return _red_pandas.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _red_pandas.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _red_pandas.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _red_pandas.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _red_pandas.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _red_pandas.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _red_pandas.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _red_pandas:
_red_pandas.SwigPyIterator_swigregister(SwigPyIterator)

class map_string_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _red_pandas.map_string_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _red_pandas.map_string_double___nonzero__(self)

    def __bool__(self):
        return _red_pandas.map_string_double___bool__(self)

    def __len__(self):
        return _red_pandas.map_string_double___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _red_pandas.map_string_double___getitem__(self, key)

    def __delitem__(self, key):
        return _red_pandas.map_string_double___delitem__(self, key)

    def has_key(self, key):
        return _red_pandas.map_string_double_has_key(self, key)

    def keys(self):
        return _red_pandas.map_string_double_keys(self)

    def values(self):
        return _red_pandas.map_string_double_values(self)

    def items(self):
        return _red_pandas.map_string_double_items(self)

    def __contains__(self, key):
        return _red_pandas.map_string_double___contains__(self, key)

    def key_iterator(self):
        return _red_pandas.map_string_double_key_iterator(self)

    def value_iterator(self):
        return _red_pandas.map_string_double_value_iterator(self)

    def __setitem__(self, *args):
        return _red_pandas.map_string_double___setitem__(self, *args)

    def asdict(self):
        return _red_pandas.map_string_double_asdict(self)

    def __init__(self, *args):
        _red_pandas.map_string_double_swiginit(self, _red_pandas.new_map_string_double(*args))

    def empty(self):
        return _red_pandas.map_string_double_empty(self)

    def size(self):
        return _red_pandas.map_string_double_size(self)

    def swap(self, v):
        return _red_pandas.map_string_double_swap(self, v)

    def begin(self):
        return _red_pandas.map_string_double_begin(self)

    def end(self):
        return _red_pandas.map_string_double_end(self)

    def clear(self):
        return _red_pandas.map_string_double_clear(self)

    def get_allocator(self):
        return _red_pandas.map_string_double_get_allocator(self)

    def count(self, x):
        return _red_pandas.map_string_double_count(self, x)

    def erase(self, *args):
        return _red_pandas.map_string_double_erase(self, *args)

    def find(self, x):
        return _red_pandas.map_string_double_find(self, x)
    __swig_destroy__ = _red_pandas.delete_map_string_double

# Register map_string_double in _red_pandas:
_red_pandas.map_string_double_swigregister(map_string_double)

class map_string_serie(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _red_pandas.map_string_serie_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _red_pandas.map_string_serie___nonzero__(self)

    def __bool__(self):
        return _red_pandas.map_string_serie___bool__(self)

    def __len__(self):
        return _red_pandas.map_string_serie___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _red_pandas.map_string_serie___getitem__(self, key)

    def __delitem__(self, key):
        return _red_pandas.map_string_serie___delitem__(self, key)

    def has_key(self, key):
        return _red_pandas.map_string_serie_has_key(self, key)

    def keys(self):
        return _red_pandas.map_string_serie_keys(self)

    def values(self):
        return _red_pandas.map_string_serie_values(self)

    def items(self):
        return _red_pandas.map_string_serie_items(self)

    def __contains__(self, key):
        return _red_pandas.map_string_serie___contains__(self, key)

    def key_iterator(self):
        return _red_pandas.map_string_serie_key_iterator(self)

    def value_iterator(self):
        return _red_pandas.map_string_serie_value_iterator(self)

    def __setitem__(self, *args):
        return _red_pandas.map_string_serie___setitem__(self, *args)

    def asdict(self):
        return _red_pandas.map_string_serie_asdict(self)

    def __init__(self, *args):
        _red_pandas.map_string_serie_swiginit(self, _red_pandas.new_map_string_serie(*args))

    def empty(self):
        return _red_pandas.map_string_serie_empty(self)

    def size(self):
        return _red_pandas.map_string_serie_size(self)

    def swap(self, v):
        return _red_pandas.map_string_serie_swap(self, v)

    def begin(self):
        return _red_pandas.map_string_serie_begin(self)

    def end(self):
        return _red_pandas.map_string_serie_end(self)

    def clear(self):
        return _red_pandas.map_string_serie_clear(self)

    def get_allocator(self):
        return _red_pandas.map_string_serie_get_allocator(self)

    def count(self, x):
        return _red_pandas.map_string_serie_count(self, x)

    def erase(self, *args):
        return _red_pandas.map_string_serie_erase(self, *args)

    def find(self, x):
        return _red_pandas.map_string_serie_find(self, x)
    __swig_destroy__ = _red_pandas.delete_map_string_serie

# Register map_string_serie in _red_pandas:
_red_pandas.map_string_serie_swigregister(map_string_serie)

class map_serie_serie(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _red_pandas.map_serie_serie_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _red_pandas.map_serie_serie___nonzero__(self)

    def __bool__(self):
        return _red_pandas.map_serie_serie___bool__(self)

    def __len__(self):
        return _red_pandas.map_serie_serie___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _red_pandas.map_serie_serie___getitem__(self, key)

    def __delitem__(self, key):
        return _red_pandas.map_serie_serie___delitem__(self, key)

    def has_key(self, key):
        return _red_pandas.map_serie_serie_has_key(self, key)

    def keys(self):
        return _red_pandas.map_serie_serie_keys(self)

    def values(self):
        return _red_pandas.map_serie_serie_values(self)

    def items(self):
        return _red_pandas.map_serie_serie_items(self)

    def __contains__(self, key):
        return _red_pandas.map_serie_serie___contains__(self, key)

    def key_iterator(self):
        return _red_pandas.map_serie_serie_key_iterator(self)

    def value_iterator(self):
        return _red_pandas.map_serie_serie_value_iterator(self)

    def __setitem__(self, *args):
        return _red_pandas.map_serie_serie___setitem__(self, *args)

    def asdict(self):
        return _red_pandas.map_serie_serie_asdict(self)

    def __init__(self, *args):
        _red_pandas.map_serie_serie_swiginit(self, _red_pandas.new_map_serie_serie(*args))

    def empty(self):
        return _red_pandas.map_serie_serie_empty(self)

    def size(self):
        return _red_pandas.map_serie_serie_size(self)

    def swap(self, v):
        return _red_pandas.map_serie_serie_swap(self, v)

    def begin(self):
        return _red_pandas.map_serie_serie_begin(self)

    def end(self):
        return _red_pandas.map_serie_serie_end(self)

    def clear(self):
        return _red_pandas.map_serie_serie_clear(self)

    def get_allocator(self):
        return _red_pandas.map_serie_serie_get_allocator(self)

    def count(self, x):
        return _red_pandas.map_serie_serie_count(self, x)

    def erase(self, *args):
        return _red_pandas.map_serie_serie_erase(self, *args)

    def find(self, x):
        return _red_pandas.map_serie_serie_find(self, x)
    __swig_destroy__ = _red_pandas.delete_map_serie_serie

# Register map_serie_serie in _red_pandas:
_red_pandas.map_serie_serie_swigregister(map_serie_serie)

class map_string_serie_ref(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _red_pandas.map_string_serie_ref_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _red_pandas.map_string_serie_ref___nonzero__(self)

    def __bool__(self):
        return _red_pandas.map_string_serie_ref___bool__(self)

    def __len__(self):
        return _red_pandas.map_string_serie_ref___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _red_pandas.map_string_serie_ref___getitem__(self, key)

    def __delitem__(self, key):
        return _red_pandas.map_string_serie_ref___delitem__(self, key)

    def has_key(self, key):
        return _red_pandas.map_string_serie_ref_has_key(self, key)

    def keys(self):
        return _red_pandas.map_string_serie_ref_keys(self)

    def values(self):
        return _red_pandas.map_string_serie_ref_values(self)

    def items(self):
        return _red_pandas.map_string_serie_ref_items(self)

    def __contains__(self, key):
        return _red_pandas.map_string_serie_ref___contains__(self, key)

    def key_iterator(self):
        return _red_pandas.map_string_serie_ref_key_iterator(self)

    def value_iterator(self):
        return _red_pandas.map_string_serie_ref_value_iterator(self)

    def __setitem__(self, *args):
        return _red_pandas.map_string_serie_ref___setitem__(self, *args)

    def asdict(self):
        return _red_pandas.map_string_serie_ref_asdict(self)

    def __init__(self, *args):
        _red_pandas.map_string_serie_ref_swiginit(self, _red_pandas.new_map_string_serie_ref(*args))

    def empty(self):
        return _red_pandas.map_string_serie_ref_empty(self)

    def size(self):
        return _red_pandas.map_string_serie_ref_size(self)

    def swap(self, v):
        return _red_pandas.map_string_serie_ref_swap(self, v)

    def begin(self):
        return _red_pandas.map_string_serie_ref_begin(self)

    def end(self):
        return _red_pandas.map_string_serie_ref_end(self)

    def clear(self):
        return _red_pandas.map_string_serie_ref_clear(self)

    def get_allocator(self):
        return _red_pandas.map_string_serie_ref_get_allocator(self)

    def count(self, x):
        return _red_pandas.map_string_serie_ref_count(self, x)

    def erase(self, *args):
        return _red_pandas.map_string_serie_ref_erase(self, *args)

    def find(self, x):
        return _red_pandas.map_string_serie_ref_find(self, x)
    __swig_destroy__ = _red_pandas.delete_map_string_serie_ref

# Register map_string_serie_ref in _red_pandas:
_red_pandas.map_string_serie_ref_swigregister(map_string_serie_ref)

class set_serie(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _red_pandas.set_serie_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _red_pandas.set_serie___nonzero__(self)

    def __bool__(self):
        return _red_pandas.set_serie___bool__(self)

    def __len__(self):
        return _red_pandas.set_serie___len__(self)

    def append(self, x):
        return _red_pandas.set_serie_append(self, x)

    def __contains__(self, x):
        return _red_pandas.set_serie___contains__(self, x)

    def __getitem__(self, i):
        return _red_pandas.set_serie___getitem__(self, i)

    def __init__(self, *args):
        _red_pandas.set_serie_swiginit(self, _red_pandas.new_set_serie(*args))

    def empty(self):
        return _red_pandas.set_serie_empty(self)

    def size(self):
        return _red_pandas.set_serie_size(self)

    def clear(self):
        return _red_pandas.set_serie_clear(self)

    def swap(self, v):
        return _red_pandas.set_serie_swap(self, v)

    def count(self, x):
        return _red_pandas.set_serie_count(self, x)

    def begin(self):
        return _red_pandas.set_serie_begin(self)

    def end(self):
        return _red_pandas.set_serie_end(self)

    def erase(self, *args):
        return _red_pandas.set_serie_erase(self, *args)

    def find(self, x):
        return _red_pandas.set_serie_find(self, x)

    def equal_range(self, x):
        return _red_pandas.set_serie_equal_range(self, x)

    def insert(self, __x):
        return _red_pandas.set_serie_insert(self, __x)
    __swig_destroy__ = _red_pandas.delete_set_serie

# Register set_serie in _red_pandas:
_red_pandas.set_serie_swigregister(set_serie)

class vectors(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _red_pandas.vectors_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _red_pandas.vectors___nonzero__(self)

    def __bool__(self):
        return _red_pandas.vectors___bool__(self)

    def __len__(self):
        return _red_pandas.vectors___len__(self)

    def __getslice__(self, i, j):
        return _red_pandas.vectors___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _red_pandas.vectors___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _red_pandas.vectors___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _red_pandas.vectors___delitem__(self, *args)

    def __getitem__(self, *args):
        return _red_pandas.vectors___getitem__(self, *args)

    def __setitem__(self, *args):
        return _red_pandas.vectors___setitem__(self, *args)

    def pop(self):
        return _red_pandas.vectors_pop(self)

    def append(self, x):
        return _red_pandas.vectors_append(self, x)

    def empty(self):
        return _red_pandas.vectors_empty(self)

    def size(self):
        return _red_pandas.vectors_size(self)

    def swap(self, v):
        return _red_pandas.vectors_swap(self, v)

    def begin(self):
        return _red_pandas.vectors_begin(self)

    def end(self):
        return _red_pandas.vectors_end(self)

    def rbegin(self):
        return _red_pandas.vectors_rbegin(self)

    def rend(self):
        return _red_pandas.vectors_rend(self)

    def clear(self):
        return _red_pandas.vectors_clear(self)

    def get_allocator(self):
        return _red_pandas.vectors_get_allocator(self)

    def pop_back(self):
        return _red_pandas.vectors_pop_back(self)

    def erase(self, *args):
        return _red_pandas.vectors_erase(self, *args)

    def __init__(self, *args):
        _red_pandas.vectors_swiginit(self, _red_pandas.new_vectors(*args))

    def push_back(self, x):
        return _red_pandas.vectors_push_back(self, x)

    def front(self):
        return _red_pandas.vectors_front(self)

    def back(self):
        return _red_pandas.vectors_back(self)

    def assign(self, n, x):
        return _red_pandas.vectors_assign(self, n, x)

    def resize(self, *args):
        return _red_pandas.vectors_resize(self, *args)

    def insert(self, *args):
        return _red_pandas.vectors_insert(self, *args)

    def reserve(self, n):
        return _red_pandas.vectors_reserve(self, n)

    def capacity(self):
        return _red_pandas.vectors_capacity(self)
    __swig_destroy__ = _red_pandas.delete_vectors

# Register vectors in _red_pandas:
_red_pandas.vectors_swigregister(vectors)

class vectorn(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _red_pandas.vectorn_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _red_pandas.vectorn___nonzero__(self)

    def __bool__(self):
        return _red_pandas.vectorn___bool__(self)

    def __len__(self):
        return _red_pandas.vectorn___len__(self)

    def __getslice__(self, i, j):
        return _red_pandas.vectorn___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _red_pandas.vectorn___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _red_pandas.vectorn___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _red_pandas.vectorn___delitem__(self, *args)

    def __getitem__(self, *args):
        return _red_pandas.vectorn___getitem__(self, *args)

    def __setitem__(self, *args):
        return _red_pandas.vectorn___setitem__(self, *args)

    def pop(self):
        return _red_pandas.vectorn_pop(self)

    def append(self, x):
        return _red_pandas.vectorn_append(self, x)

    def empty(self):
        return _red_pandas.vectorn_empty(self)

    def size(self):
        return _red_pandas.vectorn_size(self)

    def swap(self, v):
        return _red_pandas.vectorn_swap(self, v)

    def begin(self):
        return _red_pandas.vectorn_begin(self)

    def end(self):
        return _red_pandas.vectorn_end(self)

    def rbegin(self):
        return _red_pandas.vectorn_rbegin(self)

    def rend(self):
        return _red_pandas.vectorn_rend(self)

    def clear(self):
        return _red_pandas.vectorn_clear(self)

    def get_allocator(self):
        return _red_pandas.vectorn_get_allocator(self)

    def pop_back(self):
        return _red_pandas.vectorn_pop_back(self)

    def erase(self, *args):
        return _red_pandas.vectorn_erase(self, *args)

    def __init__(self, *args):
        _red_pandas.vectorn_swiginit(self, _red_pandas.new_vectorn(*args))

    def push_back(self, x):
        return _red_pandas.vectorn_push_back(self, x)

    def front(self):
        return _red_pandas.vectorn_front(self)

    def back(self):
        return _red_pandas.vectorn_back(self)

    def assign(self, n, x):
        return _red_pandas.vectorn_assign(self, n, x)

    def resize(self, *args):
        return _red_pandas.vectorn_resize(self, *args)

    def insert(self, *args):
        return _red_pandas.vectorn_insert(self, *args)

    def reserve(self, n):
        return _red_pandas.vectorn_reserve(self, n)

    def capacity(self):
        return _red_pandas.vectorn_capacity(self)
    __swig_destroy__ = _red_pandas.delete_vectorn

# Register vectorn in _red_pandas:
_red_pandas.vectorn_swigregister(vectorn)

class vectord(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _red_pandas.vectord_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _red_pandas.vectord___nonzero__(self)

    def __bool__(self):
        return _red_pandas.vectord___bool__(self)

    def __len__(self):
        return _red_pandas.vectord___len__(self)

    def __getslice__(self, i, j):
        return _red_pandas.vectord___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _red_pandas.vectord___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _red_pandas.vectord___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _red_pandas.vectord___delitem__(self, *args)

    def __getitem__(self, *args):
        return _red_pandas.vectord___getitem__(self, *args)

    def __setitem__(self, *args):
        return _red_pandas.vectord___setitem__(self, *args)

    def pop(self):
        return _red_pandas.vectord_pop(self)

    def append(self, x):
        return _red_pandas.vectord_append(self, x)

    def empty(self):
        return _red_pandas.vectord_empty(self)

    def size(self):
        return _red_pandas.vectord_size(self)

    def swap(self, v):
        return _red_pandas.vectord_swap(self, v)

    def begin(self):
        return _red_pandas.vectord_begin(self)

    def end(self):
        return _red_pandas.vectord_end(self)

    def rbegin(self):
        return _red_pandas.vectord_rbegin(self)

    def rend(self):
        return _red_pandas.vectord_rend(self)

    def clear(self):
        return _red_pandas.vectord_clear(self)

    def get_allocator(self):
        return _red_pandas.vectord_get_allocator(self)

    def pop_back(self):
        return _red_pandas.vectord_pop_back(self)

    def erase(self, *args):
        return _red_pandas.vectord_erase(self, *args)

    def __init__(self, *args):
        _red_pandas.vectord_swiginit(self, _red_pandas.new_vectord(*args))

    def push_back(self, x):
        return _red_pandas.vectord_push_back(self, x)

    def front(self):
        return _red_pandas.vectord_front(self)

    def back(self):
        return _red_pandas.vectord_back(self)

    def assign(self, n, x):
        return _red_pandas.vectord_assign(self, n, x)

    def resize(self, *args):
        return _red_pandas.vectord_resize(self, *args)

    def insert(self, *args):
        return _red_pandas.vectord_insert(self, *args)

    def reserve(self, n):
        return _red_pandas.vectord_reserve(self, n)

    def capacity(self):
        return _red_pandas.vectord_capacity(self)
    __swig_destroy__ = _red_pandas.delete_vectord

# Register vectord in _red_pandas:
_red_pandas.vectord_swigregister(vectord)

class vectorl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _red_pandas.vectorl_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _red_pandas.vectorl___nonzero__(self)

    def __bool__(self):
        return _red_pandas.vectorl___bool__(self)

    def __len__(self):
        return _red_pandas.vectorl___len__(self)

    def __getslice__(self, i, j):
        return _red_pandas.vectorl___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _red_pandas.vectorl___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _red_pandas.vectorl___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _red_pandas.vectorl___delitem__(self, *args)

    def __getitem__(self, *args):
        return _red_pandas.vectorl___getitem__(self, *args)

    def __setitem__(self, *args):
        return _red_pandas.vectorl___setitem__(self, *args)

    def pop(self):
        return _red_pandas.vectorl_pop(self)

    def append(self, x):
        return _red_pandas.vectorl_append(self, x)

    def empty(self):
        return _red_pandas.vectorl_empty(self)

    def size(self):
        return _red_pandas.vectorl_size(self)

    def swap(self, v):
        return _red_pandas.vectorl_swap(self, v)

    def begin(self):
        return _red_pandas.vectorl_begin(self)

    def end(self):
        return _red_pandas.vectorl_end(self)

    def rbegin(self):
        return _red_pandas.vectorl_rbegin(self)

    def rend(self):
        return _red_pandas.vectorl_rend(self)

    def clear(self):
        return _red_pandas.vectorl_clear(self)

    def get_allocator(self):
        return _red_pandas.vectorl_get_allocator(self)

    def pop_back(self):
        return _red_pandas.vectorl_pop_back(self)

    def erase(self, *args):
        return _red_pandas.vectorl_erase(self, *args)

    def __init__(self, *args):
        _red_pandas.vectorl_swiginit(self, _red_pandas.new_vectorl(*args))

    def push_back(self, x):
        return _red_pandas.vectorl_push_back(self, x)

    def front(self):
        return _red_pandas.vectorl_front(self)

    def back(self):
        return _red_pandas.vectorl_back(self)

    def assign(self, n, x):
        return _red_pandas.vectorl_assign(self, n, x)

    def resize(self, *args):
        return _red_pandas.vectorl_resize(self, *args)

    def insert(self, *args):
        return _red_pandas.vectorl_insert(self, *args)

    def reserve(self, n):
        return _red_pandas.vectorl_reserve(self, n)

    def capacity(self):
        return _red_pandas.vectorl_capacity(self)
    __swig_destroy__ = _red_pandas.delete_vectorl

# Register vectorl in _red_pandas:
_red_pandas.vectorl_swigregister(vectorl)

class vectorser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _red_pandas.vectorser_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _red_pandas.vectorser___nonzero__(self)

    def __bool__(self):
        return _red_pandas.vectorser___bool__(self)

    def __len__(self):
        return _red_pandas.vectorser___len__(self)

    def __getslice__(self, i, j):
        return _red_pandas.vectorser___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _red_pandas.vectorser___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _red_pandas.vectorser___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _red_pandas.vectorser___delitem__(self, *args)

    def __getitem__(self, *args):
        return _red_pandas.vectorser___getitem__(self, *args)

    def __setitem__(self, *args):
        return _red_pandas.vectorser___setitem__(self, *args)

    def pop(self):
        return _red_pandas.vectorser_pop(self)

    def append(self, x):
        return _red_pandas.vectorser_append(self, x)

    def empty(self):
        return _red_pandas.vectorser_empty(self)

    def size(self):
        return _red_pandas.vectorser_size(self)

    def swap(self, v):
        return _red_pandas.vectorser_swap(self, v)

    def begin(self):
        return _red_pandas.vectorser_begin(self)

    def end(self):
        return _red_pandas.vectorser_end(self)

    def rbegin(self):
        return _red_pandas.vectorser_rbegin(self)

    def rend(self):
        return _red_pandas.vectorser_rend(self)

    def clear(self):
        return _red_pandas.vectorser_clear(self)

    def get_allocator(self):
        return _red_pandas.vectorser_get_allocator(self)

    def pop_back(self):
        return _red_pandas.vectorser_pop_back(self)

    def erase(self, *args):
        return _red_pandas.vectorser_erase(self, *args)

    def __init__(self, *args):
        _red_pandas.vectorser_swiginit(self, _red_pandas.new_vectorser(*args))

    def push_back(self, x):
        return _red_pandas.vectorser_push_back(self, x)

    def front(self):
        return _red_pandas.vectorser_front(self)

    def back(self):
        return _red_pandas.vectorser_back(self)

    def assign(self, n, x):
        return _red_pandas.vectorser_assign(self, n, x)

    def resize(self, *args):
        return _red_pandas.vectorser_resize(self, *args)

    def insert(self, *args):
        return _red_pandas.vectorser_insert(self, *args)

    def reserve(self, n):
        return _red_pandas.vectorser_reserve(self, n)

    def capacity(self):
        return _red_pandas.vectorser_capacity(self)
    __swig_destroy__ = _red_pandas.delete_vectorser

# Register vectorser in _red_pandas:
_red_pandas.vectorser_swigregister(vectorser)

class vectorm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _red_pandas.vectorm_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _red_pandas.vectorm___nonzero__(self)

    def __bool__(self):
        return _red_pandas.vectorm___bool__(self)

    def __len__(self):
        return _red_pandas.vectorm___len__(self)

    def __getslice__(self, i, j):
        return _red_pandas.vectorm___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _red_pandas.vectorm___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _red_pandas.vectorm___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _red_pandas.vectorm___delitem__(self, *args)

    def __getitem__(self, *args):
        return _red_pandas.vectorm___getitem__(self, *args)

    def __setitem__(self, *args):
        return _red_pandas.vectorm___setitem__(self, *args)

    def pop(self):
        return _red_pandas.vectorm_pop(self)

    def append(self, x):
        return _red_pandas.vectorm_append(self, x)

    def empty(self):
        return _red_pandas.vectorm_empty(self)

    def size(self):
        return _red_pandas.vectorm_size(self)

    def swap(self, v):
        return _red_pandas.vectorm_swap(self, v)

    def begin(self):
        return _red_pandas.vectorm_begin(self)

    def end(self):
        return _red_pandas.vectorm_end(self)

    def rbegin(self):
        return _red_pandas.vectorm_rbegin(self)

    def rend(self):
        return _red_pandas.vectorm_rend(self)

    def clear(self):
        return _red_pandas.vectorm_clear(self)

    def get_allocator(self):
        return _red_pandas.vectorm_get_allocator(self)

    def pop_back(self):
        return _red_pandas.vectorm_pop_back(self)

    def erase(self, *args):
        return _red_pandas.vectorm_erase(self, *args)

    def __init__(self, *args):
        _red_pandas.vectorm_swiginit(self, _red_pandas.new_vectorm(*args))

    def push_back(self, x):
        return _red_pandas.vectorm_push_back(self, x)

    def front(self):
        return _red_pandas.vectorm_front(self)

    def back(self):
        return _red_pandas.vectorm_back(self)

    def assign(self, n, x):
        return _red_pandas.vectorm_assign(self, n, x)

    def resize(self, *args):
        return _red_pandas.vectorm_resize(self, *args)

    def insert(self, *args):
        return _red_pandas.vectorm_insert(self, *args)

    def reserve(self, n):
        return _red_pandas.vectorm_reserve(self, n)

    def capacity(self):
        return _red_pandas.vectorm_capacity(self)
    __swig_destroy__ = _red_pandas.delete_vectorm

# Register vectorm in _red_pandas:
_red_pandas.vectorm_swigregister(vectorm)

class vector_results(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _red_pandas.vector_results_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _red_pandas.vector_results___nonzero__(self)

    def __bool__(self):
        return _red_pandas.vector_results___bool__(self)

    def __len__(self):
        return _red_pandas.vector_results___len__(self)

    def __getslice__(self, i, j):
        return _red_pandas.vector_results___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _red_pandas.vector_results___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _red_pandas.vector_results___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _red_pandas.vector_results___delitem__(self, *args)

    def __getitem__(self, *args):
        return _red_pandas.vector_results___getitem__(self, *args)

    def __setitem__(self, *args):
        return _red_pandas.vector_results___setitem__(self, *args)

    def pop(self):
        return _red_pandas.vector_results_pop(self)

    def append(self, x):
        return _red_pandas.vector_results_append(self, x)

    def empty(self):
        return _red_pandas.vector_results_empty(self)

    def size(self):
        return _red_pandas.vector_results_size(self)

    def swap(self, v):
        return _red_pandas.vector_results_swap(self, v)

    def begin(self):
        return _red_pandas.vector_results_begin(self)

    def end(self):
        return _red_pandas.vector_results_end(self)

    def rbegin(self):
        return _red_pandas.vector_results_rbegin(self)

    def rend(self):
        return _red_pandas.vector_results_rend(self)

    def clear(self):
        return _red_pandas.vector_results_clear(self)

    def get_allocator(self):
        return _red_pandas.vector_results_get_allocator(self)

    def pop_back(self):
        return _red_pandas.vector_results_pop_back(self)

    def erase(self, *args):
        return _red_pandas.vector_results_erase(self, *args)

    def __init__(self, *args):
        _red_pandas.vector_results_swiginit(self, _red_pandas.new_vector_results(*args))

    def push_back(self, x):
        return _red_pandas.vector_results_push_back(self, x)

    def front(self):
        return _red_pandas.vector_results_front(self)

    def back(self):
        return _red_pandas.vector_results_back(self)

    def assign(self, n, x):
        return _red_pandas.vector_results_assign(self, n, x)

    def resize(self, *args):
        return _red_pandas.vector_results_resize(self, *args)

    def insert(self, *args):
        return _red_pandas.vector_results_insert(self, *args)

    def reserve(self, n):
        return _red_pandas.vector_results_reserve(self, n)

    def capacity(self):
        return _red_pandas.vector_results_capacity(self)
    __swig_destroy__ = _red_pandas.delete_vector_results

# Register vector_results in _red_pandas:
_red_pandas.vector_results_swigregister(vector_results)

class vector_tx_from(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _red_pandas.vector_tx_from_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _red_pandas.vector_tx_from___nonzero__(self)

    def __bool__(self):
        return _red_pandas.vector_tx_from___bool__(self)

    def __len__(self):
        return _red_pandas.vector_tx_from___len__(self)

    def __getslice__(self, i, j):
        return _red_pandas.vector_tx_from___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _red_pandas.vector_tx_from___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _red_pandas.vector_tx_from___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _red_pandas.vector_tx_from___delitem__(self, *args)

    def __getitem__(self, *args):
        return _red_pandas.vector_tx_from___getitem__(self, *args)

    def __setitem__(self, *args):
        return _red_pandas.vector_tx_from___setitem__(self, *args)

    def pop(self):
        return _red_pandas.vector_tx_from_pop(self)

    def append(self, x):
        return _red_pandas.vector_tx_from_append(self, x)

    def empty(self):
        return _red_pandas.vector_tx_from_empty(self)

    def size(self):
        return _red_pandas.vector_tx_from_size(self)

    def swap(self, v):
        return _red_pandas.vector_tx_from_swap(self, v)

    def begin(self):
        return _red_pandas.vector_tx_from_begin(self)

    def end(self):
        return _red_pandas.vector_tx_from_end(self)

    def rbegin(self):
        return _red_pandas.vector_tx_from_rbegin(self)

    def rend(self):
        return _red_pandas.vector_tx_from_rend(self)

    def clear(self):
        return _red_pandas.vector_tx_from_clear(self)

    def get_allocator(self):
        return _red_pandas.vector_tx_from_get_allocator(self)

    def pop_back(self):
        return _red_pandas.vector_tx_from_pop_back(self)

    def erase(self, *args):
        return _red_pandas.vector_tx_from_erase(self, *args)

    def __init__(self, *args):
        _red_pandas.vector_tx_from_swiginit(self, _red_pandas.new_vector_tx_from(*args))

    def push_back(self, x):
        return _red_pandas.vector_tx_from_push_back(self, x)

    def front(self):
        return _red_pandas.vector_tx_from_front(self)

    def back(self):
        return _red_pandas.vector_tx_from_back(self)

    def assign(self, n, x):
        return _red_pandas.vector_tx_from_assign(self, n, x)

    def resize(self, *args):
        return _red_pandas.vector_tx_from_resize(self, *args)

    def insert(self, *args):
        return _red_pandas.vector_tx_from_insert(self, *args)

    def reserve(self, n):
        return _red_pandas.vector_tx_from_reserve(self, n)

    def capacity(self):
        return _red_pandas.vector_tx_from_capacity(self)
    __swig_destroy__ = _red_pandas.delete_vector_tx_from

# Register vector_tx_from in _red_pandas:
_red_pandas.vector_tx_from_swigregister(vector_tx_from)

unknown_type = _red_pandas.unknown_type
basic_none_type = _red_pandas.basic_none_type
string_type = _red_pandas.string_type
basic_numpy_type = _red_pandas.basic_numpy_type
integer_numpy_type = _red_pandas.integer_numpy_type
map_string_serie_type = _red_pandas.map_string_serie_type
map_serie_serie_type = _red_pandas.map_serie_serie_type
set_serie_type = _red_pandas.set_serie_type
vector_none_type = _red_pandas.vector_none_type
vector_string_type = _red_pandas.vector_string_type
vector_map_string_serie_type = _red_pandas.vector_map_string_serie_type
vector_map_serie_serie_type = _red_pandas.vector_map_serie_serie_type
vector_set_serie_type = _red_pandas.vector_set_serie_type
vector_serie_type = _red_pandas.vector_serie_type
calculation_type = _red_pandas.calculation_type
total_types = _red_pandas.total_types
class NoneType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _red_pandas.NoneType_swiginit(self, _red_pandas.new_NoneType())
    __swig_destroy__ = _red_pandas.delete_NoneType

# Register NoneType in _red_pandas:
_red_pandas.NoneType_swigregister(NoneType)

class Serie(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _red_pandas.delete_Serie

    def __init__(self, *args):
        _red_pandas.Serie_swiginit(self, _red_pandas.new_Serie(*args))

    def __add__(self, *args):
        return _red_pandas.Serie___add__(self, *args)

    def __sub__(self, *args):
        return _red_pandas.Serie___sub__(self, *args)

    def __mul__(self, *args):
        return _red_pandas.Serie___mul__(self, *args)

    def __truediv__(self, *args):
        return _red_pandas.Serie___truediv__(self, *args)
    __div__ = __truediv__



    def __neg__(self):
        return _red_pandas.Serie___neg__(self)

    def __str__(self):
        return _red_pandas.Serie___str__(self)

    def read(self, offset):
        return _red_pandas.Serie_read(self, offset)

    def write(self, offset, data):
        return _red_pandas.Serie_write(self, offset, data)

    def get_calc(self):
        return _red_pandas.Serie_get_calc(self)

    def data(self):
        return _red_pandas.Serie_data(self)

    def raw_data(self, *args):
        return _red_pandas.Serie_raw_data(self, *args)

    def sub(self, *args):
        return _red_pandas.Serie_sub(self, *args)

    def size(self):
        return _red_pandas.Serie_size(self)

    def wait(self, *args):
        return _red_pandas.Serie_wait(self, *args)

    def is_calculated(self):
        return _red_pandas.Serie_is_calculated(self)

    def get_basic_string(self):
        return _red_pandas.Serie_get_basic_string(self)

    def get_map_string_serie(self):
        return _red_pandas.Serie_get_map_string_serie(self)

    def get_map_serie_serie(self):
        return _red_pandas.Serie_get_map_serie_serie(self)

    def get_vector_none(self):
        return _red_pandas.Serie_get_vector_none(self)

    def get_vector_string(self):
        return _red_pandas.Serie_get_vector_string(self)

    def get_vector_serie(self):
        return _red_pandas.Serie_get_vector_serie(self)

    def get_vector_map_string_serie(self):
        return _red_pandas.Serie_get_vector_map_string_serie(self)

    def get_vector_map_serie_serie(self):
        return _red_pandas.Serie_get_vector_map_serie_serie(self)

    def to_vector(self):
        return _red_pandas.Serie_to_vector(self)

    def get_set_serie(self):
        return _red_pandas.Serie_get_set_serie(self)

    def get_vector_set_serie(self):
        return _red_pandas.Serie_get_vector_set_serie(self)

    def set_basic_string(self, data):
        return _red_pandas.Serie_set_basic_string(self, data)

    def set_basic_none(self):
        return _red_pandas.Serie_set_basic_none(self)

    def set_basic_numpy(self, *args):
        return _red_pandas.Serie_set_basic_numpy(self, *args)

    def set_vector_string(self, data):
        return _red_pandas.Serie_set_vector_string(self, data)

    def set_calculation(self, data):
        return _red_pandas.Serie_set_calculation(self, data)
    type = property(_red_pandas.Serie_type_get, _red_pandas.Serie_type_set)
    write_notification = property(_red_pandas.Serie_write_notification_get, _red_pandas.Serie_write_notification_set)

# Register Serie in _red_pandas:
_red_pandas.Serie_swigregister(Serie)


def array(*args):
    return _red_pandas.array(*args)
class Serie2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _red_pandas.delete_Serie2d

    def __init__(self, *args):
        _red_pandas.Serie2d_swiginit(self, _red_pandas.new_Serie2d(*args))

# Register Serie2d in _red_pandas:
_red_pandas.Serie2d_swigregister(Serie2d)
static = _red_pandas.static


def any_less(*args):
    return _red_pandas.any_less(*args)

def all_less(*args):
    return _red_pandas.all_less(*args)

def any_isfinite(*args):
    return _red_pandas.any_isfinite(*args)

def all_isfinite(*args):
    return _red_pandas.all_isfinite(*args)

def div2(*args):
    return _red_pandas.div2(*args)

def mul2(s0, s1):
    return _red_pandas.mul2(s0, s1)

def mul2ref(s0, s1):
    return _red_pandas.mul2ref(s0, s1)

def sub2(s0, s1):
    return _red_pandas.sub2(s0, s1)

def sub2ref(s0, s1):
    return _red_pandas.sub2ref(s0, s1)

def sum2(s0, s1):
    return _red_pandas.sum2(s0, s1)

def sum2ref(s0, s1):
    return _red_pandas.sum2ref(s0, s1)

def sum_reactive(s0, s1):
    return _red_pandas.sum_reactive(s0, s1)

def first(left, right):
    return _red_pandas.first(left, right)

def last(left, right):
    return _red_pandas.last(left, right)

def agg(dataset, aggregator):
    return _red_pandas.agg(dataset, aggregator)

def agg_transpose(dataset, aggregator):
    return _red_pandas.agg_transpose(dataset, aggregator)

def mapapply(dataset, transformer):
    return _red_pandas.mapapply(dataset, transformer)

def mapcalculate(dataset):
    return _red_pandas.mapcalculate(dataset)

def sum(dataset):
    return _red_pandas.sum(dataset)

def sum_transpose(dataset):
    return _red_pandas.sum_transpose(dataset)

def mul(dataset):
    return _red_pandas.mul(dataset)

def mul_transpose(dataset):
    return _red_pandas.mul_transpose(dataset)

def mean(dataset, sample=False):
    return _red_pandas.mean(dataset, sample)

def mean_transpose(dataset, sample=False):
    return _red_pandas.mean_transpose(dataset, sample)

def max(dataset):
    return _red_pandas.max(dataset)

def max_transpose(dataset):
    return _red_pandas.max_transpose(dataset)

def min(dataset):
    return _red_pandas.min(dataset)

def min_transpose(dataset):
    return _red_pandas.min_transpose(dataset)

def var(dataset, sample=True):
    return _red_pandas.var(dataset, sample)

def var_transpose(dataset, sample=True, mean0=0):
    return _red_pandas.var_transpose(dataset, sample, mean0)

def std(dataset, sample=True):
    return _red_pandas.std(dataset, sample)

def std_transpose(dataset, sample=True):
    return _red_pandas.std_transpose(dataset, sample)

def window(data, period, right=True):
    return _red_pandas.window(data, period, right)

def window2(data, period, aggregator):
    return _red_pandas.window2(data, period, aggregator)

def window2_mean(data, period, sample=False):
    return _red_pandas.window2_mean(data, period, sample)

def window3(data, period, indicator):
    return _red_pandas.window3(data, period, indicator)

def window3_last_rsi(close, window_period=14, rsi_period=14):
    return _red_pandas.window3_last_rsi(close, window_period, rsi_period)

def transpose(*args):
    return _red_pandas.transpose(*args)

def get_size(dataset, num_rows, num_cols):
    return _red_pandas.get_size(dataset, num_rows, num_cols)

def _print(*args):
    return _red_pandas._print(*args)

def norm_nans(dataset):
    return _red_pandas.norm_nans(dataset)

def norm_fill(dataset, neutral=0.0):
    return _red_pandas.norm_fill(dataset, neutral)

def norm_drop(dataset):
    return _red_pandas.norm_drop(dataset)

def use_callback(f):
    return _red_pandas.use_callback(f)

def custommain():
    return _red_pandas.custommain()

def exp(*args):
    return _red_pandas.exp(*args)

def log(*args):
    return _red_pandas.log(*args)

def pow(s0, s1):
    return _red_pandas.pow(s0, s1)

def powref(s0, s1):
    return _red_pandas.powref(s0, s1)

def sqrt(s0):
    return _red_pandas.sqrt(s0)

def sqrtref(s0):
    return _red_pandas.sqrtref(s0)

def erf(*args):
    return _red_pandas.erf(*args)

def neg(*args):
    return _red_pandas.neg(*args)

def abs(*args):
    return _red_pandas.abs(*args)

def pdf(*args):
    return _red_pandas.pdf(*args)

def cdf(*args):
    return _red_pandas.cdf(*args)

def ppf(*args):
    return _red_pandas.ppf(*args)

def max0(s0):
    return _red_pandas.max0(s0)

def max0ref(s0):
    return _red_pandas.max0ref(s0)

def max2(s0, s1):
    return _red_pandas.max2(s0, s1)

def max2ref(s0, s1):
    return _red_pandas.max2ref(s0, s1)

def min0(s0):
    return _red_pandas.min0(s0)

def min0ref(s0):
    return _red_pandas.min0ref(s0)

def min2(s0, s1):
    return _red_pandas.min2(s0, s1)

def min2ref(s0, s1):
    return _red_pandas.min2ref(s0, s1)

def rsi_indicator(data, period):
    return _red_pandas.rsi_indicator(data, period)

def rsi(*args):
    return _red_pandas.rsi(*args)

def seq(elements):
    return _red_pandas.seq(elements)

def seqref(elements):
    return _red_pandas.seqref(elements)

def shift(*args):
    return _red_pandas.shift(*args)

def diff(*args):
    return _red_pandas.diff(*args)

def clean(*args):
    return _red_pandas.clean(*args)

def rand_normal(n):
    return _red_pandas.rand_normal(n)
categorical_unknown_type = _red_pandas.categorical_unknown_type
categorical_basic_none_type = _red_pandas.categorical_basic_none_type
categorical_string_type = _red_pandas.categorical_string_type
categorical_basic_numpy_type = _red_pandas.categorical_basic_numpy_type
categorical_map_string_serie_type = _red_pandas.categorical_map_string_serie_type
categorical_map_serie_serie_type = _red_pandas.categorical_map_serie_serie_type
categorical_set_serie_type = _red_pandas.categorical_set_serie_type
categorical_vector_none_type = _red_pandas.categorical_vector_none_type
categorical_vector_string_type = _red_pandas.categorical_vector_string_type
categorical_vector_map_string_serie_type = _red_pandas.categorical_vector_map_string_serie_type
categorical_vector_map_serie_serie_type = _red_pandas.categorical_vector_map_serie_serie_type
categorical_vector_set_serie_type = _red_pandas.categorical_vector_set_serie_type
categorical_vector_serie_type = _red_pandas.categorical_vector_serie_type
categorical_calculation_type = _red_pandas.categorical_calculation_type
categorical_total_types = _red_pandas.categorical_total_types
class CategoricalNoneType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _red_pandas.CategoricalNoneType_swiginit(self, _red_pandas.new_CategoricalNoneType())
    __swig_destroy__ = _red_pandas.delete_CategoricalNoneType

# Register CategoricalNoneType in _red_pandas:
_red_pandas.CategoricalNoneType_swigregister(CategoricalNoneType)


def year():
    return _red_pandas.year()

def zero():
    return _red_pandas.zero()

def one():
    return _red_pandas.one()

def two():
    return _red_pandas.two()

def log2():
    return _red_pandas.log2()

def four():
    return _red_pandas.four()

def onehundred():
    return _red_pandas.onehundred()

def half():
    return _red_pandas.half()

def pi():
    return _red_pandas.pi()

def two_pi():
    return _red_pandas.two_pi()

def constant(number):
    return _red_pandas.constant(number)

def threshold():
    return _red_pandas.threshold()

def d1(S, K, r, q, T, Vol):
    return _red_pandas.d1(S, K, r, q, T, Vol)

def d2(S, K, r, q, T, Vol):
    return _red_pandas.d2(S, K, r, q, T, Vol)

def CallPrice(S, K, r, q, T, Vol, d_uno=0, d_dos=0):
    return _red_pandas.CallPrice(S, K, r, q, T, Vol, d_uno, d_dos)

def PutPrice(S, K, r, q, T, Vol, d_uno=0, d_dos=0):
    return _red_pandas.PutPrice(S, K, r, q, T, Vol, d_uno, d_dos)

def CallGreeksDelta(S, K, r, q, T, Vol, d_uno, d_dos):
    return _red_pandas.CallGreeksDelta(S, K, r, q, T, Vol, d_uno, d_dos)

def CallGreeksGamma(S, K, r, q, T, Vol, d_uno, d_dos):
    return _red_pandas.CallGreeksGamma(S, K, r, q, T, Vol, d_uno, d_dos)

def CallGreeksTheta(S, K, r, q, T, Vol, d_uno, d_dos):
    return _red_pandas.CallGreeksTheta(S, K, r, q, T, Vol, d_uno, d_dos)

def CallGreeksVega(S, K, r, q, T, Vol, d_uno, d_dos):
    return _red_pandas.CallGreeksVega(S, K, r, q, T, Vol, d_uno, d_dos)

def CallGreeksRho(S, K, r, q, T, Vol, d_uno, d_dos):
    return _red_pandas.CallGreeksRho(S, K, r, q, T, Vol, d_uno, d_dos)

def PutGreeksDelta(S, K, r, q, T, Vol, d_uno, d_dos):
    return _red_pandas.PutGreeksDelta(S, K, r, q, T, Vol, d_uno, d_dos)

def PutGreeksGamma(S, K, r, q, T, Vol, d_uno, d_dos):
    return _red_pandas.PutGreeksGamma(S, K, r, q, T, Vol, d_uno, d_dos)

def PutGreeksTheta(S, K, r, q, T, Vol, d_uno, d_dos):
    return _red_pandas.PutGreeksTheta(S, K, r, q, T, Vol, d_uno, d_dos)

def PutGreeksVega(S, K, r, q, T, Vol, d_uno, d_dos):
    return _red_pandas.PutGreeksVega(S, K, r, q, T, Vol, d_uno, d_dos)

def PutGreeksRho(S, K, r, q, T, Vol, d_uno, d_dos):
    return _red_pandas.PutGreeksRho(S, K, r, q, T, Vol, d_uno, d_dos)

def ImpliedVolatility(S, K, r, q, T, Vol_guess, market_price, flag, tol=0.0001, lr=0.33, max_iter=100):
    return _red_pandas.ImpliedVolatility(S, K, r, q, T, Vol_guess, market_price, flag, tol, lr, max_iter)

def CallImpliedvolatility(S, K, r, q, T, Vol_guess, market_price):
    return _red_pandas.CallImpliedvolatility(S, K, r, q, T, Vol_guess, market_price)

def PutImpliedvolatility(S, K, r, q, T, Vol_guess, market_price):
    return _red_pandas.PutImpliedvolatility(S, K, r, q, T, Vol_guess, market_price)

def GreeksVolga(S, K, r, q, T, Vol, d_uno, d_dos):
    return _red_pandas.GreeksVolga(S, K, r, q, T, Vol, d_uno, d_dos)

def parkinson(period, high, low):
    return _red_pandas.parkinson(period, high, low)
LINEAR = _red_pandas.LINEAR
YIELD = _red_pandas.YIELD
EXPONENTIAL = _red_pandas.EXPONENTIAL
ANNUAL = _red_pandas.ANNUAL
SEMIANNUAL = _red_pandas.SEMIANNUAL
QUATERLY = _red_pandas.QUATERLY
MONTHLY = _red_pandas.MONTHLY
YEAR = _red_pandas.YEAR
SEMESTER = _red_pandas.SEMESTER
TRIMESTER = _red_pandas.TRIMESTER
MONTH = _red_pandas.MONTH
ACT_ACT = _red_pandas.ACT_ACT
ACT_360 = _red_pandas.ACT_360
ACT_365 = _red_pandas.ACT_365
EQUALS = _red_pandas.EQUALS

def discount2rate(*args):
    return _red_pandas.discount2rate(*args)

def rate2discount(*args):
    return _red_pandas.rate2discount(*args)

def equivalent_rate(*args):
    return _red_pandas.equivalent_rate(*args)

def maturity_to_zero(cash, r, maturity):
    return _red_pandas.maturity_to_zero(cash, r, maturity)

def zero_to_maturity(cash, r, maturity):
    return _red_pandas.zero_to_maturity(cash, r, maturity)

def maturity_to_maturity(*args):
    return _red_pandas.maturity_to_maturity(*args)

def to_present_value(*args):
    return _red_pandas.to_present_value(*args)

def to_future_value(*args):
    return _red_pandas.to_future_value(*args)

def npv_from_coupon(coupon, interest_rate, cal):
    return _red_pandas.npv_from_coupon(coupon, interest_rate, cal)

def coupon_from_npv(*args):
    return _red_pandas.coupon_from_npv(*args)

def coupon_from_fv(*args):
    return _red_pandas.coupon_from_fv(*args)

def fv_from_coupon(coupon, interest_rate, cal):
    return _red_pandas.fv_from_coupon(coupon, interest_rate, cal)

def npv_from_growth_coupon(*args):
    return _red_pandas.npv_from_growth_coupon(*args)

def fv_from_growth_coupon(*args):
    return _red_pandas.fv_from_growth_coupon(*args)

def coupon_from_growth_coupon(*args):
    return _red_pandas.coupon_from_growth_coupon(*args)

def compute_irr(*args):
    return _red_pandas.compute_irr(*args)

def classic_npv(investment, coupon, interest_rate, cal):
    return _red_pandas.classic_npv(investment, coupon, interest_rate, cal)

def bond_npv(*args):
    return _red_pandas.bond_npv(*args)

def stock_npv(investment, dividend, interest_rate, cal):
    return _red_pandas.stock_npv(investment, dividend, interest_rate, cal)

def inverse_lerp(min_value, max_value, v):
    return _red_pandas.inverse_lerp(min_value, max_value, v)

def lerp(min_value, max_value, t):
    return _red_pandas.lerp(min_value, max_value, t)
class Maturity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _red_pandas.Maturity_swiginit(self, _red_pandas.new_Maturity(*args))

    def to(self, target):
        return _red_pandas.Maturity_to(self, target)

    def get_discount_factor(self, ir):
        return _red_pandas.Maturity_get_discount_factor(self, ir)

    def __gt__(self, rhs):
        return _red_pandas.Maturity___gt__(self, rhs)

    def __lt__(self, rhs):
        return _red_pandas.Maturity___lt__(self, rhs)

    def __ge__(self, rhs):
        return _red_pandas.Maturity___ge__(self, rhs)

    def __le__(self, rhs):
        return _red_pandas.Maturity___le__(self, rhs)
    has_pillar = property(_red_pandas.Maturity_has_pillar_get, _red_pandas.Maturity_has_pillar_set)
    pillar = property(_red_pandas.Maturity_pillar_get, _red_pandas.Maturity_pillar_set)
    value = property(_red_pandas.Maturity_value_get, _red_pandas.Maturity_value_set)
    __swig_destroy__ = _red_pandas.delete_Maturity

# Register Maturity in _red_pandas:
_red_pandas.Maturity_swigregister(Maturity)
Maturity.ZERO = _red_pandas.static.Maturity_ZERO
Maturity.ONE = _red_pandas.static.Maturity_ONE


def on_capital(*args):
    return _red_pandas.on_capital(*args)
class ForwardPeriod(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, start_, end_):
        _red_pandas.ForwardPeriod_swiginit(self, _red_pandas.new_ForwardPeriod(start_, end_))

    def duration(self):
        return _red_pandas.ForwardPeriod_duration(self)

    def inside(self, mat):
        return _red_pandas.ForwardPeriod_inside(self, mat)

    def discount_factor(self, *args):
        return _red_pandas.ForwardPeriod_discount_factor(self, *args)

    def forward_rate(self, *args):
        return _red_pandas.ForwardPeriod_forward_rate(self, *args)

    def next_discount_factor(self, ir):
        return _red_pandas.ForwardPeriod_next_discount_factor(self, ir)
    start = property(_red_pandas.ForwardPeriod_start_get, _red_pandas.ForwardPeriod_start_set)
    end = property(_red_pandas.ForwardPeriod_end_get, _red_pandas.ForwardPeriod_end_set)
    __swig_destroy__ = _red_pandas.delete_ForwardPeriod

# Register ForwardPeriod in _red_pandas:
_red_pandas.ForwardPeriod_swigregister(ForwardPeriod)

class ZeroPeriod(ForwardPeriod):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, end):
        _red_pandas.ZeroPeriod_swiginit(self, _red_pandas.new_ZeroPeriod(end))
    __swig_destroy__ = _red_pandas.delete_ZeroPeriod

# Register ZeroPeriod in _red_pandas:
_red_pandas.ZeroPeriod_swigregister(ZeroPeriod)


def __lshift__(*args):
    return _red_pandas.__lshift__(*args)
class Schedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _red_pandas.Schedule_swiginit(self, _red_pandas.new_Schedule(*args))

    def get_forward_periods(self):
        return _red_pandas.Schedule_get_forward_periods(self)

    def get_spot_periods(self):
        return _red_pandas.Schedule_get_spot_periods(self)

    def get_first_period(self):
        return _red_pandas.Schedule_get_first_period(self)

    def get_last_period(self):
        return _red_pandas.Schedule_get_last_period(self)

    def spot_to_forward(self, *args):
        return _red_pandas.Schedule_spot_to_forward(self, *args)
    __swig_destroy__ = _red_pandas.delete_Schedule

# Register Schedule in _red_pandas:
_red_pandas.Schedule_swigregister(Schedule)

class DiscountFactor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _red_pandas.DiscountFactor_swiginit(self, _red_pandas.new_DiscountFactor(*args))

    def to_interest_rate(self, *args):
        return _red_pandas.DiscountFactor_to_interest_rate(self, *args)
    value = property(_red_pandas.DiscountFactor_value_get, _red_pandas.DiscountFactor_value_set)
    __swig_destroy__ = _red_pandas.delete_DiscountFactor

# Register DiscountFactor in _red_pandas:
_red_pandas.DiscountFactor_swigregister(DiscountFactor)

class InterestRate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _red_pandas.InterestRate_swiginit(self, _red_pandas.new_InterestRate(*args))

    def __eq__(self, rhs):
        return _red_pandas.InterestRate___eq__(self, rhs)

    def get_discount_factor_start(self, cal):
        return _red_pandas.InterestRate_get_discount_factor_start(self, cal)

    def get_discount_factors_end(self, cal):
        return _red_pandas.InterestRate_get_discount_factors_end(self, cal)

    def to_discount_factor(self, maturity):
        return _red_pandas.InterestRate_to_discount_factor(self, maturity)

    def to_other_interest_rate(self, *args):
        return _red_pandas.InterestRate_to_other_interest_rate(self, *args)
    value = property(_red_pandas.InterestRate_value_get, _red_pandas.InterestRate_value_set)
    c = property(_red_pandas.InterestRate_c_get, _red_pandas.InterestRate_c_set)
    conv = property(_red_pandas.InterestRate_conv_get, _red_pandas.InterestRate_conv_set)
    __swig_destroy__ = _red_pandas.delete_InterestRate

# Register InterestRate in _red_pandas:
_red_pandas.InterestRate_swigregister(InterestRate)
InterestRate.ZERO = _red_pandas.static.InterestRate_ZERO

class Leg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def npv(self):
        return _red_pandas.Leg_npv(self)

    def add(self, *args):
        return _red_pandas.Leg_add(self, *args)
    flows = property(_red_pandas.Leg_flows_get, _red_pandas.Leg_flows_set)

    def __init__(self):
        _red_pandas.Leg_swiginit(self, _red_pandas.new_Leg())
    __swig_destroy__ = _red_pandas.delete_Leg

# Register Leg in _red_pandas:
_red_pandas.Leg_swigregister(Leg)

class Product(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def add(self, leg):
        return _red_pandas.Product_add(self, leg)

    def npv(self):
        return _red_pandas.Product_npv(self)
    legs = property(_red_pandas.Product_legs_get, _red_pandas.Product_legs_set)

    def __init__(self):
        _red_pandas.Product_swiginit(self, _red_pandas.new_Product())
    __swig_destroy__ = _red_pandas.delete_Product

# Register Product in _red_pandas:
_red_pandas.Product_swigregister(Product)

class TermStructure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _red_pandas.TermStructure_swiginit(self, _red_pandas.new_TermStructure(*args))

    def append_spot(self, *args):
        return _red_pandas.TermStructure_append_spot(self, *args)

    def append_forward(self, maturity, ir):
        return _red_pandas.TermStructure_append_forward(self, maturity, ir)

    def append_par(self, maturity, ir):
        return _red_pandas.TermStructure_append_par(self, maturity, ir)

    def build(self):
        return _red_pandas.TermStructure_build(self)

    def get_discount_factor_start(self):
        return _red_pandas.TermStructure_get_discount_factor_start(self)

    def get_discount_factors_end(self):
        return _red_pandas.TermStructure_get_discount_factors_end(self)

    def get_interpolated_interest_rate(self, maturity):
        return _red_pandas.TermStructure_get_interpolated_interest_rate(self, maturity)

    def make_cashflow(self, maturity, cash):
        return _red_pandas.TermStructure_make_cashflow(self, maturity, cash)

    def get_spots(self, *args):
        return _red_pandas.TermStructure_get_spots(self, *args)

    def get_forwards(self, *args):
        return _red_pandas.TermStructure_get_forwards(self, *args)

    def get_first_maturity(self):
        return _red_pandas.TermStructure_get_first_maturity(self)

    def get_first_interest_rate(self):
        return _red_pandas.TermStructure_get_first_interest_rate(self)

    def get_last_maturity(self):
        return _red_pandas.TermStructure_get_last_maturity(self)

    def get_last_interest_rate(self):
        return _red_pandas.TermStructure_get_last_interest_rate(self)
    _convention = property(_red_pandas.TermStructure__convention_get, _red_pandas.TermStructure__convention_set)
    _compound_times = property(_red_pandas.TermStructure__compound_times_get, _red_pandas.TermStructure__compound_times_set)
    __swig_destroy__ = _red_pandas.delete_TermStructure

# Register TermStructure in _red_pandas:
_red_pandas.TermStructure_swigregister(TermStructure)

class CashFlow(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _red_pandas.delete_CashFlow

    def to_start_cashflow(self):
        return _red_pandas.CashFlow_to_start_cashflow(self)

    def to_end_cashflow(self):
        return _red_pandas.CashFlow_to_end_cashflow(self)

    def to_coupon(self, *args):
        return _red_pandas.CashFlow_to_coupon(self, *args)

    def to_custom_cashflow(self, *args):
        return _red_pandas.CashFlow_to_custom_cashflow(self, *args)
    cash = property(_red_pandas.CashFlow_cash_get, _red_pandas.CashFlow_cash_set)

# Register CashFlow in _red_pandas:
_red_pandas.CashFlow_swigregister(CashFlow)

class CouponCashFlow(CashFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _red_pandas.CouponCashFlow_swiginit(self, _red_pandas.new_CouponCashFlow(*args))

    def to_start_cashflow(self):
        return _red_pandas.CouponCashFlow_to_start_cashflow(self)

    def to_end_cashflow(self):
        return _red_pandas.CouponCashFlow_to_end_cashflow(self)

    def to_coupon(self, *args):
        return _red_pandas.CouponCashFlow_to_coupon(self, *args)

    def to_custom_cashflow(self, *args):
        return _red_pandas.CouponCashFlow_to_custom_cashflow(self, *args)
    growth = property(_red_pandas.CouponCashFlow_growth_get, _red_pandas.CouponCashFlow_growth_set)
    __swig_destroy__ = _red_pandas.delete_CouponCashFlow

# Register CouponCashFlow in _red_pandas:
_red_pandas.CouponCashFlow_swigregister(CouponCashFlow)

class StartCashFlow(CashFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _red_pandas.StartCashFlow_swiginit(self, _red_pandas.new_StartCashFlow(*args))

    def to_start_cashflow(self):
        return _red_pandas.StartCashFlow_to_start_cashflow(self)

    def to_end_cashflow(self):
        return _red_pandas.StartCashFlow_to_end_cashflow(self)

    def to_coupon(self, *args):
        return _red_pandas.StartCashFlow_to_coupon(self, *args)

    def to_custom_cashflow(self, *args):
        return _red_pandas.StartCashFlow_to_custom_cashflow(self, *args)
    __swig_destroy__ = _red_pandas.delete_StartCashFlow

# Register StartCashFlow in _red_pandas:
_red_pandas.StartCashFlow_swigregister(StartCashFlow)

class EndCashFlow(CashFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _red_pandas.EndCashFlow_swiginit(self, _red_pandas.new_EndCashFlow(*args))

    def to_start_cashflow(self):
        return _red_pandas.EndCashFlow_to_start_cashflow(self)

    def to_end_cashflow(self):
        return _red_pandas.EndCashFlow_to_end_cashflow(self)

    def to_coupon(self, *args):
        return _red_pandas.EndCashFlow_to_coupon(self, *args)

    def to_custom_cashflow(self, *args):
        return _red_pandas.EndCashFlow_to_custom_cashflow(self, *args)
    __swig_destroy__ = _red_pandas.delete_EndCashFlow

# Register EndCashFlow in _red_pandas:
_red_pandas.EndCashFlow_swigregister(EndCashFlow)

class CustomCashFlow(CashFlow):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _red_pandas.CustomCashFlow_swiginit(self, _red_pandas.new_CustomCashFlow(*args))

    def to_start_cashflow(self):
        return _red_pandas.CustomCashFlow_to_start_cashflow(self)

    def to_end_cashflow(self):
        return _red_pandas.CustomCashFlow_to_end_cashflow(self)

    def to_coupon(self, *args):
        return _red_pandas.CustomCashFlow_to_coupon(self, *args)

    def to_custom_cashflow(self, *args):
        return _red_pandas.CustomCashFlow_to_custom_cashflow(self, *args)

    def get_maturity(self):
        return _red_pandas.CustomCashFlow_get_maturity(self)
    __swig_destroy__ = _red_pandas.delete_CustomCashFlow

# Register CustomCashFlow in _red_pandas:
_red_pandas.CustomCashFlow_swigregister(CustomCashFlow)

class TxFrom(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    txid = property(_red_pandas.TxFrom_txid_get, _red_pandas.TxFrom_txid_set)
    vout = property(_red_pandas.TxFrom_vout_get, _red_pandas.TxFrom_vout_set)

    def __init__(self):
        _red_pandas.TxFrom_swiginit(self, _red_pandas.new_TxFrom())
    __swig_destroy__ = _red_pandas.delete_TxFrom

# Register TxFrom in _red_pandas:
_red_pandas.TxFrom_swigregister(TxFrom)

class TxTo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    amount = property(_red_pandas.TxTo_amount_get, _red_pandas.TxTo_amount_set)
    currency = property(_red_pandas.TxTo_currency_get, _red_pandas.TxTo_currency_set)
    wallet = property(_red_pandas.TxTo_wallet_get, _red_pandas.TxTo_wallet_set)

    def __init__(self):
        _red_pandas.TxTo_swiginit(self, _red_pandas.new_TxTo())
    __swig_destroy__ = _red_pandas.delete_TxTo

# Register TxTo in _red_pandas:
_red_pandas.TxTo_swigregister(TxTo)

class amount_info(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, amount, currency):
        _red_pandas.amount_info_swiginit(self, _red_pandas.new_amount_info(amount, currency))

    def get_amount(self):
        return _red_pandas.amount_info_get_amount(self)

    def get_currency(self):
        return _red_pandas.amount_info_get_currency(self)
    __swig_destroy__ = _red_pandas.delete_amount_info

# Register amount_info in _red_pandas:
_red_pandas.amount_info_swigregister(amount_info)

class Transaction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    txid = property(_red_pandas.Transaction_txid_get, _red_pandas.Transaction_txid_set)
    description = property(_red_pandas.Transaction_description_get, _red_pandas.Transaction_description_set)
    group = property(_red_pandas.Transaction_group_get, _red_pandas.Transaction_group_set)
    amounts = property(_red_pandas.Transaction_amounts_get, _red_pandas.Transaction_amounts_set)
    froms = property(_red_pandas.Transaction_froms_get, _red_pandas.Transaction_froms_set)
    tos = property(_red_pandas.Transaction_tos_get, _red_pandas.Transaction_tos_set)

    def get_amount(self, currency):
        return _red_pandas.Transaction_get_amount(self, currency)

    def __init__(self):
        _red_pandas.Transaction_swiginit(self, _red_pandas.new_Transaction())
    __swig_destroy__ = _red_pandas.delete_Transaction

# Register Transaction in _red_pandas:
_red_pandas.Transaction_swigregister(Transaction)

class tuple_hash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, k):
        return _red_pandas.tuple_hash___call__(self, k)

    def __init__(self):
        _red_pandas.tuple_hash_swiginit(self, _red_pandas.new_tuple_hash())
    __swig_destroy__ = _red_pandas.delete_tuple_hash

# Register tuple_hash in _red_pandas:
_red_pandas.tuple_hash_swigregister(tuple_hash)

class BlockChain(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_red_pandas.BlockChain_data_get, _red_pandas.BlockChain_data_set)
    lastid = property(_red_pandas.BlockChain_lastid_get, _red_pandas.BlockChain_lastid_set)
    cached_txtos = property(_red_pandas.BlockChain_cached_txtos_get, _red_pandas.BlockChain_cached_txtos_set)

    def __init__(self):
        _red_pandas.BlockChain_swiginit(self, _red_pandas.new_BlockChain())

    def nextid(self):
        return _red_pandas.BlockChain_nextid(self)

    def is_utxo(self, transaction, to):
        return _red_pandas.BlockChain_is_utxo(self, transaction, to)

    def get_utxos(self, wallet, amount, currency):
        return _red_pandas.BlockChain_get_utxos(self, wallet, amount, currency)

    def add_transaction(self, *args):
        return _red_pandas.BlockChain_add_transaction(self, *args)

    def valid(self):
        return _red_pandas.BlockChain_valid(self)

    def balance(self, wallet):
        return _red_pandas.BlockChain_balance(self, wallet)
    __swig_destroy__ = _red_pandas.delete_BlockChain

# Register BlockChain in _red_pandas:
_red_pandas.BlockChain_swigregister(BlockChain)

class Deal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def price(self, currency):
        return _red_pandas.Deal_price(self, currency)

    def current_price(self, currency):
        return _red_pandas.Deal_current_price(self, currency)

    def buy_value(self, currency):
        return _red_pandas.Deal_buy_value(self, currency)

    def comm_buy(self, currency):
        return _red_pandas.Deal_comm_buy(self, currency)

    def adquisition(self, currency):
        return _red_pandas.Deal_adquisition(self, currency)

    def sold_value(self, currency):
        return _red_pandas.Deal_sold_value(self, currency)

    def comm_sell(self, currency):
        return _red_pandas.Deal_comm_sell(self, currency)

    def transmision(self, currency):
        return _red_pandas.Deal_transmision(self, currency)

    def gross_profit(self, currency):
        return _red_pandas.Deal_gross_profit(self, currency)

    def net_profit(self, currency):
        return _red_pandas.Deal_net_profit(self, currency)

    def gross_performance(self, currency):
        return _red_pandas.Deal_gross_performance(self, currency)

    def net_performance(self, currency):
        return _red_pandas.Deal_net_performance(self, currency)
    __swig_destroy__ = _red_pandas.delete_Deal

# Register Deal in _red_pandas:
_red_pandas.Deal_swigregister(Deal)

class OpenDeal(Deal):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    buy_tx = property(_red_pandas.OpenDeal_buy_tx_get, _red_pandas.OpenDeal_buy_tx_set)

    def price(self, currency):
        return _red_pandas.OpenDeal_price(self, currency)

    def current_price(self, currency):
        return _red_pandas.OpenDeal_current_price(self, currency)

    def buy_value(self, currency):
        return _red_pandas.OpenDeal_buy_value(self, currency)

    def comm_buy(self, currency):
        return _red_pandas.OpenDeal_comm_buy(self, currency)

    def adquisition(self, currency):
        return _red_pandas.OpenDeal_adquisition(self, currency)

    def sold_value(self, currency):
        return _red_pandas.OpenDeal_sold_value(self, currency)

    def comm_sell(self, currency):
        return _red_pandas.OpenDeal_comm_sell(self, currency)

    def transmision(self, currency):
        return _red_pandas.OpenDeal_transmision(self, currency)

    def gross_profit(self, currency):
        return _red_pandas.OpenDeal_gross_profit(self, currency)

    def net_profit(self, currency):
        return _red_pandas.OpenDeal_net_profit(self, currency)

    def gross_performance(self, currency):
        return _red_pandas.OpenDeal_gross_performance(self, currency)

    def net_performance(self, currency):
        return _red_pandas.OpenDeal_net_performance(self, currency)

    def __init__(self):
        _red_pandas.OpenDeal_swiginit(self, _red_pandas.new_OpenDeal())
    __swig_destroy__ = _red_pandas.delete_OpenDeal

# Register OpenDeal in _red_pandas:
_red_pandas.OpenDeal_swigregister(OpenDeal)

class ClosedDeal(Deal):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    open_deal = property(_red_pandas.ClosedDeal_open_deal_get, _red_pandas.ClosedDeal_open_deal_set)
    sell_tx = property(_red_pandas.ClosedDeal_sell_tx_get, _red_pandas.ClosedDeal_sell_tx_set)

    def price(self, currency):
        return _red_pandas.ClosedDeal_price(self, currency)

    def current_price(self, currency):
        return _red_pandas.ClosedDeal_current_price(self, currency)

    def buy_value(self, currency):
        return _red_pandas.ClosedDeal_buy_value(self, currency)

    def comm_buy(self, currency):
        return _red_pandas.ClosedDeal_comm_buy(self, currency)

    def adquisition(self, currency):
        return _red_pandas.ClosedDeal_adquisition(self, currency)

    def sold_value(self, currency):
        return _red_pandas.ClosedDeal_sold_value(self, currency)

    def comm_sell(self, currency):
        return _red_pandas.ClosedDeal_comm_sell(self, currency)

    def transmision(self, currency):
        return _red_pandas.ClosedDeal_transmision(self, currency)

    def gross_profit(self, currency):
        return _red_pandas.ClosedDeal_gross_profit(self, currency)

    def net_profit(self, currency):
        return _red_pandas.ClosedDeal_net_profit(self, currency)

    def gross_performance(self, currency):
        return _red_pandas.ClosedDeal_gross_performance(self, currency)

    def net_performance(self, currency):
        return _red_pandas.ClosedDeal_net_performance(self, currency)

    def __init__(self):
        _red_pandas.ClosedDeal_swiginit(self, _red_pandas.new_ClosedDeal())
    __swig_destroy__ = _red_pandas.delete_ClosedDeal

# Register ClosedDeal in _red_pandas:
_red_pandas.ClosedDeal_swigregister(ClosedDeal)

class SymbolInfoTick(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ask = property(_red_pandas.SymbolInfoTick_ask_get, _red_pandas.SymbolInfoTick_ask_set)
    bid = property(_red_pandas.SymbolInfoTick_bid_get, _red_pandas.SymbolInfoTick_bid_set)

    def __init__(self):
        _red_pandas.SymbolInfoTick_swiginit(self, _red_pandas.new_SymbolInfoTick())
    __swig_destroy__ = _red_pandas.delete_SymbolInfoTick

# Register SymbolInfoTick in _red_pandas:
_red_pandas.SymbolInfoTick_swigregister(SymbolInfoTick)

class FakeTrader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ORDER_TYPE_BUY = _red_pandas.FakeTrader_ORDER_TYPE_BUY
    ORDER_TYPE_SELL = _red_pandas.FakeTrader_ORDER_TYPE_SELL

    def __init__(self):
        _red_pandas.FakeTrader_swiginit(self, _red_pandas.new_FakeTrader())
    __swig_destroy__ = _red_pandas.delete_FakeTrader

# Register FakeTrader in _red_pandas:
_red_pandas.FakeTrader_swigregister(FakeTrader)

class Simulator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PRICE_VOLATILITY = _red_pandas.Simulator_PRICE_VOLATILITY
    BACKTESTING = _red_pandas.Simulator_BACKTESTING

    def __init__(self, mode):
        _red_pandas.Simulator_swiginit(self, _red_pandas.new_Simulator(mode))

    def append_path(self, price, sigma, mu):
        return _red_pandas.Simulator_append_path(self, price, sigma, mu)

    def update(self, dt):
        return _red_pandas.Simulator_update(self, dt)

    def get_results(self):
        return _red_pandas.Simulator_get_results(self)
    __swig_destroy__ = _red_pandas.delete_Simulator

# Register Simulator in _red_pandas:
_red_pandas.Simulator_swigregister(Simulator)

import json
import ctypes
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from pprint import pprint


def dumps_rec(serie, depth=0, recursive=False):

    if isinstance(serie, Serie):

        if serie.type == map_serie_serie_type or serie.type == map_string_serie_type:

            if serie.type == map_serie_serie_type:
                serie_map = serie.get_map_serie_serie()
            elif serie.type == map_string_serie_type:
                serie_map = serie.get_map_string_serie()
            else:
                raise Exception('Invalid type: {}'.format(serie.type))

            if recursive:
                new_map = {}
                for k, v in serie_map.items():
                    key_map = dumps_rec(k, depth+1, recursive=recursive)
                    value_map = dumps_rec(v, depth+1, recursive=recursive)
                    new_map[key_map] = value_map
                return new_map
            else:
# return serie_map.asdict()
                return serie_map

        elif serie.type == set_serie_type:

            return serie.get_set_serie()

        elif    serie.type == basic_numpy_type or \
                serie.type == string_type or \
                serie.type == basic_none_type:

            if serie.type == basic_numpy_type:
                basic = serie.get_basic_numpy()
                if len(basic) == 1:
# TODO: convert List[1] to double
                    basic = basic[0]
            elif serie.type == string_type:
                basic = serie.get_basic_string()
            elif serie.type == basic_none_type:
                basic = None
            else:
                raise Exception('Invalid type: {}'.format(serie.type))

            return basic

        elif serie.type == calculation_type:

            return dumps_rec(serie.get_calc(), depth+1, recursive=recursive)

        else:
            if serie.type == vector_none_type:
                listdata = [None] * len(serie.get_vector_none())
            elif serie.type == vector_string_type:
                listdata = serie.get_vector_string()
            elif serie.type == vector_serie_type:
                listdata = serie.get_vector_serie()
            elif serie.type == vector_map_serie_serie_type:
                listdata = serie.get_vector_map_serie_serie()
            elif serie.type == vector_map_string_serie_type:
                listdata = serie.get_vector_map_string_serie()
            elif serie.type == vector_set_serie_type:
                listdata = serie.get_vector_set_serie()
            else:
                raise Exception('Invalid type: {}'.format(serie.type))

            if recursive:
                list_str = []
                for k in listdata:
                    list_str.append(dumps_rec(k, depth+1, recursive=recursive))
                listdata = list_str

            if len(listdata) == 1:
# List[1] to double
# TODO: use special type
                return listdata[0]
            else:
                return listdata

    else:
# python type
        return serie


def dumps(serie, recursive=False):
    '''
    Print IL with your typing
    '''
    return dumps_rec(serie, recursive=recursive)


def loads(serie):
    '''
    Convert Python Structure to IL
    '''
    if isinstance(serie, dict):
        try:
            new_map = {}
            for k, v in serie.items():
                k_serie = loads(k)
                v_serie = loads(v)
                if not isinstance(v_serie, Serie):
                    v_serie = Serie(v_serie)
                new_map[k_serie] = v_serie
            return Serie(new_map)
        except (ValueError, TypeError):
            new_map = {}
            for k, v in serie.items():
                k_serie = loads(k)
                if not isinstance(k_serie, Serie):
                    k_serie = Serie(k_serie)
                v_serie = loads(v)
                if not isinstance(v_serie, Serie):
                    v_serie = Serie(v_serie)
                new_map[k_serie] = v_serie
            return Serie(new_map)
    elif isinstance(serie, list) or isinstance(serie, tuple):
        try:
            l = []  # list with same basic type
            for k in serie:
                l.append(loads(k))
            return Serie(l)
        except (ValueError, TypeError):
            l = []  # list multiples types differents
            for k in serie:
                elem = loads(k)
                if not isinstance(elem, Serie):
                    l.append(Serie(elem))
                else:
                    l.append(elem)
            return l
    elif isinstance(serie, set):
        try:
            l = set()  # list with same basic type
            for k in serie:
                l.add(loads(k))
            return Serie(l)
        except (ValueError, TypeError):
            l = set()  # list multiples types differents
            for k in serie:
                elem = loads(k)
                if not isinstance(elem, Serie):
                    l.add(Serie(elem))
                else:
                    l.add(elem)
            return l
    else:
        if serie is None:
            return NoneType()
        else:
            if type(serie) == unicode:
                return str(serie)
            else:
                return serie



def read_json(filename):
    with open(filename, 'r') as f:
        obj_python = json.load(f)
    return loads(obj_python)


def write_json(serie, filename, indent=False):
    obj_python = dumps(serie, recursive=True)
    with open(filename, 'w') as f:
        json.dump(obj_python, f, indent=indent)
    return obj_python



def read_il(filename):
    with open(filename, 'r') as f:
        obj_python = eval(f.read())
    return loads(obj_python)


def write_il(serie, filename):
    obj_python = dumps(serie, recursive=True)
    with open(filename, 'w') as f:
        pprint(obj_python, f)


### add methods to Serie

def Serie_get(self):
    return dumps(self)

def Serie_set(self, data):
    if not isinstance(data, Serie):
        data = Serie(data)
    python_obj = dumps(data)
    if  data.type != calculation_type and data.type != self.type or \
            data.type == calculation_type and data.get_calc().type != self.type:
        raise TypeError("Invalid type {}, expected type: {}.".format(type(python_obj), self.type))
    if self.type == basic_numpy_type:
        self.set_basic_numpy(python_obj)
    elif self.type == string_type:
        self.set_basic_string(python_obj)
    elif self.type == basic_none_type:
        self.set_basic_none()
    elif self.type == vector_string_type:
        self.set_vector_string(python_obj)
    else:
        raise Exception("Not Implemmented type: {}".format(self.type))

def Serie___getitem__(self, key):
    return dumps(self).__getitem__(key)


def Serie___iter__(self):
    return dumps(self).__iter__()


def Serie_iteritems(self):
    return dumps(self).iteritems()


def Serie__repr__(self):
    return _red_pandas.Serie___str__(self)


def Serie_to_numpy(self):
    return np.array(self.to_vector())


def Serie_plot(self, name=None):
    '''
    plot "one" in horizontal
    '''
    if name is None:
        plt.plot(range(self.size()), self.to_numpy())
    else:
        plt.plot(range(self.size()), self.to_numpy(), label=name)


def plot_transpose(dataframe, name=None):
    """
    plot "multiples" in vertical
    """
    dataframe = list(map(lambda e: e.to_numpy(), dataframe))
    if name is None:
        plt.plot(range(len(dataframe)), dataframe)
    else:
        plt.plot(range(len(dataframe)), dataframe, label=name)


def show(legend=False):
    if legend:
        plt.legend()
    plt.show()


def Serie_plot_and_show(self, legend=False):
    """
    plot and show
    """
    Serie_plot(self)
    show(legend=legend)


Serie.get = Serie_get
Serie.set = Serie_set
Serie.iteritems = Serie_iteritems
Serie.__getitem__ = Serie___getitem__
Serie.__iter__ = Serie___iter__
Serie.__repr__ = Serie__repr__
Serie.to_numpy = Serie_to_numpy
Serie.plot = Serie_plot
Serie.show = Serie_plot_and_show

# a ctypes callback prototype
py_callback_type = ctypes.CFUNCTYPE(None, ctypes.c_int, ctypes.c_char_p)

def use_callback(py_callback):

# wrap the python callback with a ctypes function pointer
    f = py_callback_type(py_callback)

# get the function pointer of the ctypes wrapper by casting it to void* and taking its value
    f_ptr = ctypes.cast(f, ctypes.c_void_p).value

    _red_pandas.use_callback(f_ptr)

'''
import excelbind

@excelbind.function
def d1_(S:list, K:list, r:list, q:list, T:list, Vol:list) -> list:
    return _red_pandas.d1(array(S), array(K), array(r), array(q), array(T), array(Vol)).to_vector()

@excelbind.function
def d2_(S:list, K:list, r:list, q:list, T:list, Vol:list) -> list:
    return _red_pandas.d2(array(S), array(K), array(r), array(q), array(T), array(Vol)).to_vector()

@excelbind.function
def CallPrice_(S:list, K:list, r:list, q:list, T:list, Vol:list, d_uno:list, d_dos:list) -> list:
    return _red_pandas.CallPrice(array(S), array(K), array(r), array(q), array(T), array(Vol), array(d_uno), array(d_dos)).to_vector()

@excelbind.function
def PutPrice_(S:list, K:list, r:list, q:list, T:list, Vol:list, d_uno:list, d_dos:list) -> list:
    return _red_pandas.PutPrice(array(S), array(K), array(r), array(q), array(T), array(Vol), array(d_uno), array(d_dos)).to_vector()

@excelbind.function
def CallGreeksDelta_(S:list, K:list, r:list, q:list, T:list, Vol:list, d_uno:list, d_dos:list) -> list:
    return _red_pandas.CallGreeksDelta(array(S), array(K), array(r), array(q), array(T), array(Vol), array(d_uno), array(d_dos)).to_vector()

@excelbind.function
def CallGreeksGamma_(S:list, K:list, r:list, q:list, T:list, Vol:list, d_uno:list, d_dos:list) -> list:
    return _red_pandas.CallGreeksGamma(array(S), array(K), array(r), array(q), array(T), array(Vol), array(d_uno), array(d_dos)).to_vector()

@excelbind.function
def CallGreeksTheta_(S:list, K:list, r:list, q:list, T:list, Vol:list, d_uno:list, d_dos:list) -> list:
    return _red_pandas.CallGreeksTheta(array(S), array(K), array(r), array(q), array(T), array(Vol), array(d_uno), array(d_dos)).to_vector()

@excelbind.function
def CallGreeksVega_(S:list, K:list, r:list, q:list, T:list, Vol:list, d_uno:list, d_dos:list) -> list:
    return _red_pandas.CallGreeksVega(array(S), array(K), array(r), array(q), array(T), array(Vol), array(d_uno), array(d_dos)).to_vector()

@excelbind.function
def CallGreeksRho_(S:list, K:list, r:list, q:list, T:list, Vol:list, d_uno:list, d_dos:list) -> list:
    return _red_pandas.CallGreeksRho(array(S), array(K), array(r), array(q), array(T), array(Vol), array(d_uno), array(d_dos)).to_vector()

@excelbind.function
def PutGreeksDelta_(S:list, K:list, r:list, q:list, T:list, Vol:list, d_uno:list, d_dos:list) -> list:
    return _red_pandas.PutGreeksDelta(array(S), array(K), array(r), array(q), array(T), array(Vol), array(d_uno), array(d_dos)).to_vector()

@excelbind.function
def PutGreeksGamma_(S:list, K:list, r:list, q:list, T:list, Vol:list, d_uno:list, d_dos:list) -> list:
    return _red_pandas.PutGreeksGamma(array(S), array(K), array(r), array(q), array(T), array(Vol), array(d_uno), array(d_dos)).to_vector()

@excelbind.function
def PutGreeksTheta_(S:list, K:list, r:list, q:list, T:list, Vol:list, d_uno:list, d_dos:list) -> list:
    return _red_pandas.PutGreeksTheta(array(S), array(K), array(r), array(q), array(T), array(Vol), array(d_uno), array(d_dos)).to_vector()

@excelbind.function
def PutGreeksVega_(S:list, K:list, r:list, q:list, T:list, Vol:list, d_uno:list, d_dos:list) -> list:
    return _red_pandas.PutGreeksVega(array(S), array(K), array(r), array(q), array(T), array(Vol), array(d_uno), array(d_dos)).to_vector()

@excelbind.function
def PutGreeksRho_(S:list, K:list, r:list, q:list, T:list, Vol:list, d_uno:list, d_dos:list) -> list:
    return _red_pandas.PutGreeksRho(array(S), array(K), array(r), array(q), array(T), array(Vol), array(d_uno), array(d_dos)).to_vector()

@excelbind.function
def ImpliedVolatility_(S:list, K:list, r:list, q:list, T:list, Vol_guess:list, market_price:list, flag:str, tol:float=0.0001, lr:float=0.33) -> list:
    return _red_pandas.ImpliedVolatility(array(S), array(K), array(r), array(q), array(T), array(Vol_guess), array(market_price), flag, tol, lr, 100).to_vector()

@excelbind.function
def CallImpliedvolatility_(S:list, K:list, r:list, q:list, T:list, Vol_guess:list, market_price:list) -> list:
    return _red_pandas.CallImpliedvolatility(array(S), array(K), array(r), array(q), array(T), array(Vol_guess), array(market_price)).to_vector()

@excelbind.function
def PutImpliedvolatility_(S:list, K:list, r:list, q:list, T:list, Vol_guess:list, market_price:list) -> list:
    return _red_pandas.PutImpliedvolatility(array(S), array(K), array(r), array(q), array(T), array(Vol_guess), array(market_price)).to_vector()

@excelbind.function
def GreeksVolga(S:list, K:list, r:list, q:list, T:list, Vol:list, d_uno:list, d_dos:list) -> list:
    return _red_pandas.GreeksVolga(array(S), array(K), array(r), array(q), array(T), array(Vol), array(d_uno), array(d_dos)).to_vector()
'''



