<?xml version="1.0" encoding="utf-8"?>
<topic id="d7e05719-f06e-4480-8f4a-e3ce3aeef4e0" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
  <!-->
    <summary>
      <para>Quick Start</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>Clone the 
        <externalLink>
		<linkText>xlltemplate library</linkText>
		<linkUri>https://github.com/keithalewis/xlltemplate.git</linkUri>
		<linkTarget>_blank</linkTarget>
		</externalLink>
		using git.
      	Open <codeInline>xlltemplate.sln</codeInline> and build (F5). This will create
        <codeInline>xlltemplate.xll</codeInline> and open Excel with the add-in loaded. As you
        type <codeInline>=XLL.FUNCTION</codeInline> in a cell you should see it
        appear in intellisense. You can press <literal>TAB</literal> to complete
        the function name and <literal>Ctrl-Shift-A</literal> to insert the
        argument text.
      </para>
    </introduction>
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Scratch">
      <title>Build from scratch</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
        
          The 
        <externalLink>
		<linkText>xll add-in library</linkText>
		<linkUri>https://github.com/keithalewis/xll12.git</linkUri>
		<linkTarget>_blank</linkTarget>
		</externalLink>
		is open source so you can download it and build it yourself.
        </para>
        <para>
          See an <link xlink:href="1ca4c146-05e0-4c23-83af-81e46d7fea68">example</link> of how to create an add-in
        </para>
      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local links
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>